<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>柏竹博客</title>
  
  <subtitle>柏竹</subtitle>
  <link href="/Sanscan12.github.io/atom.xml" rel="self"/>
  
  <link href="https://sanscan12.github.io/"/>
  <updated>2020-07-27T02:04:41.590Z</updated>
  <id>https://sanscan12.github.io/</id>
  
  <author>
    <name>Sanscan12</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java 使用Annotation功能</title>
    <link href="https://sanscan12.github.io/posts/4e67.html"/>
    <id>https://sanscan12.github.io/posts/4e67.html</id>
    <published>2020-07-25T16:00:00.000Z</published>
    <updated>2020-07-27T02:04:41.590Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Annotation"><a href="#Annotation" class="headerlink" title="Annotation"></a>Annotation</h1><blockquote><p><strong>Class Annotation</strong></p><p>java.lang.Object<br>java.text.Annotation </p></blockquote><p>java提供了Annotation功能，可称为自定义注解，用于对 类、构造方法、成员变量、方法、参数等声明，该功能不会影响程序的运行，会对编译器警告等辅助工具产生影响</p><h2 id="定义-Annotation类型"><a href="#定义-Annotation类型" class="headerlink" title="定义 Annotation类型"></a>定义 Annotation类型</h2><p>定义用到 interface关键字 ，前面需加 @ ，定义Annotation类型关键字为： <code>@interface</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">MyAnnotation</span><span class="token punctuation">{</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"ABC"</span><span class="token punctuation">;</span>    Class <span class="token class-name">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>MyAnnotation：</strong> 注解名称。调用时则为 <code>@MyAnnotation</code><br><strong>String、Class：</strong> 成员类型<br><strong>value、type：</strong> 成员名称<br><strong>default：</strong> 定义默认值（使用时无需声明）</p></blockquote><h2 id="使用种类锁定"><a href="#使用种类锁定" class="headerlink" title="使用种类锁定"></a>使用种类锁定</h2><h3 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h3><p>定义Annotation类型时，可用<code>@Target</code>来设置Annotation类型适用的程序元素钟种类，未设置则为使用所有程序元素。<code>@Target</code>的设置有枚举类ElementType中的常量</p><table><thead><tr><th>ElementType枚举常量</th><th>说明</th></tr></thead><tbody><tr><td>ANNOTATION_TYPE</td><td>用于Annotation类型</td></tr><tr><td>TYPE</td><td>用于类、接口、枚举、Annotation类型</td></tr><tr><td>CONSTRUCTOR</td><td>用于构造方法</td></tr><tr><td>FIELD</td><td>用于成员变量、枚举常量</td></tr><tr><td>METHOD</td><td>用于方法</td></tr><tr><td>PARAMETER</td><td>用于参数</td></tr><tr><td>LOCAL_VARIABLE</td><td>用于局部变量</td></tr><tr><td>PACKAGE</td><td>用于包</td></tr></tbody></table><h3 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h3><p>定义Annotation类型时，<code>@Retention</code>用来设置Annotation的有效范围，未设置则为CLASS范围表示。<code>@Retention</code>的设置有枚举类RetentionPolicy中的常量</p><table><thead><tr><th>RetentionPolicy枚举常量</th><th>说明</th></tr></thead><tbody><tr><td>SOURCE</td><td>表示不编译Annotation到类文件中，有效范围最小</td></tr><tr><td>CLASS</td><td>表示编译Annotation到类文件中，运行时不加载Annotation到JVM中</td></tr><tr><td>RUNTIME</td><td>表示在运行时加载Annotation到JVM中，有效范围最大</td></tr></tbody></table><p>定义Annotation类型语法例子：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>CONSTRUCTOR<span class="token punctuation">,</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//用于构造方法和方法</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>                   <span class="token comment" spellcheck="true">//运行时加载Annotation到JVM</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">MyAnnotation</span><span class="token punctuation">{</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"ABC"</span><span class="token punctuation">;</span>    Class <span class="token class-name">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子：</p><p><strong>@Constructor_Annotation</strong> 自定义注释 </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ElementType<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Retention<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RetentionPolicy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>CONSTRUCTOR<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//构造方法</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//运行时加载Annotation到JVM</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Constructor_Annotation</span> <span class="token punctuation">{</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"默认构造方法"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>@MyAnnotation</strong> 自定义注释 </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ElementType<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Retention<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RetentionPolicy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于构造方法和方法</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>FIELD <span class="token punctuation">,</span>  ElementType<span class="token punctuation">.</span>METHOD <span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>PARAMETER<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//运行时加载Annotation到JVM</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span>    String <span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Class <span class="token class-name">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Record类</strong> 数据类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Record</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义变量</span>    <span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>describe <span class="token operator">=</span> <span class="token string">"编号"</span> <span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> id <span class="token punctuation">;</span>    <span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>describe <span class="token operator">=</span> <span class="token string">"姓名"</span> <span class="token punctuation">,</span> type <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//空构造方法</span>    <span class="token annotation punctuation">@Constructor_Annotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token function">Record</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//构造方法 Record( int id , String name )</span>    <span class="token annotation punctuation">@Constructor_Annotation</span><span class="token punctuation">(</span><span class="token string">"立即初始化构造方法"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token function">Record</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>describe <span class="token operator">=</span> <span class="token string">"编号"</span> <span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                    <span class="token keyword">int</span> id<span class="token punctuation">,</span>            <span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>describe <span class="token operator">=</span> <span class="token string">"姓名"</span> <span class="token punctuation">,</span> type <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                    String name    <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取编号方法getid()</span>    <span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>describe <span class="token operator">=</span> <span class="token string">"获取"</span> <span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//更改编号方法 setid(int id)</span>    <span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>describe <span class="token operator">=</span> <span class="token string">"设置编号"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setid</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>describe <span class="token operator">=</span> <span class="token string">"编号"</span> <span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                    <span class="token keyword">int</span> id    <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取姓名方法getname()</span>    <span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>describe <span class="token operator">=</span> <span class="token string">"获取姓名"</span> <span class="token punctuation">,</span> type <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//更改姓名方法 setname(String name)</span>    <span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>describe <span class="token operator">=</span> <span class="token string">"设置姓名"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setname</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>describe <span class="token operator">=</span> <span class="token string">"姓名"</span> <span class="token punctuation">,</span> type <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                    String name    <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Demo类</strong> 执行类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Record r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Record</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Record r2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Record</span><span class="token punctuation">(</span><span class="token number">2020003</span> <span class="token punctuation">,</span> <span class="token string">"Jak"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==============输出对象r的成员变量"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id（r）："</span><span class="token operator">+</span>r<span class="token punctuation">.</span><span class="token function">getid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name（r）："</span><span class="token operator">+</span>r<span class="token punctuation">.</span><span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==============输出对象r2成员变量"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id（r2）："</span><span class="token operator">+</span>r2<span class="token punctuation">.</span><span class="token function">getid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name（r2）："</span><span class="token operator">+</span>r2<span class="token punctuation">.</span><span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置参数</span>        r<span class="token punctuation">.</span><span class="token function">setid</span><span class="token punctuation">(</span><span class="token number">22333</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span><span class="token function">setname</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==============输出对象r成员变量(以设置)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id（r）："</span><span class="token operator">+</span>r<span class="token punctuation">.</span><span class="token function">getid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name（r）："</span><span class="token operator">+</span>r<span class="token punctuation">.</span><span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">==============输出对象r的成员变量id（r）：0name（r）：null==============输出对象r2成员变量id（r2）：2020003name（r2）：Jak==============输出对象r成员变量(以设置)id（r）：22333name（r）：Tom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Annotation&quot;&gt;&lt;a href=&quot;#Annotation&quot; class=&quot;headerlink&quot; title=&quot;Annotation&quot;&gt;&lt;/a&gt;Annotation&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Class Annotation&lt;
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://Sanscan12.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="笔记" scheme="https://Sanscan12.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://Sanscan12.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>11Java 反射篇</title>
    <link href="https://sanscan12.github.io/posts/dd4f.html"/>
    <id>https://sanscan12.github.io/posts/dd4f.html</id>
    <published>2020-07-24T16:00:00.000Z</published>
    <updated>2020-07-27T02:03:41.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h1><p>Java反射机制，可以在程序中访问 已经写好类和方法 的Java对象的描述，实现访问、检测、修改Java本身的信息 等功能 。提供功能的包：java.lang.reflect</p><p><strong>Modifier类 常用解析方法：</strong> （解析返回整型数值）</p><table><thead><tr><th>修饰符</th><th>静态方法</th><th>说明</th></tr></thead><tbody><tr><td>boolean</td><td><font color = #05ffdc>Modifier.isPublic（int mod） </font></td><td>被public修饰，则true</td></tr><tr><td>boolean</td><td><font color = #05ffdc>Modifier.isProtected（int mod） </font></td><td>被protected修饰，则true</td></tr><tr><td>boolean</td><td><font color = #05ffdc>Modifier.isPrivate（int mod） </font></td><td>被private修饰，则true</td></tr><tr><td>boolean</td><td><font color = #05ffdc>Modifier.isStatic（int mod） </font></td><td>被static修饰，则true</td></tr><tr><td>boolean</td><td><font color = #05ffdc>Modifier.isFinal（int mod） </font></td><td>被final修饰，则true</td></tr><tr><td>boolean</td><td><font color = #05ffdc>Modifier.toString（int mod） </font></td><td>以字符串形式返回所有修饰符</td></tr></tbody></table><p><strong>其他信息</strong></p><table><thead><tr><th>类型</th><th>修饰符</th><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>包路径</td><td>Package</td><td><font color = #05ffdc>getPackage（） </font></td><td>获取该类的存放路径</td></tr><tr><td>类名称</td><td>String</td><td><font color = #05ffdc>getName（） </font></td><td>获取类名称</td></tr><tr><td>继承类</td><td>Class</td><td><font color = #05ffdc>getSuperclass（） </font></td><td>获取该类的继承类</td></tr><tr><td>实现接口</td><td>Class[]</td><td><font color = #05ffdc>getInterfaces（） </font></td><td>获取该类实现的所有接口</td></tr><tr><td>内部类</td><td>Class[]</td><td><font color = #05ffdc>getClasses（） </font></td><td>获取所有权限为public的内部类</td></tr><tr><td>内部类</td><td>Class[]</td><td><font color = #05ffdc>getDeclaredClasses（） </font></td><td>获取所有内部类</td></tr><tr><td>内部类声明类</td><td>Class</td><td><font color = #05ffdc>getDeclaringClass（） </font></td><td>如果该类为内部类，则返回它的成员类，否则为null（空）</td></tr></tbody></table><h1 id="访问构造方法"><a href="#访问构造方法" class="headerlink" title="访问构造方法"></a>访问构造方法</h1><blockquote><p>*<em>Class Constructor  <code>&lt;T&gt;</code>  *</em></p><p>java.lang.Object<br>java.lang.reflect.AccessibleObject<br>java.lang.reflect.Executable<br>java.lang.reflect.Constructor<code>&lt;T&gt;</code></p></blockquote><p>通过方法访问构造方法，将返回Constructor类型对象，每个Constructor对象代表一个构造方法</p><p><strong>获取构造方法：</strong></p><table><thead><tr><th>修饰符</th><th>方法</th><th align="left">说明</th></tr></thead><tbody><tr><td>Constructor[]</td><td><font color = #05ffdc>class.getConstructors（） </font></td><td align="left">获取所有权限为public（公开）的构造方法</td></tr><tr><td>Constructor</td><td><font color = #05ffdc>class.getConstructor（Class&lt;?&gt;···parameterTypes）</font></td><td align="left">获取权限为public的指定构造方法</td></tr><tr><td>Constructor[]</td><td><font color = #05ffdc>class.getDeclaredConstructors（） </font></td><td align="left">获取所有的构造方法，按声明顺序排列</td></tr><tr><td>Constructor</td><td><font color = #05ffdc>class.getDeclaredConstructor（Class&lt;?&gt;···parameterTypes） </font></td><td align="left">获取指定的构造方法</td></tr></tbody></table><p><strong>Constructor类 常用方法：</strong> </p><table><thead><tr><th>修饰符</th><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>int</td><td><font color = #05ffdc>Constructor.getModifiers（） </font></td><td>获取构造方法的修饰符</td></tr><tr><td>String</td><td><font color = #05ffdc>Constructor.getName（） </font></td><td>获取构造方法的名字</td></tr><tr><td>Class[]</td><td><font color = #05ffdc>Constructor.getParameterTypes（） </font></td><td>获取构造方法的参数类型</td></tr><tr><td>boolean</td><td><font color = #05ffdc>Constructor.isVarArgs（） </font></td><td>带有可变数量的参数，则true</td></tr><tr><td>Class[]</td><td><font color = #05ffdc>Constructor.getExceptionTypes（） </font></td><td>获取构造方法可能抛出的异常类型</td></tr><tr><td>Object <code>T</code></td><td><font color = #05ffdc>Constructor.newInstance（Obj··· initargs） </font></td><td>利用指定参数创建该类对象，如果未设置参数，则以无参构造方法创建</td></tr></tbody></table><p>通过 java.lang.reflect.Modifier类 来解析部分无法识别的信息，比如<font color = #05ffdc>getModifiers（） </font> 返回的值是需要解析的</p><p>例子：</p><p><strong>Student类</strong>（学生类）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id <span class="token punctuation">;</span>    <span class="token keyword">public</span> String name <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> Achievement<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//无参构造方法</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//有参构造方法（参数1）</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//可变参数</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>strs<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"可变参数获取的值有："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String tmp <span class="token operator">:</span> strs<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//私有构造方法（参数3）</span>    <span class="token keyword">private</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> id <span class="token punctuation">,</span> String name <span class="token punctuation">,</span> <span class="token keyword">double</span> Achievement<span class="token punctuation">)</span><span class="token keyword">throws</span> NumberFormatException<span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>Achievement <span class="token operator">=</span> Achievement<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", Achievement="</span> <span class="token operator">+</span> Achievement <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Demo类</strong> （执行类）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Modifier<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取类</span>            Class <span class="token class-name">c</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取所有构造方法</span>            Constructor<span class="token punctuation">[</span><span class="token punctuation">]</span> cons <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//遍历该类中的构造方法</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>Constructor con <span class="token operator">:</span> cons<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//修饰符类型</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>Modifier<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>con<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//构造方法名</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>con<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" ("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//获取参数</span>                Class<span class="token punctuation">[</span><span class="token punctuation">]</span> paras <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//遍历参数元素</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> paras<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>paras<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" args"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span> i <span class="token operator">&lt;</span> paras<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" , "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">") { } "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查看是否允许带有可变数量的参数："</span><span class="token operator">+</span>con<span class="token punctuation">.</span><span class="token function">isVarArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//获取构造方法可能抛出的异常类型 且遍历 异常类型</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"该构造方法可能抛出的异常类型为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Class<span class="token punctuation">[</span><span class="token punctuation">]</span> geterror <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">getExceptionTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>Class <span class="token class-name">tmp</span> <span class="token operator">:</span> geterror<span class="token punctuation">)</span><span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tmp<span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Constructor cs <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Object obj <span class="token operator">=</span> cs<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Constructor cs2 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Object obj2 <span class="token operator">=</span> cs2<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token number">1322334</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Constructor cs3 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取操作权限</span>            cs3<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Object obj3 <span class="token operator">=</span> cs3<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token number">1332445</span> <span class="token punctuation">,</span> <span class="token string">"小明"</span> <span class="token punctuation">,</span> <span class="token number">84.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj3<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">private Student (int args , String args , double args) { } 查看是否允许带有可变数量的参数：false该构造方法可能抛出的异常类型为：class java.lang.NumberFormatException    ---public transient Student (String[] args) { } 查看是否允许带有可变数量的参数：true该构造方法可能抛出的异常类型为：---public Student (int args) { } 查看是否允许带有可变数量的参数：false该构造方法可能抛出的异常类型为：---public Student () { } 查看是否允许带有可变数量的参数：false该构造方法可能抛出的异常类型为：---==================================Student{id=0, name='null', Achievement=0.0}Student{id=1322334, name='null', Achievement=0.0}Student{id=1332445, name='小明', Achievement=84.2}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="访问成员变量"><a href="#访问成员变量" class="headerlink" title="访问成员变量"></a>访问成员变量</h1><blockquote><p><strong>Class Field</strong></p><p>java.lang.Object<br>java.lang.reflect.AccessibleObject<br>java.lang.reflect.Field</p></blockquote><p>通过方法访问成员变量，将返回Field类型对象，每个Field对象代表一个成员变量</p><p><strong>获取成员变量</strong></p><table><thead><tr><th>修饰符</th><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>Field[]</td><td><font color = #05ffdc>class.getFields（） </font></td><td>获取 所有 权限为public的成员变量</td></tr><tr><td>Field</td><td><font color = #05ffdc>class.getField（String name） </font></td><td>获取权限为public的 指定 成员变量</td></tr><tr><td>Field[]</td><td><font color = #05ffdc>class.getDeclaredFields（） </font></td><td>获取说有成员变量，按声明顺序排列</td></tr><tr><td>Field</td><td><font color = #05ffdc>class.getDeclaredField（String name） </font></td><td>获取指定的成员变量</td></tr></tbody></table><p><strong>Field类 常用方法</strong> </p><table><thead><tr><th>修饰符</th><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>String</td><td><font color = #05ffdc>Field.getName（） </font></td><td>返回变量名</td></tr><tr><td>class</td><td><font color = #05ffdc>Field.getType（） </font></td><td>返回该成员类型的class对象</td></tr><tr><td>Object</td><td><font color = #05ffdc>Field.get（Object obj） </font></td><td>指定对象obj中成员变量的值进行返回</td></tr><tr><td>void</td><td><font color = #05ffdc>Field.set（Object obj , Object value） </font></td><td>指定对象obj中成员变量的值置为value</td></tr><tr><td>int</td><td><font color = #05ffdc>Field.getInt（Object obj） </font></td><td>获取指定对象obj中类型为int的值</td></tr><tr><td>void</td><td><font color = #05ffdc>Field.setInt（Object obj , int i） </font></td><td>指定对象obj中类型为int的值置为 i</td></tr><tr><td>float</td><td><font color = #05ffdc>Field.getFloat（Object obj） </font></td><td>获取指定对象obj中类型为float的值</td></tr><tr><td>void</td><td><font color = #05ffdc>Field.setFloat（Object obj , float f） </font></td><td>指定对象obj中类型为float的值置为 f</td></tr><tr><td>boolean</td><td><font color = #05ffdc>Field.getBoolean（Object obj） </font></td><td>获取指定对象obj中类型为boolean的值</td></tr><tr><td>void</td><td><font color = #05ffdc>Field.setBoolean（Object obj , boolean z） </font></td><td>指定对象obj中类型为boolean的值置为 z</td></tr><tr><td>void</td><td><font color = #05ffdc>Field.setAccessible（boolean flag） </font></td><td>设置是否忽略权限限制直接访问私有成员</td></tr><tr><td>int</td><td><font color = #05ffdc>Field.getModifiers（） </font></td><td>获取该成员变量修饰符的整型</td></tr></tbody></table><p><strong>Student类</strong> （学生信息类）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*    *    *   学号    *   名字    *   性别    *   总分数    *    * */</span>    <span class="token comment" spellcheck="true">//分别设置初始值</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">99999</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name <span class="token operator">=</span> <span class="token string">"XXX"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String esx <span class="token operator">=</span> <span class="token string">"男"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> Ovresult <span class="token operator">=</span> <span class="token number">720.0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", esx='"</span> <span class="token operator">+</span> esx <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", Ovresult="</span> <span class="token operator">+</span> Ovresult <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Demo类</strong> （执行类）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Modifier<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*  遍历Student类的成员变量            *            * */</span>            <span class="token comment" spellcheck="true">//获取类</span>            Class <span class="token class-name">c</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取该类所有成员变量</span>            Field<span class="token punctuation">[</span><span class="token punctuation">]</span>  fid<span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取所有的构造方法</span>            Constructor cs <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建该类对象 Student</span>            Student setSude <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> cs<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//遍历成员变量</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"遍历Student类的成员变量："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Field tmp <span class="token operator">:</span> fid<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//修饰符</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>Modifier<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//类型</span>                <span class="token comment" spellcheck="true">//class.getSimpleName()方法 返回类型名称（简略名）</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//变量名</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" = "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//获取指定的成员变量</span>                    <span class="token comment" spellcheck="true">//tmp.getName()返回成员变量名</span>                    Field f <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//忽略权限限制直接访问私有成员</span>                    f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>setSude<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/*  更改Student类的成员变量的值            *            * 由于枚举型，为学习则这样表示            *   数组索引位置的说明：（顺序严格）            *       更改开关            *       更改结果（无更改用null代替）            *            * */</span>            <span class="token comment" spellcheck="true">//限于更改一位同学的数据</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> mations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//更改 学号（0 ，1）</span>                    <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token number">12345</span><span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">//更改 名字（2 ，3）</span>                    <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token string">"小明"</span><span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">//更改性别（4 ，5）（此处为无更改）</span>                    <span class="token boolean">false</span><span class="token punctuation">,</span>                    null<span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">//更改 总分数（6 ，7）</span>                    <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token number">523.5</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取所有成员变量（按声明顺序获取）</span>            Field<span class="token punctuation">[</span><span class="token punctuation">]</span> setmations <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====信息更新===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Field tmp <span class="token operator">:</span> setmations<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//更改学号</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span> mations<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    tmp<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>setSude <span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>mations<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"学号更改为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>setSude<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//更改姓名</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span> mations<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    tmp<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>setSude <span class="token punctuation">,</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>mations<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"姓名更改为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>setSude<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//更改性别</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"esx"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span> mations<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    tmp<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>setSude <span class="token punctuation">,</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>mations<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"性别更改为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>setSude<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//更改总成绩</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Ovresult"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span> mations<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//忽略权限限制直接访问私有成员</span>                    tmp<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    tmp<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>setSude<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>mations<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"总成绩更改为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>setSude<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//重新遍历学生数据</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====重新遍历学生数据===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*            *            * （1）自选            *            *  */</span><span class="token comment" spellcheck="true">//            for (Field tmp : setmations){</span><span class="token comment" spellcheck="true">//                System.out.print(tmp.getName()+" = ");</span><span class="token comment" spellcheck="true">//                System.out.print(tmp.get(setSude));</span><span class="token comment" spellcheck="true">//                System.out.println();</span><span class="token comment" spellcheck="true">//            }</span>            <span class="token comment" spellcheck="true">/*             *             * （2）自选             *             *  */</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>setSude<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> <span class="token operator">|</span> NoSuchMethodException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">遍历Student类的成员变量：public int id = 99999;public String name = XXX;public String esx = 男;private double Ovresult = 720.0;================================信息更新====学号更改为：12345姓名更改为：小明总成绩更改为：523.5====重新遍历学生数据====Student{id=12345, name='小明', esx='男', Ovresult=523.5}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="访问方法"><a href="#访问方法" class="headerlink" title="访问方法"></a>访问方法</h1><blockquote><p><strong>Class Method</strong></p><p>java.lang.Object<br>java.lang.reflect.AccessibleObject<br>java.lang.reflect.Executable<br>java.lang.reflect.Method </p></blockquote><p>通过方法访问方法，将返回Method类型对象，每个Method对象代表一个方法</p><p><strong>获取方法</strong></p><table><thead><tr><th>修饰符</th><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>Method[]</td><td><font color = #05ffdc>class.getMethods（） </font></td><td>获取所有权限为public的方法</td></tr><tr><td>Method</td><td><font color = #05ffdc>class.getMethod（String name , Class&lt;?&gt;····parameterTypes） </font></td><td>获取权限为public的指定方法</td></tr><tr><td>Method[]</td><td><font color = #05ffdc>class.getDeclaredMethods（） </font></td><td>获取所有的方法，按声明顺序排列</td></tr><tr><td>Method</td><td><font color = #05ffdc>class.getDeclaredMethod（String name , Class&lt;?&gt;····parameterTypes） </font></td><td>获取指定方法</td></tr></tbody></table><p><strong>Method类 常用方法</strong></p><table><thead><tr><th>修饰符</th><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>String</td><td><font color = #05ffdc>Method.getName（） </font></td><td>获取方法名称</td></tr><tr><td>Class[]</td><td><font color = #05ffdc>Method.getParameterTypes（）</font></td><td>获取参数的类型</td></tr><tr><td>Class</td><td><font color = #05ffdc>Method.getReturnType（）</font></td><td>获取方法返回的类型</td></tr><tr><td>Class[]</td><td><font color = #05ffdc>Method.getExceptionTypes（）</font></td><td>返回方法抛出的异常类型</td></tr><tr><td>Object</td><td><font color = #05ffdc>Method.invoke（Object obj , Object … args）</font></td><td>指定参数args指定obj方法</td></tr><tr><td>Boolean</td><td><font color = #05ffdc>Method.isVarArgs（）</font></td><td>带有可变数量的参数，则true</td></tr><tr><td>int</td><td><font color = #05ffdc>Method.getModifiers（）</font></td><td>获取方法的修饰符（呈现形式整数）</td></tr></tbody></table><p><strong>Dog类</strong> </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//算术 （数值相加）</span>    <span class="token comment" spellcheck="true">// 抛出算术异常ArithmeticException</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">Countadd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token punctuation">)</span> <span class="token keyword">throws</span> ArithmeticException<span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//行为</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Behavior</span><span class="token punctuation">(</span>String naem <span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>agrs<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"我的小狗叫："</span><span class="token operator">+</span>naem<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"，他会"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String tmp <span class="token operator">:</span> agrs<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>tmp<span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//主人（认领 / 更换）</span>    <span class="token keyword">private</span> String hostnaem <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">Thehost</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hostnaem <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Demo类</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Modifier<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//遍历Dog类的所有方法</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Class <span class="token class-name">c</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"Dog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取所有方法</span>            Method<span class="token punctuation">[</span><span class="token punctuation">]</span> mod <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//遍历方法</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Method tmp <span class="token operator">:</span> mod<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//修饰符权限</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>Modifier<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//方法返回类型</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//方法名字</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" ("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//参数</span>                Class<span class="token punctuation">[</span><span class="token punctuation">]</span> paras <span class="token operator">=</span> tmp<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> paras<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>paras<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//.getSimpleName()   java.lang.String</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> paras<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" ,"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">") "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//抛出异常（无则跳过）</span>                Class<span class="token punctuation">[</span><span class="token punctuation">]</span> exces <span class="token operator">=</span> tmp<span class="token punctuation">.</span><span class="token function">getExceptionTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>exces<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" throws "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> exces<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>exces<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> exces<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"{ } "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 可变数量的参数?"</span><span class="token operator">+</span>tmp<span class="token punctuation">.</span><span class="token function">isVarArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//调用方法Dog类中的Countadd()方法（算术行为）</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======Countadd()方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取构造方法（无参构造方法）</span>            Constructor cs <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//实例化对象</span>            Dog tmpmethod <span class="token operator">=</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span> cs<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Method m<span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"Countadd"</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>tmpmethod <span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//调用方法Dog类中的Behavior()方法（行为）</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======Behavior()方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Method m2<span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"Behavior"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取权限</span>            m2<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m2<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>tmpmethod <span class="token punctuation">,</span> <span class="token string">"Jak"</span> <span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"奔跑"</span> <span class="token punctuation">,</span> <span class="token string">"吃"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//Dog属者(主人)</span>            <span class="token comment" spellcheck="true">//调用方法Dog类中的Thehost()方法</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n======Thehost()方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Method m3<span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"Thehost"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m3<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m3<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>tmpmethod <span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> <span class="token operator">|</span> NoSuchMethodException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">public transient void Behavior (String ,String[]) { }  可变数量的参数?truepublic int Countadd (int ,int)  throws ArithmeticException{ }  可变数量的参数?falseprivate void Thehost (String) { }  可变数量的参数?false======Countadd()方法7======Behavior()方法我的小狗叫：Jak，他会奔跑    吃    ======Thehost()方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="访问Annotation"><a href="#访问Annotation" class="headerlink" title="访问Annotation"></a>访问Annotation</h1><blockquote><p><strong>Class Annotation</strong></p><p>java.lang.Object<br>java.text.Annotation </p></blockquote><p>对Annotation类型未了解，可前去网址了解：<a href="https://blog.csdn.net/weixin_45963193/article/details/107593677" target="_blank" rel="noopener">点击了解</a></p><p>访问的前提注解要有该注解<code>@Retention(RetentionPolicy.RUNTIME)</code></p><p><strong>获取注解</strong></p><table><thead><tr><th>修饰符</th><th>调用的类型</th><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>Annotation</td><td>Constructor（构造方法）<br />Field（成员变量）<br />Method（方法）</td><td><font color = #05ffdc>getAnnotation（Class annotationClass） </font></td><td>获取指定的Annotation，不存在则返回null</td></tr><tr><td>Annotation[]</td><td>Constructor（构造方法）<br />Field（成员变量）<br />Method（方法）</td><td><font color = #05ffdc>getAnnotations（） </font></td><td>获取所有的Annotation</td></tr></tbody></table><p><strong>方法</strong></p><table><thead><tr><th>修饰符</th><th>调用的类型</th><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>String</td><td>Class AnnotationClass</td><td><font color = #05ffdc>toString（） </font></td><td>返回此注释的String表示形式</td></tr><tr><td>boolean</td><td>Constructor（构造方法）<br />Field（成员变量）<br />Method（方法）</td><td><font color = #05ffdc>isAnnotationPresent（Class annotationClass） </font></td><td>查看是否添加注解</td></tr></tbody></table><p>例子：</p><p><strong>BookAnnotation注解</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ElementType<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Retention<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RetentionPolicy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//可被反射利用</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">BookAnnotation</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//备注</span>     String <span class="token function">remark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//属性是否打开</span>     <span class="token keyword">boolean</span> <span class="token function">enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Book类</strong> </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//书名</span>    <span class="token annotation punctuation">@BookAnnotation</span><span class="token punctuation">(</span>remark <span class="token operator">=</span> <span class="token string">"书名"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//类型</span>    <span class="token annotation punctuation">@BookAnnotation</span><span class="token punctuation">(</span>remark <span class="token operator">=</span> <span class="token string">"类型"</span> <span class="token punctuation">,</span> enable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//不启动属性</span>    <span class="token keyword">public</span> String species<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//价钱</span>    <span class="token annotation punctuation">@BookAnnotation</span><span class="token punctuation">(</span>remark <span class="token operator">=</span> <span class="token string">"价钱"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> price<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//厂商</span>    <span class="token annotation punctuation">@BookAnnotation</span><span class="token punctuation">(</span>remark <span class="token operator">=</span> <span class="token string">"厂商"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String firm<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Demo类</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            Class <span class="token class-name">c</span> <span class="token operator">=</span> Book<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取Book类的所有成员变量</span>            Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//遍历成员变量</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Field tmp <span class="token operator">:</span> fields<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//查看是否添加注解（成员变量）</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>BookAnnotation<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"注解过了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//获取所有注解</span>                    BookAnnotation b <span class="token operator">=</span> tmp<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>BookAnnotation<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//返回remark值</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"内容为："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">remark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//返回enable值</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"属性是否有效："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"注解形式："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n=============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">name注解过了内容为：书名属性是否有效：true注解形式：@BookAnnotation(enable=true, remark="书名")==============species注解过了内容为：类型属性是否有效：false注解形式：@BookAnnotation(enable=false, remark="类型")==============price注解过了内容为：价钱属性是否有效：true注解形式：@BookAnnotation(enable=true, remark="价钱")==============firm注解过了内容为：厂商属性是否有效：true注解形式：@BookAnnotation(enable=true, remark="厂商")==============<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java反射&quot;&gt;&lt;a href=&quot;#Java反射&quot; class=&quot;headerlink&quot; title=&quot;Java反射&quot;&gt;&lt;/a&gt;Java反射&lt;/h1&gt;&lt;p&gt;Java反射机制，可以在程序中访问 已经写好类和方法 的Java对象的描述，实现访问、检测、修改Java本身
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://Sanscan12.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="笔记" scheme="https://Sanscan12.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://Sanscan12.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>10Java 输入输出流篇</title>
    <link href="https://sanscan12.github.io/posts/db69.html"/>
    <id>https://sanscan12.github.io/posts/db69.html</id>
    <published>2020-07-21T16:00:00.000Z</published>
    <updated>2020-07-27T02:03:54.319Z</updated>
    
    <content type="html"><![CDATA[<h1 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h1><p>物质在目的地之间的转移运动称为流，可分为 输入流 、 输出流 </p><blockquote><p><strong>输入流：</strong>程序从源中读取数据</p><p><strong>输出流：</strong>数据要到达的目的地</p></blockquote><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java31.png" style="zoom:80%;" /><p><strong>主要流：</strong></p><p><font color = #3366ff>文件流</font><br><font color = #ff6603>缓冲流</font><br><font color = #038003>数据流 </font> </p><h1 id="输入流"><a href="#输入流" class="headerlink" title="输入流"></a>输入流</h1><p>InputStream类 是字节流 的抽象类，所有字节输入流的父类 java.io.InputStream </p><p>Reader类 是字符流 的抽象类 ，是Unicode编码，适合处理文本，所有字符输入流的父类 java.io.Reader</p><p><strong>提供的方法</strong></p><table><thead><tr><th>修饰符</th><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>void</td><td><font color = #05ffdc>close（） </font></td><td>关闭输入流</td></tr><tr><td>void</td><td><font color = #05ffdc>mark（int readlimit） </font></td><td>标记输入流中的当前位置</td></tr><tr><td>boolean</td><td><font color = #05ffdc>markSupported（） </font></td><td>支持 mark和 reset方法，则true</td></tr><tr><td>int</td><td><font color = #05ffdc>read（） </font></td><td>从输入流读取数据，(字节)0~255范围，没有则-1</td></tr><tr><td>int</td><td><font color = #05ffdc>read（E[] b） </font></td><td>从输入流读取一些 字符/字节 ，并将它们存储到缓冲区b</td></tr><tr><td>void</td><td><font color = #05ffdc>reset（） </font></td><td>将流重新定位到上次输入流调用 mark方法时的位置</td></tr><tr><td>long</td><td><font color = #05ffdc>skip（long n） </font></td><td>跳过输入流上的n个字符，返回实际跳过的字节数</td></tr></tbody></table><h1 id="输出流"><a href="#输出流" class="headerlink" title="输出流"></a>输出流</h1><p>OutputStream类 是字节流 的抽象类，所有字节输出流的父类 java.io.OutputStream</p><p>Writer类 是字符流 的抽象类 ，所有字符输入流的父类 java.io.Writer</p><p><strong>提供的方法</strong></p><table><thead><tr><th>修饰符</th><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>void</td><td><font color = #05ffdc>close（） </font></td><td>关闭流</td></tr><tr><td>void</td><td><font color = #05ffdc>flush（） </font></td><td>完成输出清空缓冲</td></tr><tr><td>void</td><td><font color = #05ffdc>write（E text） </font></td><td>将指定text写入流</td></tr><tr><td>void</td><td><font color = #05ffdc>write（E[] b） </font></td><td>将b数组写入流</td></tr><tr><td>void</td><td><font color = #05ffdc>write（E[] b , int off , int len） </font></td><td>将b数组中从偏移量off开始写入len个字节的流</td></tr></tbody></table><h1 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h1><p>File类是代表磁盘的文件或者文件夹（目录），该类可实现创建、删除、重命名文件等操作</p><p><strong>构造方法</strong></p><p><font color = #05ffdc>File（String pathname） </font> 指定路径名 字符串转换为 抽象路径 来创建新File实例</p><p><font color = #05ffdc>File（String parent , String child） </font> 路径名 的字符串 和 文件名字符串 来创建新File实例</p><p><font color = #05ffdc>File（String  f, String child） </font> 抽象路径名 和 文件名字符串 来创建新File实例</p><blockquote><p>pathname：路径名称（包含文件名）</p><p>parent：父路径字符串，例如：D:/doc</p><p>child：子路径字符串 ，例如：no1.txt</p><p>f：父路径对象</p></blockquote><p>以下代码 构造方法创建</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//以项目本身为根路径进行查找文件</span>        File f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/src/deoc.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出绝对路径</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"f1："</span><span class="token operator">+</span>f1<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\Java\\Study\\15Chapter (输入输出流)\\15.3.1 File创建\\src\\"</span><span class="token punctuation">,</span><span class="token string">"deoc.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出绝对路径</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"f2："</span><span class="token operator">+</span>f2<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\Java\\Study\\15Chapter (输入输出流)\\15.3.1 File创建\\src\\"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File f3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>f <span class="token punctuation">,</span> <span class="token string">"deoc.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出绝对路径</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"f3："</span><span class="token operator">+</span>f3<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//路径是否一样</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>f3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">f1：E:\src\deoc.txtf2：E:\Java\Study\15Chapter (输入输出流)\15.3.1 File创建\src\deoc.txtf3：E:\Java\Study\15Chapter (输入输出流)\15.3.1 File创建\src\deoc.txtfalsetrue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>说明：</p><ul><li>盘符的路径名前缀由驱动器号和 <code>:</code>组成</li><li>路径分割一般用： <code>\</code> 或 <code>//</code> </li><li>子路径文件一定要有后缀，如：<code>.jpg</code>、<code>.txt</code></li></ul></blockquote><h2 id="文件操作及获取信息"><a href="#文件操作及获取信息" class="headerlink" title="文件操作及获取信息"></a>文件操作及获取信息</h2><p>File类提供以下为常用方法 ，如果想看更多方法自行查JDK文档</p><table><thead><tr><th>修饰符</th><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>String</td><td><font color = #05ffdc>getName（） </font></td><td>获取文件名称</td></tr><tr><td>boolean</td><td><font color = #05ffdc>canRead（） </font></td><td>判断文件是否为可读</td></tr><tr><td>boolean</td><td><font color = #05ffdc>canWrite（） </font></td><td>判断文件是否可写入</td></tr><tr><td>boolean</td><td><font color = #05ffdc>exists（） </font></td><td>判断文件是否存在</td></tr><tr><td>long</td><td><font color = #05ffdc>length（） </font></td><td>获取文件的长度（字节为单位）</td></tr><tr><td>String</td><td><font color = #05ffdc>getAbsolutePath（） </font></td><td>获取文件的绝对路径</td></tr><tr><td>String</td><td><font color = #05ffdc>getParent（） </font></td><td>获取文件的父路径</td></tr><tr><td>boolean</td><td><font color = #05ffdc>isFile（） </font></td><td>判断文件是否存在（普通文件）</td></tr><tr><td>boolean</td><td><font color = #05ffdc>isDirectory（） </font></td><td>判断文件是否为一个目录</td></tr><tr><td>boolean</td><td><font color = #05ffdc>isHidden（） </font></td><td>判断文件是否为隐藏文件</td></tr><tr><td>long</td><td><font color = #05ffdc>lastModified（） </font></td><td>获取文件最后修改时间（毫秒为单位）</td></tr><tr><td>boolean</td><td><font color = #05ffdc>createNewFile（） </font></td><td>路径文件不存在，则创建新的空文件</td></tr><tr><td>boolean</td><td><font color = #05ffdc>delete（） </font></td><td>删除子路径（最后一个）文件或文件夹</td></tr><tr><td>boolean</td><td><font color = #05ffdc>mkdir（） </font></td><td>创建抽象路径名命名的目录</td></tr><tr><td>boolean</td><td><font color = #05ffdc>mkdirs（） </font></td><td>创建抽象路径名命名的目录，包括任何必需但不存在的父目录</td></tr><tr><td>File[]</td><td><font color = #05ffdc>listFiles（） </font></td><td>返回文件夹所有子文件夹</td></tr></tbody></table><p>以下代码 测试File类方法的使用</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src/"</span><span class="token punctuation">,</span><span class="token string">"doc.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//会在项目里的根路经的src文件夹里常见doc.txt文件</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件不存在，则创建新文件? "</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取文件名称："</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件是否可读?  "</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">canRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件是否可写?  "</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">canWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"判断文件是否存在? "</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出文件长度："</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出文件路径："</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出文件父路径："</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"判断文件是否存在（普通文件）？"</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件是否为一个目录？"</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件是否为隐藏文件？"</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">isHidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出文件最后修改时间戳："</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yy/MM/dd HH:mm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出文件最后修改时间："</span><span class="token operator">+</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        System.out.println("删除文件？"+f.delete());</span>        <span class="token comment" spellcheck="true">//创建的是文件夹</span>        <span class="token comment" spellcheck="true">// mkdir    (创建单个)</span>        <span class="token comment" spellcheck="true">// mkdirs   (创建多个)</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建抽象路径名命名的目录？"</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建在与项目根路经</span>        File fm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"cs1/cs2/cs3/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建抽象路径名命名的目录？"</span><span class="token operator">+</span>fm<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//listFiles方法测试</span>        <span class="token comment" spellcheck="true">//项目根路经</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取项目根路经（防止空指针异常）</span>        File file2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//file2抽象路径必须为绝对路径否则空指针异常</span>        File<span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> file2<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>File tmp <span class="token operator">:</span> files<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件："</span><span class="token operator">+</span>tmp<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件夹："</span><span class="token operator">+</span>tmp<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">文件不存在，则创建新文件? false获取文件名称：doc.txt文件是否可读?  true文件是否可写?  true判断文件是否存在? true输出文件长度：0输出文件路径：E:\Java\Study\15Chapter (输入输出流)\15.3.2 File方法\src\doc.txt输出文件父路径：src判断文件是否存在（普通文件）？true文件是否为一个目录？false文件是否为隐藏文件？false输出文件最后修改时间戳：1594525019225输出文件最后修改时间：20/07/12 11:36创建抽象路径名命名的目录？false创建抽象路径名命名的目录？false===================文件夹：.idea文件：15.3.2 File方法.iml文件夹：cs1文件夹：out文件夹：src<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h1><p>FileInputStream、FileOutputStream类 操作磁盘文件</p><h2 id="字节输出流"><a href="#字节输出流" class="headerlink" title="字节输出流"></a>字节输出流</h2><blockquote><p><strong>Class FileOutputStream</strong></p><p>java.lang.Object<br>java.io.OutputStream<br>java.io.FileOutputStream </p></blockquote><p><strong>构造方法</strong></p><p><font color = #05ffdc>FileOutputStream（File file） </font> </p><p><font color = #05ffdc>FileOutputStream（String name） </font> </p><p><font color = #05ffdc>FileOutputStream（String name , boolean append） </font> </p><p><font color = #05ffdc>FileOutputStream（File file , boolean append） </font> </p><blockquote><p>name：给文件名创建FileInputStream对象<br> file：抽象路径对象创建FileInputStream对象<br>append：是否连续写入数据</p></blockquote><p><strong>常用方法</strong></p><table><thead><tr><th>修饰符</th><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>void</td><td><font color = #05ffdc>close（） </font></td><td>关闭流</td></tr><tr><td>void</td><td><font color = #05ffdc>write（byte[] b） </font></td><td>指定字节数组写入文件</td></tr><tr><td>void</td><td><font color = #05ffdc>write（byte[] b , int off , int len） </font></td><td>指定范围写入字节数组</td></tr><tr><td>void</td><td><font color = #05ffdc>write（int b） </font></td><td>将指定字节写入</td></tr></tbody></table><p>以下代码 写入数据</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//FileOutputStream输出流数据（写入数据）</span>        <span class="token comment" spellcheck="true">//项目根路经</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取项目根路经（防止空指针异常）</span>        File wj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileOutputStream out <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//判断文件是否存在</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>wj<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//实例化</span>                out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>wj<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//新建文件</span>                wj<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//实例化</span>                out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>wj<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            String str <span class="token operator">=</span> <span class="token string">"我喜欢学习Java编程语言!"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将字符串转换为字节数组</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//写入数据</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//关闭流</span>            out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><p>在项目创建了test.txt文件，并写入数据 “我喜欢学习Java编程语言!”  （我运行了3次）</p><h2 id="字节输入流"><a href="#字节输入流" class="headerlink" title="字节输入流"></a>字节输入流</h2><blockquote><p><strong>Class FileInputStream</strong></p><p>java.lang.Object<br>java.io.InputStream<br>java.io.FileInputStream</p></blockquote><p><strong>构造方法</strong></p><p><font color = #05ffdc>FileInputStream（File file） </font> </p><p><font color = #05ffdc>FileInputStream（String name） </font> </p><p><font color = #05ffdc>FileInputStream（String name , boolean append） </font> </p><p><font color = #05ffdc>FileInputStream（File file , boolean append） </font> </p><blockquote><p>name：给文件名创建FileInputStream对象<br>file：抽象路径对象创建FileInputStream对象<br>append：是否连续写入数据</p></blockquote><p><strong>常用方法</strong></p><table><thead><tr><th>修饰符</th><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>void</td><td><font color = #05ffdc>close（） </font></td><td>关闭流</td></tr><tr><td>long</td><td><font color = #05ffdc>length（） </font></td><td>返回底层文件的长度</td></tr><tr><td>int</td><td><font color = #05ffdc>read（） </font></td><td>从流中读取一字节</td></tr><tr><td>int</td><td><font color = #05ffdc>read（byte[] b , int off , int len） </font></td><td>从流中读取off到len位置的字节</td></tr><tr><td>void</td><td><font color = #05ffdc>seek（long pos） </font></td><td>将当前流位置为所需位置</td></tr></tbody></table><p>以下代码 读取文件</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//FileInputStream字节输入流（读取文件）</span>        <span class="token comment" spellcheck="true">//项目根路经</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取项目根路经（防止空指针异常）</span>        File wj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileInputStream input <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>wj<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//实例化</span>                input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>wj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//新建文件</span>                wj<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//实例化</span>                input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>wj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//创建缓冲区</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件内容为："</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//关闭流</span>                input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">文件内容为：我喜欢学习Java编程语言!我喜欢学习Java编程语言!我喜欢学习Java编程语言!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h1><p>字符输入输出流可避免像字节流出现乱码现象！他们是使用方法是大致一样！</p><h2 id="字符输出流"><a href="#字符输出流" class="headerlink" title="字符输出流"></a>字符输出流</h2><blockquote><p><strong>Class FileWriter</strong></p><p>java.lang.Object<br>java.io.Writer<br>java.io.OutputStreamWriter<br>java.io.FileWriter </p></blockquote><p>以下代码 写入文件</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileWriter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"word.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileWriter fw <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"欢迎来到，我的世界"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fw <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><p>在项目根路径创建 word.txt文件 并写入 “欢迎来到，我的世界”</p><h2 id="字符输入流"><a href="#字符输入流" class="headerlink" title="字符输入流"></a>字符输入流</h2><blockquote><p><strong>Class FileReader</strong></p><p>java.lang.Object<br>java.io.Reader<br>java.io.InputStreamReader<br>java.io.FileReader </p></blockquote><p>以下代码 读取文件</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileNotFoundException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"word.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileReader fr <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span>  count <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>ch <span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件内容: "</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fr <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">文件内容: 欢迎来到，我的世界<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="缓存字节流"><a href="#缓存字节流" class="headerlink" title="缓存字节流"></a>缓存字节流</h1><p>缓存是输入输出流的优化，能大大提升传输效率！</p><p>创建构造方法时未定义大小，缓冲大小会默认为 32个字节 做缓存大小</p><p><strong>传输形式</strong></p><p><font size=14px color = red >文件→字节流→缓存流→目的地</font> </p><h2 id="缓存字符输出流"><a href="#缓存字符输出流" class="headerlink" title="缓存字符输出流"></a>缓存字符输出流</h2><blockquote><p><strong>Class BufferedOutputStream</strong></p><p>java.lang.Object<br>java.io.OutputStream<br>java.io.FilterOutputStream<br>java.io.BufferedOutputStream </p></blockquote><p><strong>构造方法</strong></p><p><font color = #05ffdc>BufferedOutputStream（OutputStream out） </font> </p><p><font color = #05ffdc>BufferedOutputStream（OutputStream out , int size） </font> </p><blockquote><p>out：文件输出流<br>size：缓储存大小</p></blockquote><p>以下代码 写入文件</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//文件选择大文件为好，容易体现效果</span>        File field <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"word.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileOutputStream out <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建缓存输出流</span>        BufferedOutputStream buffout <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//时间记录点1</span>        <span class="token keyword">long</span> a <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//用缓存输出流封装输出流</span>            buffout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>            String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"世界你好！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//写入99999次</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">99999</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//单选程序测试</span>                <span class="token comment" spellcheck="true">/*                *                * 选择（1）缓存流测试速度                *                *  */</span>                <span class="token comment" spellcheck="true">//使用流时是使用缓存输出流</span>                buffout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//刷新。强制将缓冲区数据写入文件中，即使缓冲区没有写满</span>                <span class="token comment" spellcheck="true">// 缓存区没写满刷新传输，提升效率</span>                buffout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*                 *                 * 选择（2）字节流测试速度                 *                 *  */</span><span class="token comment" spellcheck="true">//                out.write(bytes);</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//时间记录点2</span>            <span class="token keyword">long</span> b <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"运行了："</span><span class="token operator">+</span><span class="token punctuation">(</span>b<span class="token operator">-</span>a<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"mm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//关闭流</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>out <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>buffout <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    buffout<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缓存流输出还是大文件较好，文件选择建议自选大文件为好呈现</p><h2 id="缓存字符输入流"><a href="#缓存字符输入流" class="headerlink" title="缓存字符输入流"></a>缓存字符输入流</h2><blockquote><p><strong>Class BufferedInputStream</strong></p><p>java.lang.Object<br>java.io.InputStream<br>java.io.FilterInputStream<br>java.io.BufferedInputStream </p></blockquote><p><strong>构造方法</strong></p><p><font color = #05ffdc>BufferedInputStream（InputStream in） </font> </p><p><font color = #05ffdc>BufferedInputStream（InputStream in , int size） </font> </p><blockquote><p>in：文件输出流<br>size：缓储存大小</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//文件选择大文件为好，容易体现效果</span>        File field <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"word.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileInputStream input<span class="token operator">=</span> null<span class="token punctuation">;</span>        BufferedInputStream buffin <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//时间记录点1</span>        <span class="token keyword">long</span> a <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>            buffin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//缓冲区字节数组（与buffered不同）</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*             *             * 选择（1）缓存流测试速度             *             *  */</span>            <span class="token comment" spellcheck="true">//直到读完</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>buffin<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/*             *             * 选择（2）字节流测试速度             *             *  */</span>            <span class="token comment" spellcheck="true">//直到读完</span><span class="token comment" spellcheck="true">//            while ((input.read(bytes))!= -1){ }</span>            <span class="token keyword">long</span> b <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"运行了："</span><span class="token operator">+</span><span class="token punctuation">(</span>b<span class="token operator">-</span>a<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"mm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>input <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>buffin <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    buffin<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果 当然是缓存流比字节流快啦，前提是大文件！</p><h1 id="缓存字符流"><a href="#缓存字符流" class="headerlink" title="缓存字符流"></a>缓存字符流</h1><p>可以以行为单位进行 输入/输出 ，与以上的缓冲字符流大部分相同！</p><h2 id="缓存字符输出流-1"><a href="#缓存字符输出流-1" class="headerlink" title="缓存字符输出流"></a>缓存字符输出流</h2><blockquote><p><strong>Class BufferedWriter</strong></p><p>java.lang.Object<br>java.io.Writer<br>java.io.BufferedWriter </p></blockquote><p>构造方法与以上的一样！</p><p>缓存字符输出流提供独有方法：<font color = #05ffdc>newLine（） </font> 写入一行（换行） 带分割符</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedWriter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileWriter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"word.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileWriter fw<span class="token operator">=</span> null<span class="token punctuation">;</span>        BufferedWriter bfw <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//先创建后关闭</span>            fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            bfw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>fw<span class="token punctuation">)</span><span class="token punctuation">;</span>            String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"世界这么大，"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"我想去看看。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bfw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//写入数据</span>            bfw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建新行</span>            bfw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//写入数据</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//先创建后关闭</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bfw <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    bfw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fw <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在项目创建了test.txt文件，并写入数据 “世界这么大，\n我想去看看。”</p><h2 id="缓存字符输入流-1"><a href="#缓存字符输入流-1" class="headerlink" title="缓存字符输入流"></a>缓存字符输入流</h2><blockquote><p><strong>Class BufferedReader</strong></p><p>java.lang.Object<br>java.io.Reader<br>java.io.BufferedReader </p></blockquote><p>缓存字符输入流提供独有方法：<font color = #05ffdc>String readLine（） </font> 读取一个文本行</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"word.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileReader fr <span class="token operator">=</span> null<span class="token punctuation">;</span>        BufferedReader bfr <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            bfr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span>            String tmp <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//计数变量</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//逐行获取字符串并输出</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tmp <span class="token operator">=</span> bfr<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"行："</span><span class="token operator">+</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bfr <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    bfr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fr <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">第1行：世界这么大，第2行：我想去看看。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h1><p>允许应用程序以与机器无关的方式从底层输入流中读取基本java数据类型</p><h2 id="数据输出流"><a href="#数据输出流" class="headerlink" title="数据输出流"></a>数据输出流</h2><blockquote><p><strong>Class DataOutputStream</strong></p><p>java.lang.Object<br>java.io.OutputStream<br>java.io.FilterOutputStream<br>java.io.DataOutputStream </p></blockquote><p><strong>构造方法</strong></p><p><font color = #05ffdc>DataOutputStream（OutputStream out） </font> </p><blockquote><p>out：底层输出流，保存供以后使用</p></blockquote><p>DataOutputStream类提供了以下独有方法</p><table><thead><tr><th>修饰符</th><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>void</td><td><font color = #05ffdc>writeBoolean（boolean v） </font></td><td>将 boolean写入底层输出流（1字节）</td></tr><tr><td>void</td><td><font color = #05ffdc>writeByte（int v） </font></td><td>将 byte值写入底层输出流（1字节）</td></tr><tr><td>void</td><td><font color = #05ffdc>writeBytes（String s） </font></td><td>将字符串作为字节序列写入基础输出流</td></tr><tr><td>···</td><td>···</td><td>···多余自行查询 JDK文档</td></tr><tr><td>void</td><td><font color = #05ffdc>writeUTF（String str） </font></td><td>使用 modified UTF-8编码以机器无关的方式将字符串写入基础输出流</td></tr></tbody></table><h2 id="数据输入流"><a href="#数据输入流" class="headerlink" title="数据输入流"></a>数据输入流</h2><blockquote><p><strong>Class DataInputStream</strong></p><p>java.lang.Object<br>java.io.InputStream<br>java.io.FilterInputStream<br>java.io.DataInputStream</p></blockquote><p><strong>构造方法</strong></p><p><font color = #05ffdc>DataInputStream（InputStream in） </font> </p><blockquote><p>in：指定的输入流</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"word.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建字节流</span>        FileOutputStream out <span class="token operator">=</span> null<span class="token punctuation">;</span>        FileInputStream inp <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建数据流</span>        DataOutputStream dataout <span class="token operator">=</span> null<span class="token punctuation">;</span>        DataInputStream datainp <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            dataout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>            inp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            datainp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span>inp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//写入数据</span>            dataout<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span><span class="token string">"使用writeUTF方法写入！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dataout<span class="token punctuation">.</span><span class="token function">writeChars</span><span class="token punctuation">(</span><span class="token string">"使用writeChars方法写入！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dataout<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span><span class="token string">"使用writeBytes方法写入！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//读取数据</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在输入流读取数据："</span><span class="token operator">+</span>datainp<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>datainp <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    datainp<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>inp <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    inp<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dataout <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    dataout<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>out <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">在输入流读取数据：使用writeUTF方法写入！<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;I-O&quot;&gt;&lt;a href=&quot;#I-O&quot; class=&quot;headerlink&quot; title=&quot;I/O&quot;&gt;&lt;/a&gt;I/O&lt;/h1&gt;&lt;p&gt;物质在目的地之间的转移运动称为流，可分为 输入流 、 输出流 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入流：&lt;/
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://Sanscan12.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="笔记" scheme="https://Sanscan12.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://Sanscan12.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>09Java 集合类篇</title>
    <link href="https://sanscan12.github.io/posts/f310.html"/>
    <id>https://sanscan12.github.io/posts/f310.html</id>
    <published>2020-07-19T16:00:00.000Z</published>
    <updated>2020-07-27T02:04:02.561Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集合类"><a href="#集合类" class="headerlink" title="集合类"></a>集合类</h1><p>java.util提供的，集合类可称为容器，集合的长度是可变的（动态长度），集合存放的是对象的引用</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java30.png" style="zoom:67%;" /><h1 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h1><p>Collection接口不能直接使用，但提供了添加元素、删除元素、管理元素的方法</p><p><strong>常用方法</strong></p><table><thead><tr><th>修饰符</th><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>void</td><td><font color = #05ffdc>add（E e） </font></td><td>添加指定对象</td></tr><tr><td>void</td><td><font color = #05ffdc>remove（Object o） </font></td><td>指定对象在集合中移除</td></tr><tr><td>boolean</td><td><font color = #05ffdc>isEmpty（） </font></td><td>判断集合是否为空</td></tr><tr><td>int</td><td><font color = #05ffdc>size（） </font></td><td>获取集合中的个数</td></tr><tr><td>Iterator<code>&lt;E&gt;</code></td><td><font color = #05ffdc>iterator（） </font></td><td>集合迭代器</td></tr></tbody></table><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Collection DcArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1集合是否为空？"</span><span class="token operator">+</span>DcArray<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DcArray<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"你好世界！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DcArray<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">233</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DcArray<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DcArray<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2集合是否为空？"</span><span class="token operator">+</span>DcArray<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3集合长度："</span><span class="token operator">+</span>DcArray<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DcArray<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"4集合长度："</span><span class="token operator">+</span>DcArray<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Iterator 集合迭代器</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"5遍历集合内容："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator it <span class="token operator">=</span> DcArray<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//迭代循环有元素，则返回true循环。hasNext()</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//返回迭代下一元素。next();</span>            Object o <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">1集合是否为空？true2集合是否为空？false3集合长度：44集合长度：35遍历集合内容：你好世界！233java.lang.Object@7530d0a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h2><p>List集合像列表清单，它允许元素重复，但各个元素的顺序就是对象插入的顺序</p><p><strong>List接口及实现类</strong></p><p>List接口 继承了 Collection接口，因此也有父接口的方法</p><p><strong>方法</strong></p><table><thead><tr><th>修饰符</th><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>E</td><td><font color = #05ffdc>get（int index） </font></td><td>获取指定索引的元素</td></tr><tr><td>E</td><td><font color = #05ffdc>set（int index , Object obj） </font></td><td>将集合中指定索引位置的对象修改为指定的对象</td></tr><tr><td>boolean</td><td><font color = #05ffdc>add（int index  , Object obj） </font></td><td>指定位置插入数据</td></tr></tbody></table><p><strong>实现类</strong></p><p>List接口常用的类有 ArrayList 与 LinkedList类</p><blockquote><p><strong>Class ArrayList<code>&lt;E&gt;</code></strong></p><p>java.lang.Object<br>java.util.AbstractCollection<code>&lt;E&gt;</code><br>java.util.AbstractList<code>&lt;E&gt;</code><br>java.util.ArrayList<code>&lt;E&gt;</code></p></blockquote><p>ArrayList类 动态数组  </p><pre class="line-numbers language-java"><code class="language-java">Collection DcArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>Class LinkedList<code>&lt;E&gt;</code></strong></p><p>java.lang.Object<br>java.util.AbstractCollection<code>&lt;E&gt;</code><br>java.util.AbstractList<code>&lt;E&gt;</code><br>java.util.AbstractSequentialList<code>&lt;E&gt;</code><br>java.util.LinkedList<code>&lt;E&gt;</code></p></blockquote><p>LinkedList类 链表结构保存对象</p><pre class="line-numbers language-java"><code class="language-java">List  list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>ArrayList与LinkedList的区别</strong></p><p>ArrayList查找较快，但插入、删除对象的速度较慢</p><p>LinkedList查找较慢，但插入、删除对象的速度较快</p><p>以下代码 List集合对 对象的操作</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//另个用法一样</span><span class="token comment" spellcheck="true">//        List  list = new ArrayList();</span>        List  list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//集合长度</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"长度为："</span><span class="token operator">+</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//集合获取索引值(2)</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"get(2)："</span><span class="token operator">+</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//更该索引值（2）</span>        list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"cc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//删除索引值4</span>        list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//中间插入</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"bb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出内容</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"遍历集合："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">长度为：5get(2)：c遍历集合：abbbccdnull<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h2><p>Set集合中的对象不按特定的方式排序，只是单纯的把对象添加到集合中，但不能有重复对象，Set接口 继承了 Collection接口，因此也有父接口的方法</p><p><strong>方法</strong></p><table><thead><tr><th>修饰符</th><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>boolean</td><td><font color = #05ffdc>contains（Object o）</font></td><td>集合包含指定元素，则返回 true</td></tr><tr><td>Iterator<code>&lt;E&gt;</code></td><td><font color = #05ffdc>iterator（） </font></td><td>返回集合中的元素的迭代器</td></tr></tbody></table><p><strong>实现类</strong></p><p><strong>TreeSet类</strong></p><blockquote><p><strong>Class TreeSet<code>&lt;E&gt;</code></strong><br>java.lang.Object<br>java.util.AbstractCollection<code>&lt;E&gt;</code><br>java.util.AbstractSet<code>&lt;E&gt;</code><br>java.util.TreeSet<code>&lt;E&gt;</code></p></blockquote><p>TreeSet类 实现了Set集合在遍历集合时按照自然顺序递增排序</p><p>被排序前提对象要实现 Comparable接口</p><pre class="line-numbers language-java"><code class="language-java">Set set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>TreeSet类 提供方法</strong></p><table><thead><tr><th>修饰符</th><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>E</td><td><font color = #05ffdc>first（） </font></td><td>返回集合中当前的第一个（最低）元素</td></tr><tr><td>E</td><td><font color = #05ffdc>last（） </font></td><td>返回集合中当前的最后（最高）元素</td></tr><tr><td>E</td><td><font color = #05ffdc>comparator（） </font></td><td>返回用于对该集合中的元素进行排序的比较器，或null</td></tr><tr><td>SortedSet<code>&lt;E&gt;</code></td><td><font color = #05ffdc>headSet（E toElement） </font></td><td>返回新的Set集合，新集合 toElement（不包含）之前所有对象</td></tr><tr><td>SortedSet<code>&lt;E&gt;</code></td><td><font color = #05ffdc>subSet（E fromElement, E toElement） </font></td><td>返回新的Set集合，其元素的范围从 fromElement （含）到 toElement</td></tr><tr><td>SortedSet<code>&lt;E&gt;</code></td><td><font color = #05ffdc>tailSet（E fromElement） </font></td><td>返回此组件的元素大于或等于 fromElement的部分的视图</td></tr></tbody></table><p>TreSet类 对象的存储、输出以及方法的使用</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>TreeSet<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">,</span> <span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token punctuation">,</span> <span class="token number">22</span> <span class="token punctuation">,</span> <span class="token string">"小红"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token punctuation">,</span> <span class="token number">22</span> <span class="token punctuation">,</span> <span class="token string">"小军"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token punctuation">,</span> <span class="token number">24</span> <span class="token punctuation">,</span> <span class="token string">"小张"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token punctuation">,</span> <span class="token number">21</span> <span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">9</span> <span class="token punctuation">,</span> <span class="token number">23</span> <span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s6<span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重复，则无效</span><span class="token comment" spellcheck="true">//        set.add(null); 异常</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合总数为："</span><span class="token operator">+</span>set<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"返回集合第一个元素："</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>TreeSet<span class="token punctuation">)</span> set<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"返回集合最后一个元素："</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>TreeSet<span class="token punctuation">)</span> set<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序比较结果为："</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>TreeSet<span class="token punctuation">)</span> set<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n输出集合："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator it <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果迭代有更多的元素，则true</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//next() 会自动调用对象的 toString()方法</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//测试headSet()方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n测试方法2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//截止至s4对象位置</span>        it <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeSet<span class="token punctuation">)</span> set<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">headSet</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//next() 会自动调用对象的 toString()方法</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//测试subSet()方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n测试方法3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定对象范围s ，s3</span>        it <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeSet<span class="token punctuation">)</span> set<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subSet</span><span class="token punctuation">(</span>s <span class="token punctuation">,</span> s3<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//next() 会自动调用对象的 toString()方法</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//测试stailSet()方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n测试方法4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从s4对象位置开始排序</span>        it <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeSet<span class="token punctuation">)</span> set<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tailSet</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//next() 会自动调用对象的 toString()方法</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//实例对象时获取的参数（信息）</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> id <span class="token punctuation">,</span> <span class="token keyword">int</span> age <span class="token punctuation">,</span> String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//迭代输出的信息</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//迭代排序用到的方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student stt<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            stt <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span>o<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//传入的参数比本身小，则-1</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果相同则返回0</span>        <span class="token comment" spellcheck="true">/*        *        * 排序的值尽可能保持 唯一        * 如唯一的id        *        * */</span>        <span class="token comment" spellcheck="true">//按照age排序的顺序(重复会被覆盖掉)</span><span class="token comment" spellcheck="true">//        int tmp = this.age - stt.age;</span>        <span class="token comment" spellcheck="true">//按照id排序的顺序</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">-</span> stt<span class="token punctuation">.</span>id<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//Math.abs() 绝对值</span>            <span class="token comment" spellcheck="true">//差值 除以本身 绝对值，结果只有 1 或 -1值</span>            tmp <span class="token operator">=</span> tmp <span class="token operator">/</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">集合总数为：5返回集合第一个元素：Student{id=1, age=20, name='小明'}返回集合最后一个元素：Student{id=9, age=23, name='李四'}排序比较结果为：null输出集合：Student{id=1, age=20, name='小明'}Student{id=2, age=22, name='小红'}Student{id=3, age=22, name='小军'}Student{id=4, age=24, name='小张'}Student{id=9, age=23, name='李四'}测试方法2Student{id=1, age=20, name='小明'}Student{id=2, age=22, name='小红'}Student{id=3, age=22, name='小军'}测试方法3Student{id=1, age=20, name='小明'}Student{id=2, age=22, name='小红'}测试方法4Student{id=4, age=24, name='小张'}Student{id=9, age=23, name='李四'}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>HashSet类</strong></p><blockquote><p><strong>Class HashSet<code>&lt;E&gt;</code></strong><br>java.lang.Object<br>java.util.AbstractCollection<code>&lt;E&gt;</code><br>java.util.AbstractSet<code>&lt;E&gt;</code> Class HashSet<code>&lt;E&gt;</code><br>java.lang.Object<br>java.util.AbstractCollection<code>&lt;E&gt;</code><br>java.util.AbstractSet<code>&lt;E&gt;</code></p></blockquote><p>不能更改唯一值否则哈希表的唯一地址会错误，也能被删除！！</p><p>用HashSet存储的对象，应该重写以下两方法 hashCode（）方法存哈希、equals（）哈希地址判断</p><p>HashSet类 对象的存储、输出以及方法的使用</p><pre class="line-numbers language-java"><code class="language-java">Set set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Objects<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"小红"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"小军"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"小张"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"小海"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//首位位置里的id：9</span>        p1<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最后位置里的id：9</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加无效</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p6<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"遍历数组："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator in <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> id <span class="token punctuation">;</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> id <span class="token punctuation">,</span> String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//输出对象的值</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Person{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//比较哈希值的地址</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Person person <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> id <span class="token operator">==</span> person<span class="token punctuation">.</span>id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//根据hash返回哈希值</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-text"><code class="language-text">遍历数组：Person{id=9, name='小明'}Person{id=2, name='小红'}Person{id=3, name='小军'}Person{id=4, name='小张'}Person{id=5, name='小海'}Person{id=6, name='小明'}Person{id=9, name='小明'}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>HashSet集合 可能情况：</p><p>集合中不会保存相同的对象</p><p>同一个哈希地址可以存放多个不同对象</p></blockquote><h1 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h1><p>Map集合没有 Collection接口 ，提供了 key （键）到 value（值）的映射。Map中不能有相同的 key （键），每个key （键）只能映射一个 value（值），key （键）决定了存储对象在映射中的存储位置</p><p><strong>Map接口提供的方法</strong></p><table><thead><tr><th>修饰符</th><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>V</td><td><font color = #05ffdc>put（K key , V value） </font></td><td>将键值数据存入Map中</td></tr><tr><td>boolean</td><td><font color = #05ffdc>containsKey（Object key） </font></td><td>查找Map中是否存在指定 键</td></tr><tr><td>boolean</td><td><font color = #05ffdc>containsValue（Object value） </font></td><td>查找Map中是否存在指定 值</td></tr><tr><td>V</td><td><font color = #05ffdc>get（Object key） </font></td><td>通过 键，获取 值</td></tr><tr><td>Set<code>&lt;K&gt;</code></td><td><font color = #05ffdc>keySet（） </font></td><td>返回集合所有 key （键）对象 形成的Set集合</td></tr><tr><td>Collection<code>&lt;V&gt;</code></td><td><font color = #05ffdc>values（） </font></td><td>返回集合所有 value（值）对象 形成的Collection集合</td></tr></tbody></table><p><strong>实现类</strong></p><blockquote><p><strong>Class HashMap<code>&lt;K,V&gt;</code></strong></p><p>java.lang.Object<br>java.util.AbstractMap<code>&lt;K,V&gt;</code><br>java.util.HashMap<code>&lt;K,V&gt;</code></p></blockquote><p>散列码 键值对速度更快，允许null对象，无序存储，但添加、删除快</p><pre class="line-numbers language-java"><code class="language-java">Map<span class="token operator">&lt;</span>K <span class="token punctuation">,</span> V<span class="token operator">></span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>K <span class="token punctuation">,</span> V<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>Class TreeMap<code>&lt;K,V&gt;</code></strong></p><p>java.lang.Object<br>java.util.AbstractMap<code>&lt;K,V&gt;</code><br>java.util.TreeMap<code>&lt;K,V&gt;</code></p></blockquote><p>树状 键值对存放有序，不允许null对象，映射关系有一定的顺序，Key（键）不支持对象，数值，null！！</p><pre class="line-numbers language-java"><code class="language-java">Map<span class="token operator">&lt;</span>K <span class="token punctuation">,</span> V<span class="token operator">></span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token operator">&lt;</span>K <span class="token punctuation">,</span> V<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        Map map2 = new TreeMap();</span>        <span class="token comment" spellcheck="true">//添加数据</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"no1"</span> <span class="token punctuation">,</span> <span class="token string">"no1字符串"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">12</span> <span class="token punctuation">,</span> <span class="token string">"12数值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">12.3</span><span class="token punctuation">,</span> <span class="token string">"12.3单精度"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>null <span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token string">"obj对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Map集合总数为："</span><span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在Map集合中 查找12的键 是否存在？"</span><span class="token operator">+</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在Map集合中 查找 obj的值 是否存在？"</span><span class="token operator">+</span>map<span class="token punctuation">.</span><span class="token function">containsValue</span><span class="token punctuation">(</span><span class="token string">"obj"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n遍历Map集合："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//以Set集合的形式获取所有对象Key对象</span>        Set set <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator it <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取 键</span>            Object K <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//通过 键 获取值 并输出</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"K："</span><span class="token operator">+</span>K<span class="token operator">+</span><span class="token string">"\tV："</span><span class="token operator">+</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>K<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n遍历值："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//以Collection形式获取对象值</span>        Collection con <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator it2 <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>it2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">Map集合总数为：5在Map集合中 查找12的键 是否存在？true在Map集合中 查找 obj的值 是否存在？false遍历Map集合：K：null    V：nullK：java.lang.Object@10f87f48    V：obj对象K：no1    V：no1字符串K：12.3    V：12.3单精度K：12    V：12数值遍历值：nullobj对象no1字符串12.3单精度12数值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><p>迭代器用来遍历集合中的元素</p><p><strong>方法</strong></p><table><thead><tr><th>修饰符</th><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>boolean</td><td><font color = #05ffdc>hasNext（）</font></td><td>迭代具有更多元素，则返回 true</td></tr><tr><td>E</td><td><font color = #05ffdc>next（） </font></td><td>返回迭代中的下一个元素</td></tr><tr><td>void</td><td><font color = #05ffdc>remove（） </font></td><td>从底层集合中删除此迭代器返回的最后一个元素</td></tr></tbody></table><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;集合类&quot;&gt;&lt;a href=&quot;#集合类&quot; class=&quot;headerlink&quot; title=&quot;集合类&quot;&gt;&lt;/a&gt;集合类&lt;/h1&gt;&lt;p&gt;java.util提供的，集合类可称为容器，集合的长度是可变的（动态长度），集合存放的是对象的引用&lt;/p&gt;
&lt;img src=&quot;ht
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://Sanscan12.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="笔记" scheme="https://Sanscan12.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://Sanscan12.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java zip解压缩</title>
    <link href="https://sanscan12.github.io/posts/2fbf.html"/>
    <id>https://sanscan12.github.io/posts/2fbf.html</id>
    <published>2020-07-18T16:00:00.000Z</published>
    <updated>2020-07-27T02:04:29.553Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ZIP文件条目"><a href="#ZIP文件条目" class="headerlink" title="ZIP文件条目"></a>ZIP文件条目</h1><blockquote><p><strong>Class ZipEntry</strong></p><p>java.lang.Object<br>java.util.zip.ZipEntry </p></blockquote><p>ZipEntry类 产生的对象，用来代表代表ZIP压缩文件的进入点</p><p><strong>构造方法</strong></p><p><font color = #05ffdc>ZipEntry（String name） </font> </p><p><font color = #05ffdc>ZipEntry（ZipEntry e） </font> </p><blockquote><p>name：条目名称<br>e：zip条目对象</p></blockquote><p>由于方法过多自行查JDK文档 ，后续有代码例子有说明</p><h1 id="压缩流（压缩文件）"><a href="#压缩流（压缩文件）" class="headerlink" title="压缩流（压缩文件）"></a>压缩流（压缩文件）</h1><blockquote><p><strong>Class ZipOutputStream</strong></p><p>java.lang.Object<br>java.io.OutputStream<br>java.io.FilterOutputStream<br>java.util.zip.DeflaterOutputStream<br>java.util.zip.ZipOutputStream </p></blockquote><p><strong>大致流程</strong></p><ol><li>创建被压缩的对象 和 压缩包的对象 </li><li>创建 字节输出流 和 压缩输出流</li><li>为文件创建ZipEntry条目</li><li>将读取的数据通过输出流写入到硬盘中</li><li>完成压缩</li></ol><p><strong>构造方法</strong></p><p><font color = #05ffdc>ZipOutputStream（OutputStream out） </font> </p><blockquote><p>out：输出流</p></blockquote><p><strong>方法</strong></p><table><thead><tr><th>修饰符</th><th align="left">方法</th><th>说明</th></tr></thead><tbody><tr><td>void</td><td align="left"><font color = #05ffdc>close（） </font></td><td>关闭流</td></tr><tr><td>void</td><td align="left"><font color = #05ffdc>closeEntry（） </font></td><td>关闭当前的ZIP条目，并定位流以写入下一个条目</td></tr><tr><td>void</td><td align="left"><font color = #05ffdc>finish（） </font></td><td>完成编写ZIP输出流的内容，而不关闭底层流</td></tr><tr><td>void</td><td align="left"><font color = #05ffdc>putNextEntry（ZipEntry e） </font></td><td>开始编写新的ZIP文件条目，并将流定位到条目数据的开头</td></tr><tr><td>void</td><td align="left"><font color = #05ffdc>setComment（String comment） </font></td><td>设置ZIP文件注释</td></tr><tr><td>void</td><td align="left"><font color = #05ffdc>write（byte[] b, int off, int len） </font></td><td>将字节数组写入当前的ZIP条目数据</td></tr></tbody></table><p><strong>例子1</strong> （老师讲解的例题）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>zip<span class="token punctuation">.</span>ZipEntry<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>zip<span class="token punctuation">.</span>ZipOutputStream<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">compress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建被压缩的对象</span>        File source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\png\\"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建压缩包的对象</span>        File target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\mr.zip"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//try括号内的资源会在try语句结束后自动释放，前提是这些可关闭的资源必须实现</span>        <span class="token comment" spellcheck="true">//创建字节输出流、压缩输出流</span>        <span class="token keyword">try</span><span class="token punctuation">(</span>FileOutputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>            ZipOutputStream zos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipOutputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//判断是否是文件夹</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//遍历文件夹的文件</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>File f <span class="token operator">:</span> source<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">addEntry</span><span class="token punctuation">(</span>zos <span class="token punctuation">,</span> <span class="token string">""</span> <span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token function">addEntry</span><span class="token punctuation">(</span>zos<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*    *    *   该方法用来写入文件数据 和 重新遍历文件夹    * 方法参数：    *   zos：压缩流    *   base： 文件在压缩包中的路径    *   source：被压缩的文件    *    *  */</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addEntry</span><span class="token punctuation">(</span>ZipOutputStream zos <span class="token punctuation">,</span> String base <span class="token punctuation">,</span> File source<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判断是否是文件夹</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//判断为文件夹</span>            <span class="token comment" spellcheck="true">//遍历文件夹的文件</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>File file <span class="token operator">:</span> source<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/*                *   参数2：                *       base：文件路径                *       source.getName()：文件夹名称                *       File.separator：分隔符（ \\ 和 / ）                *                * */</span>                <span class="token function">addEntry</span><span class="token punctuation">(</span>zos <span class="token punctuation">,</span> base <span class="token operator">+</span> source<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> File<span class="token punctuation">.</span>separator <span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//判断为文件</span>            <span class="token comment" spellcheck="true">//写入压缩流</span>            <span class="token comment" spellcheck="true">//创建缓冲区</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建 字节输入流</span>            <span class="token comment" spellcheck="true">//source 是文件</span>            <span class="token keyword">try</span><span class="token punctuation">(</span>FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//判断开关</span>                <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//putNextEntry()方法开始编写新的ZIP文件条目，并将流定位到条目数据的开头</span>                <span class="token comment" spellcheck="true">//实例化ZIP文件条目 条目路径及名称</span>                zos<span class="token punctuation">.</span><span class="token function">putNextEntry</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ZipEntry</span><span class="token punctuation">(</span>base <span class="token operator">+</span> source<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 读取文件 直到读完</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>count <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//写入压缩流。 b 缓冲内容</span>                    zos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b <span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//刷新流</span>                    zos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                zos<span class="token punctuation">.</span><span class="token function">closeEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">compress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>例子2</strong> （个人写的例题）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>zip<span class="token punctuation">.</span>ZipEntry<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>zip<span class="token punctuation">.</span>ZipOutputStream<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//压缩方法</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Compression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        File fwj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\png\\"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\mr2.zip"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileOutputStream fout <span class="token operator">=</span> null<span class="token punctuation">;</span>        ZipOutputStream zout <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            fout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>            zout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipOutputStream</span><span class="token punctuation">(</span>fout<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//进行压缩的方法</span>            <span class="token comment" spellcheck="true">//参数2为空，因从压缩包里的根路径开始</span>            <span class="token function">addEntry</span><span class="token punctuation">(</span>zout<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span>fwj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>zout <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    zout<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>fout <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    fout<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     *     *   该方法用来写入文件数据 和 重新遍历文件夹     * 方法参数：     *   zos：压缩流     *   base： 文件在压缩包中的路径     *   source：被压缩的文件     *     *  */</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addEntry</span><span class="token punctuation">(</span>ZipOutputStream zos <span class="token punctuation">,</span> String base <span class="token punctuation">,</span> File source<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判断是否是文件夹</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//遍历文件夹</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>File f <span class="token operator">:</span> source<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">/*                     *   参数2：                     *       base：文件路径                     *       source.getName()：文件夹名称                     *       File.separator：分隔符（ \\ 和 / ）                     *       文件路径                     * */</span>                    <span class="token function">addEntry</span><span class="token punctuation">(</span>zos <span class="token punctuation">,</span> base<span class="token operator">+</span>source<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>File<span class="token punctuation">.</span>separator <span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//创建 字节输入流</span>            FileInputStream finp <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//字节输入流</span>                finp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//创建条目</span>                ZipEntry ze <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipEntry</span><span class="token punctuation">(</span>base<span class="token operator">+</span>source<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//新的ZIP文件条目，并将流定位到条目数据的开头</span>                zos<span class="token punctuation">.</span><span class="token function">putNextEntry</span><span class="token punctuation">(</span>ze<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//判断变量</span>                <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//创建缓冲区</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 读取文件 直到读完</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>count <span class="token operator">=</span> finp<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//写入压缩流。 b 缓冲内容</span>                    zos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b <span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//刷新流</span>                    zos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//关闭当前的ZIP条目，并定位流以写入下一个条目</span>                zos<span class="token punctuation">.</span><span class="token function">closeEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>finp <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                        finp<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Compression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>压缩前提要确定要压缩的 文件夹 或 文件 ，还有压缩后的路径（带名称）</p><h1 id="解压流（解压文件）"><a href="#解压流（解压文件）" class="headerlink" title="解压流（解压文件）"></a>解压流（解压文件）</h1><blockquote><p><strong>Class ZipInputStream</strong><br>java.lang.Object<br>java.io.InputStream<br>java.io.FilterInputStream<br>java.util.zip.InflaterInputStream<br>java.util.zip.ZipInputStream </p></blockquote><p><strong>大致流程</strong></p><ol><li>创建被压缩的对象 和 压缩包的对象 </li><li>创建 字节输入流 和 压缩输入流</li><li>遍历 字节输入流 中的 压缩包里的条目（ZipEntry条目）</li><li>按照压缩包里的目条 对应的文件名创建</li><li>创建 字节输出流写入</li><li>将 输入流 读取的数据通过 字节输出流 写入到硬盘中</li><li>完成解压</li></ol><p><strong>构造方法</strong></p><p><font color = #05ffdc>ZipInputStream（InputStream in） </font> </p><blockquote><p>in：输出流</p></blockquote><p><strong>方法</strong></p><table><thead><tr><th align="left">修饰符</th><th>方法</th><th>说明</th></tr></thead><tbody><tr><td align="left">int</td><td><font color = #05ffdc>available（） </font></td><td>是否读取完目前指定的数据，读取完返回1，否则为0</td></tr><tr><td align="left">void</td><td><font color = #05ffdc>close（） </font></td><td>关闭流</td></tr><tr><td align="left">void</td><td><font color = #05ffdc>closeEntry（） </font></td><td>关闭当前的ZIP条目，并定位流以读取下一个条目</td></tr><tr><td align="left">ZipEntry</td><td><font color = #05ffdc>createZipEntry（String name） </font></td><td>为指定的条目名称创建一个新的 ZipEntry对象</td></tr><tr><td align="left">ZipEntry</td><td><font color = #05ffdc>getNextEntry（） </font></td><td>读取下一个ZIP文件条目，并将流定位在条目数据的开头</td></tr><tr><td align="left">int</td><td><font color = #05ffdc>read（byte[] b, int off, int len） </font></td><td>从当前ZIP条目读取到字节数组</td></tr><tr><td align="left">long</td><td><font color = #05ffdc>skip（long n） </font></td><td>跳过当前ZIP条目中指定的字节数</td></tr></tbody></table><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>zip<span class="token punctuation">.</span>ZipEntry<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>zip<span class="token punctuation">.</span>ZipInputStream<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo4</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//压缩方法</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Compression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//解压路径及解压后的文件夹名称</span>        File dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\nn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//压缩包的路径</span>        File source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\mr2.zip"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建空条目</span>        ZipEntry entry <span class="token operator">=</span> null<span class="token punctuation">;</span>        FileInputStream fis <span class="token operator">=</span> null<span class="token punctuation">;</span>        ZipInputStream zis <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>            zis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获取下一个ZIP文件条目，并将流定位在条目数据的开头</span>                entry <span class="token operator">=</span> zis<span class="token punctuation">.</span><span class="token function">getNextEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//获取完为空 或 第一次获取失败 跳出循环</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>entry <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//文件夹跳过本次循环</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//创建文件</span>                <span class="token comment" spellcheck="true">// dir：解压目的地文件夹</span>                File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dir <span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*                 *                 * getParentFile()方法 返回指定父路径的目录（文件），没有则空（null）                 * exists()方法 是否存在该文件                 * mkdirs()方法 创建路径名命名的目录，包括任何必需但不存在的父目录                 *                 * */</span>                <span class="token comment" spellcheck="true">//安全代码 ，创建压缩包里的文件夹</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>f<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    f<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//输出流</span>                FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//压缩流循环读取 压缩包中的文件 直到读完</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>count <span class="token operator">=</span> zis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//写入</span>                    fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf <span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//流刷新（提升效率）</span>                    fos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//关闭流</span>                fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//关闭本次条目，跳到下一个</span>                zis<span class="token punctuation">.</span><span class="token function">closeEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>zis <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    zis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fis <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Compression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>以上是个人学习后写出来的代码分享，如果有问题可在下面留言！</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ZIP文件条目&quot;&gt;&lt;a href=&quot;#ZIP文件条目&quot; class=&quot;headerlink&quot; title=&quot;ZIP文件条目&quot;&gt;&lt;/a&gt;ZIP文件条目&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Class ZipEntry&lt;/strong&gt;&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://Sanscan12.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="笔记" scheme="https://Sanscan12.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://Sanscan12.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>08Java  Swing设计篇</title>
    <link href="https://sanscan12.github.io/posts/4728.html"/>
    <id>https://sanscan12.github.io/posts/4728.html</id>
    <published>2020-07-15T16:00:00.000Z</published>
    <updated>2020-07-27T02:02:46.780Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Swing程序设计"><a href="#Swing程序设计" class="headerlink" title="Swing程序设计"></a>Swing程序设计</h1><p>Swing为GUI(图形用户界面)提供开发工具包，使用Swing开发的应用程序可以统一应用程序在不同平台上运行的GUI组件显示风格，因为在Swing组件可以跨平台指定统一风格和外观</p><blockquote><p><strong>特点：</strong></p><ul><li>轻量级组件</li><li>可插入外观组件</li></ul></blockquote><h1 id="Swing包"><a href="#Swing包" class="headerlink" title="Swing包"></a>Swing包</h1><p>使用Swing组件前，先了解层次结构和继承关系</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java03.png" style="zoom:80%;" /><p><strong>常用的Swing组件</strong></p><table><thead><tr><th>组件名称</th><th>说明</th></tr></thead><tbody><tr><td>JButton（按钮）</td><td>按钮可以带些图片或文字</td></tr><tr><td>JCheckBox（多选按钮）</td><td>复选框组件</td></tr><tr><td>JComBox（下拉框）</td><td>代表下拉列表框，可以在下拉显示区域显示多个选项</td></tr><tr><td>JFrame（窗体）</td><td>Swing的框架类</td></tr><tr><td>JDialog（对话框）</td><td>Swing版本的对话框</td></tr><tr><td>JLable（标签）</td><td>标签组件（显示文字的容器）</td></tr><tr><td>JRadioButton（单选按钮）</td><td>Swing的单选按钮</td></tr><tr><td>JList（列表框）</td><td>显示一系列条目的组件</td></tr><tr><td>JTextField（文本框）</td><td>文本框</td></tr><tr><td>JPasswordField（密码框）</td><td>密码框</td></tr><tr><td>JTextArea（文本域）</td><td>Swing的文本区域</td></tr><tr><td>JOptionPane（小对话框）</td><td>对话框</td></tr><tr><td>JPanel（面板）</td><td>单纯的容器，无属性</td></tr></tbody></table><h1 id="窗体"><a href="#窗体" class="headerlink" title="窗体"></a>窗体</h1><p><strong>窗体常用方法</strong></p><p><font color = #05ffdc>setTitle（String title） </font> 窗体标题为title字符串</p><p><font color = #05ffdc>setDefaultCloseOperation（int a） </font> 窗体关闭规则</p><p><font color = #05ffdc>setSize（width,height）</font> 窗体大小</p><p><font color = #05ffdc>setLocation（x，y）</font>  窗体坐标</p><p><font color = #05ffdc>setBounds（x，y, width , height）</font>  窗体坐标，大小 （像素）</p><p><font color = #05ffdc>setVisible（boolean b）</font> 窗体是否显示，默认不可见（false）</p><p><font color = #05ffdc>setResizable（boolean b）</font> 窗体是否可以调整大小，默认可以调整大小</p><p><font color = #05ffdc>setContentPane（容器） </font> 重新加载容器</p><p><font color = #05ffdc>getContentPane（）</font> 获取窗体容器</p><h2 id="JFrame-窗体"><a href="#JFrame-窗体" class="headerlink" title="JFrame 窗体"></a>JFrame 窗体</h2><blockquote><p><strong>Class JFrame</strong></p><p>java.lang.Object<br>java.awt.Component<br>java.awt.Container<br>java.awt.Window<br>java.awt.Frame<br>javax.swing.JFrame </p></blockquote><p>JFrame窗体拥有计算机基本组件，最大化，最小化，关闭等组件</p><p><strong>构造方法</strong></p><p><font color = #05ffdc>JFrame（）</font> </p><p><font color = #05ffdc>JFrame（Starting title）</font> </p><blockquote><p><strong>title：</strong>窗体标题</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//123为标题</span>        JFrame f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        f<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗口关闭规则</span>        f<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        f.setSize(330,220);//大小</span><span class="token comment" spellcheck="true">//        f.setLocation(202,202);//坐标</span>        <span class="token comment" spellcheck="true">//坐标，大小 （x , y , width , height）单位：像素</span>        f<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span> <span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取窗体容器</span>        Container c <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//背景颜色</span>        c<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>CYAN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//标签内容</span>        JLabel l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"这是一个窗体！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加组件</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗口关闭规则</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        f.setSize(330,220);//大小</span><span class="token comment" spellcheck="true">//        f.setLocation(202,202);//坐标</span>        <span class="token comment" spellcheck="true">//坐标，大小 （x , y , width , height）单位：像素</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span> <span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取窗体容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//背景颜色</span>        c<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>CYAN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//标签内容</span>        JLabel l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"这是一个窗体！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加组件</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//删除组件</span>        c<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//验证容器中的组件</span>        c<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//重新载入容器</span>        <span class="token function">setContentPane</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java01.png" style="zoom: 67%;" /><h2 id="JDialog-窗体"><a href="#JDialog-窗体" class="headerlink" title="JDialog 窗体"></a>JDialog 窗体</h2><blockquote><p><strong>Class JDialog</strong></p><p>java.lang.Object<br>java.awt.Component<br>java.awt.Container<br>java.awt.Window<br>java.awt.Dialog<br>javax.swing.JDialog </p></blockquote><p>JDialog窗体是Swing的对话框，是从一个窗体中弹出另一个窗体，它继承了AWT组件中的</p><p>在一个类继承窗体类时，可以在构造方法中使用 super关键字 可调用回窗体类的参数填充</p><p><strong>构造方法</strong></p><p><font color = #05ffdc>JDialog（） </font> </p><p><font color = #05ffdc>JDialog（Frame f） </font> </p><p><font color = #05ffdc>JDialog（Frame f , boolean model） </font> </p><p><font color = #05ffdc>JDialog（Frame f , String title） </font>  </p><p><font color = #05ffdc>JDialog（Frame f , String title , boolean model） </font> </p><blockquote><p><strong>f：</strong>需要指定的父窗体<br><strong>model：</strong>指定类型的对话框（是否约束父窗体）<br><strong>title：</strong>对话框的标题</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JFrame父窗体类</span><span class="token keyword">class</span> <span class="token class-name">Parentform</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    JButton btn<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为父类添加标题</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"JFrame父窗体的标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体关闭规则</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">230</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">340</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取窗体容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//布局设置，使用流布局</span>        c<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使类的btn共享到以下类输出</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>btn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"对话框"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加组件</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> JButton <span class="token function">btn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//输出组件添加动作监听</span>        <span class="token keyword">return</span> btn<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//对话框类</span><span class="token keyword">class</span> <span class="token class-name">Dialog</span> <span class="token keyword">extends</span> <span class="token class-name">JDialog</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Dialog</span><span class="token punctuation">(</span>Parentform p<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//参数顺序： 1.父窗体对象 ， 2.对话框标题 ，3.是否堵塞父窗体</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token string">"123对话框"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取对话框容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对话框添加标签（内容）</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"这是对话框！"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对话框坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">360</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例JFrame父窗体类</span>        Parentform p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加动作监听</span>        p<span class="token punctuation">.</span><span class="token function">btn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//实例对话框类，并获取p父窗体对象</span>                Dialog d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dialog</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//显示对话框</span>                d<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//也可以  p.btn().addActionListener(e -> new Dialog());</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java02.png" style="zoom:67%;" /><h2 id="窗体关闭规则"><a href="#窗体关闭规则" class="headerlink" title="窗体关闭规则"></a>窗体关闭规则</h2><p>窗体的关闭规则是需要到 setDefaultCloseOperation（）方法来选择关闭方式的</p><table><thead><tr><th>关闭类型</th><th>说明</th><th>定义</th></tr></thead><tbody><tr><td>DO_NOTHING_ON_CLOSE</td><td>无任何操作</td><td>0</td></tr><tr><td>HIDE_ON_CLOSE（默认）</td><td>隐藏窗体，不停止程序</td><td>1</td></tr><tr><td>DISPOSE_ON_CLOSE</td><td>释放窗体资源</td><td>2</td></tr><tr><td>EXIT_ON_CLOSE</td><td>隐藏窗体，停止程序</td><td>3</td></tr></tbody></table><h1 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h1><h2 id="JLable-标签"><a href="#JLable-标签" class="headerlink" title="JLable 标签"></a>JLable 标签</h2><blockquote><p><strong>Class JLabel</strong></p><p>java.lang.Object<br>java.awt.Component<br>java.awt.Container<br>javax.swing.JComponent<br>javax.swing.JLabel </p></blockquote><p>可以显示只读文本、图像，但不能产生任何类型的事件，只是简单的显示文本和图像，还可以设置标签上文本的对齐方式</p><p><strong>构造方法</strong></p><p><font color = #05ffdc>JLable（） </font> </p><p><font color = #05ffdc>JLable（String text） </font> </p><p><font color = #05ffdc>JLable（Icon icon） </font> </p><p><font color = #05ffdc>JLable（Icon icon , int aligment）  </font> </p><p><font color = #05ffdc>JLable（String text , int aligment） </font> </p><p><font color = #05ffdc>JLable（String text , Icon icon , int aligment） </font>  </p><blockquote><p><strong>text：</strong>标识性，文字标签<br><strong>icon：</strong>图标对象<br><strong>aligment：</strong>设置对齐方式</p></blockquote><p><strong>常用方法</strong></p><table><thead><tr><th>修饰符、类型</th><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>void</td><td><font color = #05ffdc>setText（String text） </font></td><td>定义组件内容（更改）</td></tr><tr><td>String</td><td><font color = #05ffdc>getText（） </font></td><td>返回标签显示的文本字符串</td></tr><tr><td>void</td><td><font color = #05ffdc>setIcon（Icon icon） </font></td><td>添加图片文件</td></tr><tr><td>void</td><td><font color = #05ffdc>setSize（int With ，int Height）</font></td><td>标签大小设置</td></tr></tbody></table><p>￼构造方法的实践例子：（图片文件在src路径里）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JFrame父窗体类</span><span class="token keyword">class</span> <span class="token class-name">Parentform</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为父类添加标题</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"JFrame父窗体的标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体关闭规则</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">620</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取窗体容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//布局设置，使用流布局</span>        c<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JLabel no1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JLabel no2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"标签内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取图片的方法（方法1）</span>        <span class="token comment" spellcheck="true">//获取当前类所在的路径</span>        URL url <span class="token operator">=</span> Demo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取相应路径下的文件（图片）</span>        Icon icon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        JLabel no3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span>icon<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取图片的（方法2）</span>        Icon icon2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"src/1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JLabel no4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"显示图片"</span><span class="token punctuation">,</span>icon2<span class="token punctuation">,</span> SwingConstants<span class="token punctuation">.</span>LEFT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//更改标签内容</span>        no2<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"更改标签内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取标签内容</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>no2<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//在窗体显示图片路径</span>        JLabel jl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"获取图片路径："</span><span class="token operator">+</span>url<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jl<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//自选打开</span><span class="token comment" spellcheck="true">//        c.add(no1);</span><span class="token comment" spellcheck="true">//        c.add(no2);</span><span class="token comment" spellcheck="true">//        c.add(no3);</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>no4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//显示在后面或者刷新组件</span>        <span class="token comment" spellcheck="true">//容器组件重新验证</span>        c<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java05.png" style="zoom:67%;" /><blockquote><p><strong>注意：</strong></p><p>java.lang.Class类中的 getResource（）方法 可以获取资源文件的URL路径</p></blockquote><h2 id="图标使用"><a href="#图标使用" class="headerlink" title="图标使用"></a>图标使用</h2><p><strong>创建图标</strong></p><p>创建图标使用到 java.awt.Graphics类 提供的功能来实现</p><p>在Swing中是通过Icon接口来实现创建图标，使用Icon接口必须实现以下3个方法：</p><table><thead><tr><th>修饰符、类型</th><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>int</td><td><font color = #05ffdc>getIconHeight（） </font></td><td>获取图标高</td></tr><tr><td>int</td><td><font color = #05ffdc>getIconWidth（） </font></td><td>获取图标宽</td></tr><tr><td>void</td><td><font color = #05ffdc>paintIcon（Component c, Graphics g, int x, int y）</font></td><td>指定坐标位置画图</td></tr></tbody></table><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JFrame父窗体类</span><span class="token keyword">class</span> <span class="token class-name">Parentform</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为父类添加标题</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"JFrame父窗体的标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体关闭规则</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">230</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取窗体容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//绘图图标类</span><span class="token comment" spellcheck="true">//引入Icon接口</span><span class="token keyword">class</span> <span class="token class-name">DrawIcon</span> <span class="token keyword">implements</span> <span class="token class-name">Icon</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 声明图标的宽</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> W<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 声明图标的高</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> H<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取数据</span>    <span class="token keyword">public</span> <span class="token function">DrawIcon</span><span class="token punctuation">(</span><span class="token keyword">int</span> W <span class="token punctuation">,</span> <span class="token keyword">int</span> H<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>W <span class="token operator">=</span> W <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>H <span class="token operator">=</span> H <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 实现paintIcon()方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paintIcon</span><span class="token punctuation">(</span>Component c<span class="token punctuation">,</span> Graphics g<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 绘制一个圆形</span>        g<span class="token punctuation">.</span><span class="token function">fillOval</span><span class="token punctuation">(</span>x <span class="token punctuation">,</span> y <span class="token punctuation">,</span> W <span class="token punctuation">,</span> H<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getIconWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>W<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getIconHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>H<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DrawIcon icon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DrawIcon</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建一个标签，并设置标签上的文字在标签正中间</span>        JLabel j <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"测试"</span><span class="token punctuation">,</span> icon<span class="token punctuation">,</span> SwingConstants<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        Parentform jf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jf<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java06.png" style="zoom:67%;" /><h1 id="常用布局管理器"><a href="#常用布局管理器" class="headerlink" title="常用布局管理器"></a>常用布局管理器</h1><p>布局管理就是用于指定组件的摆放位置的。每种布局管理器都有自己的摆放风格。管理组件在容器中的位置和大小</p><p>需要该方法来定义窗体或面板布局</p><pre class="line-numbers language-java"><code class="language-java">窗体或面板的对象<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span>布局类型<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="绝对布局"><a href="#绝对布局" class="headerlink" title="绝对布局"></a>绝对布局</h2><p>绝对布局是指定组件在容器中的固定大小和位置</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JFrame父窗体类</span><span class="token keyword">class</span> <span class="token class-name">Parentform</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为父类添加标题</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"JFrame父窗体的标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体关闭规则</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">230</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取窗体容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取消默认布局 ， 更改为绝对布局</span>        <span class="token function">setLayout</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建按钮组件</span>        JButton b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮1"</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//给按钮组件添加坐标、大小</span>        b1<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b2<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">92</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加按钮组件</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Parentform jf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java07.png" style="zoom:67%;" /><blockquote><p><strong>注意：</strong></p><p>绝对布局的窗口组件大小都是固定的，不随窗体大小更改而变化</p><p>组件坐标是以窗体左上角为基点的</p></blockquote><h2 id="FlowLayout-流布局"><a href="#FlowLayout-流布局" class="headerlink" title="FlowLayout 流布局"></a>FlowLayout 流布局</h2><blockquote><p><strong>Class FlowLayout</strong></p><p>java.lang.Object<br>java.awt.FlowLayout </p></blockquote><p>流布局管理器 ，像流水一样从左到右摆放组件，直到占完所有空间，组件是默认居中排列</p><p><strong>构造方法</strong></p><p><font color = #05ffdc>FlowLayout（） </font> </p><p><font color = #05ffdc>FlowLayout（int alignment） </font> </p><p><font color = #05ffdc>FlowLayout（int alignment , int horizGap , int vertGap）  </font></p><blockquote><p><strong>alignment：</strong>摆放方式<br><strong>horizGap：</strong>组件之间的水平间距<br><strong>vertGap：</strong>组件之间的垂直间距</p></blockquote><table><thead><tr><th>alignment参数的摆放设置</th><th>说明</th><th>定义</th></tr></thead><tbody><tr><td>FlowLayout.LEFT</td><td>左对齐排列</td><td>0</td></tr><tr><td>FlowLayout.CENTER</td><td>居中排列</td><td>1</td></tr><tr><td>FlowLayout.RIGHT</td><td>右对齐排列</td><td>2</td></tr></tbody></table><p><strong>horizGap ：</strong> 组件与组件之间的水平间距（像素）</p><p><strong>vertGap ：</strong> 组件与组件之间的垂直间距（像素）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JFrame父窗体类</span><span class="token keyword">class</span> <span class="token class-name">Parentform</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为父类添加标题</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"JFrame父窗体的标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体关闭规则</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">230</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取窗体容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//流布局</span>        <span class="token comment" spellcheck="true">//参数测试，自行选择</span><span class="token comment" spellcheck="true">//        setLayout(new FlowLayout());</span><span class="token comment" spellcheck="true">//        setLayout(new FlowLayout(0));//左对齐</span><span class="token comment" spellcheck="true">//        setLayout(new FlowLayout(1));//居中对齐（默认）</span><span class="token comment" spellcheck="true">//        setLayout(new FlowLayout(2));//右对齐</span>        <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//居中对齐（默认）</span>        <span class="token comment" spellcheck="true">//创建添加按钮组件</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java08.png" style="zoom:67%;" /><h2 id="BorderLayout-边界布局"><a href="#BorderLayout-边界布局" class="headerlink" title="BorderLayout 边界布局"></a>BorderLayout 边界布局</h2><blockquote><p><strong>Class BorderLayout</strong></p><p>java.lang.Object<br>java.awt.BorderLayout </p></blockquote><p>边界布局把容器的的布局分为五个位置：上下左右中5个区域 。设置该布局管理器是可无视，因默认是边界布局</p><p>在容器add（）方法添加组件时可设置区域</p><table><thead><tr><th>成员变量</th><th>说明</th></tr></thead><tbody><tr><td>BorderLayout.NORTH</td><td>顶端</td></tr><tr><td>BorderLayout.SOUTH</td><td>底端</td></tr><tr><td>BorderLayout.EAST</td><td>右端</td></tr><tr><td>BorderLayout.WEST</td><td>左端</td></tr><tr><td>BorderLayout.CENTER</td><td>中间</td></tr></tbody></table><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JFrame父窗体类</span><span class="token keyword">class</span> <span class="token class-name">Parentform</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为父类添加标题</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"JFrame父窗体的标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体关闭规则</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">230</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取窗体容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置边界布局</span>        c<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可被注释，因本身就是边界布局</span>        <span class="token comment" spellcheck="true">//边界布局</span>        JButton                b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"中"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"东"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                b3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"南"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                b4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"西"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                b5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"北"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b1 <span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b2 <span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>EAST<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b3 <span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>SOUTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b4 <span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>WEST<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b5 <span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"覆盖中"</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java09.png" style="zoom:67%;" /><h2 id="GridLayout-网格布局"><a href="#GridLayout-网格布局" class="headerlink" title="GridLayout 网格布局"></a>GridLayout 网格布局</h2><blockquote><p><strong>Class GridLayout</strong></p><p>java.lang.Object<br>java.awt.GridLayout </p></blockquote><p>网格布局管理器是将容器划分为网格，组件是按照 行 和 列 进行布局</p><p>每个组件大小一样，排序默认从左到右，从上到下的顺序排列，窗体大小的改变，组件也会跟随改变</p><p><strong>构造方法</strong></p><p><font color = #05ffdc>GridLayout（int rows , int columns）</font> </p><p><font color = #05ffdc>GridLayout（int rows , int columns , int horizGap , int veritGap） </font> </p><blockquote><p><strong>rows</strong>： 行个数<br><strong>columns</strong>：列个数<br><strong>horizGap</strong>：组件水平间距<br><strong>veritGap</strong>：组件垂直间距</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JFrame父窗体类</span><span class="token keyword">class</span> <span class="token class-name">Parentform</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为父类添加标题</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"JFrame父窗体的标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体关闭规则</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">230</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取窗体容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置</span><span class="token comment" spellcheck="true">//        c.setLayout(new GridLayout(3,4));//3行4列（布局满无间隙）</span>        <span class="token comment" spellcheck="true">//3行4列，组件间隙为12px（行数，列数，水平，垂直）</span>        c<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java10.png" style="zoom:67%;" /><h2 id="GridBagLayout-网格组布局"><a href="#GridBagLayout-网格组布局" class="headerlink" title="GridBagLayout 网格组布局"></a>GridBagLayout 网格组布局</h2><blockquote><p><strong>Class GridBagLayout</strong></p><p>java.lang.Object<br>java.awt.GridBagLayout </p></blockquote><p>实现了动态矩形网格，由无限个矩形单元格组成，每行每列的高宽以行列最大像素的组件为准，每个组件都与GridBagConstraints类关联（用来约束）</p><p>以下是使用流程：</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java11.png" style="zoom:67%;" /><p>import java.awt.GridBagConstraints类 为使用 GridBagLayou类布局 的约束</p><blockquote><p><strong>Class GridBagConstraints</strong></p><p>java.lang.Object<br>java.awt.GridBagConstraints </p></blockquote><p>GridBagConstraints约束 </p><table><thead><tr><th>GridBagConstraints属性</th><th>说明</th></tr></thead><tbody><tr><td><font color = #05ffdc>gridx </font></td><td>组件坐标X（网格）</td></tr><tr><td><font color = #05ffdc>gridy </font></td><td>组件坐标Y（网格）</td></tr><tr><td><font color = #05ffdc>gridwidth </font></td><td>组件占用行数</td></tr><tr><td><font color = #05ffdc>gridheight </font></td><td>组件占用列数</td></tr><tr><td><font color = #05ffdc>anchor </font></td><td>组件在的方位</td></tr><tr><td><font color = #05ffdc>fill </font></td><td>组件填充方式</td></tr><tr><td><font color = #05ffdc>insets </font></td><td>组件与单元格边缘的最小距离</td></tr><tr><td><font color = #05ffdc>ipadx </font></td><td>组件的首先大小 X</td></tr><tr><td><font color = #05ffdc>ipady </font></td><td>组件的首先大小 Y</td></tr><tr><td><font color = #05ffdc>weightx </font></td><td>单元格最大宽</td></tr><tr><td><font color = #05ffdc>weighty </font></td><td>单元格最大高</td></tr></tbody></table><p>以下代码是自选GridBagConstraints属性约束测试</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JFrame父窗体类</span><span class="token keyword">class</span> <span class="token class-name">Parentform</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//添加彩色面板</span>    JPanel p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    JPanel p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    JPanel p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    JPanel p4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    JPanel p5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Container c<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为父类添加标题</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"JFrame父窗体的标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体关闭规则</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">230</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">550</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//颜色面板</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>p1<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>CYAN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>p2<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>GREEN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>p3<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>CYAN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>p4<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>GREEN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>p5<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>CYAN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//坐标矩阵</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            GridBagConstraints g2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> i<span class="token punctuation">;</span>            g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            g2<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            g2<span class="token punctuation">.</span>gridy <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//空格用来填充</span>            c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"   "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"    "</span><span class="token punctuation">)</span><span class="token punctuation">,</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"   "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"    "</span><span class="token punctuation">)</span><span class="token punctuation">,</span>g2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//组件约束类</span><span class="token keyword">class</span> <span class="token class-name">Components</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//颜色面板调用约束方法</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">JPl1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridwidth <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridheight <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>fill <span class="token operator">=</span> GridBagConstraints<span class="token punctuation">.</span>BOTH<span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">JPl2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridwidth <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridheight <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>fill <span class="token operator">=</span> GridBagConstraints<span class="token punctuation">.</span>BOTH<span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">JPl3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridwidth <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridheight <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>fill <span class="token operator">=</span> GridBagConstraints<span class="token punctuation">.</span>BOTH<span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">JPl4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridwidth <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridheight <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>fill <span class="token operator">=</span> GridBagConstraints<span class="token punctuation">.</span>BOTH<span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//weightx ，weighty属性（专属颜色面板）</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">JPl5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>fill <span class="token operator">=</span> GridBagConstraints<span class="token punctuation">.</span>BOTH<span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">JPl6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>fill <span class="token operator">=</span> GridBagConstraints<span class="token punctuation">.</span>BOTH<span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">JPl7</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>fill <span class="token operator">=</span> GridBagConstraints<span class="token punctuation">.</span>BOTH<span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">JPl8</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>fill <span class="token operator">=</span> GridBagConstraints<span class="token punctuation">.</span>BOTH<span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">JPl9</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>fill <span class="token operator">=</span> GridBagConstraints<span class="token punctuation">.</span>BOTH<span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//组件约束方法</span>    <span class="token comment" spellcheck="true">//GridBagConstraints约束测试（1）</span>    <span class="token comment" spellcheck="true">//gridx和gridy属性</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//GridBagConstraints约束测试（2）</span>    <span class="token comment" spellcheck="true">//gridwidth和gridheight属性</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridwidth <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridheight <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridwidth <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridheight <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridwidth <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridheight <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//GridBagConstraints约束测试（3）</span>    <span class="token comment" spellcheck="true">//fill属性</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC7</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridwidth <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridheight <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//默认无填充NONE</span>        g<span class="token punctuation">.</span>fill <span class="token operator">=</span> GridBagConstraints<span class="token punctuation">.</span>NONE<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//(0)</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridwidth <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridheight <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//水平填充HORIZONTAL</span>        g<span class="token punctuation">.</span>fill <span class="token operator">=</span> GridBagConstraints<span class="token punctuation">.</span>HORIZONTAL<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//(2)</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC9</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridwidth <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridheight <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//垂直填充VERTICAL</span>        g<span class="token punctuation">.</span>fill <span class="token operator">=</span> GridBagConstraints<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//(3)</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC10</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridwidth <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridheight <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//填充BOTH</span>        g<span class="token punctuation">.</span>fill <span class="token operator">=</span> GridBagConstraints<span class="token punctuation">.</span>BOTH<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//(1)</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//GridBagConstraints约束测试（4）</span>    <span class="token comment" spellcheck="true">//anchor属性</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC11</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridwidth <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridheight <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//左上</span>        g<span class="token punctuation">.</span>anchor <span class="token operator">=</span> GridBagConstraints<span class="token punctuation">.</span>NORTHWEST<span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC12</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridwidth <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridheight <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//右下</span>        g<span class="token punctuation">.</span>anchor <span class="token operator">=</span> GridBagConstraints<span class="token punctuation">.</span>SOUTHEAST<span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC13</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridwidth <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridheight <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//右</span>        g<span class="token punctuation">.</span>anchor <span class="token operator">=</span> GridBagConstraints<span class="token punctuation">.</span>EAST<span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC14</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridwidth <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridheight <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//下</span>        g<span class="token punctuation">.</span>anchor <span class="token operator">=</span> GridBagConstraints<span class="token punctuation">.</span>SOUTH<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//(1)</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//GridBagConstraints约束测试（5）</span>    <span class="token comment" spellcheck="true">//insets属性</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC15</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置边距距离</span>        g<span class="token punctuation">.</span>insets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Insets</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置边距距离</span>        g<span class="token punctuation">.</span>insets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Insets</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//GridBagConstraints约束测试（6）</span>    <span class="token comment" spellcheck="true">//ipadx , ipady 属性</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC17</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件大小</span>        g<span class="token punctuation">.</span>ipadx <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>ipady <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC18</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件大小</span>        g<span class="token punctuation">.</span>ipadx <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>ipady <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//GridBagConstraints约束测试（6）</span>    <span class="token comment" spellcheck="true">//weightx , weighty 属性</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC19</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置单元格最大宽高</span>        g<span class="token punctuation">.</span>weightx <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>weighty <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC20</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置单元格最大宽高</span>        g<span class="token punctuation">.</span>weightx <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>weighty <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC21</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置单元格最大宽高</span>        g<span class="token punctuation">.</span>weightx <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>weighty <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC22</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置单元格最大宽高</span>        g<span class="token punctuation">.</span>weightx <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>weighty <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC23</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置单元格最大宽高</span>        g<span class="token punctuation">.</span>weightx <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>weighty <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化JFrame窗体类</span>        Parentform jf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例化组件约束类</span>        Components zj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Components</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建jf窗体容器</span>        Container c <span class="token operator">=</span> jf<span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置容器布局为网格组布局</span>        c<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridBagLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//坐标矩阵</span>        jf<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//自选约束测试</span>        <span class="token comment" spellcheck="true">//约束测试（1）</span>        <span class="token comment" spellcheck="true">//添加组件 和 组件约束</span>        <span class="token comment" spellcheck="true">//gridx和gridy属性</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮1"</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> zj<span class="token punctuation">.</span><span class="token function">GBC1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮2"</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> zj<span class="token punctuation">.</span><span class="token function">GBC2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮3"</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> zj<span class="token punctuation">.</span><span class="token function">GBC3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//约束测试（2）</span>        <span class="token comment" spellcheck="true">//gridwidth和gridheight属性</span><span class="token comment" spellcheck="true">//        c.add(new JButton("按钮1") , zj.GBC4());</span><span class="token comment" spellcheck="true">//        c.add(new JButton("按钮2") , zj.GBC5());</span><span class="token comment" spellcheck="true">//        c.add(new JButton("按钮3") , zj.GBC6());</span><span class="token comment" spellcheck="true">//        //添加颜色面板</span><span class="token comment" spellcheck="true">//        c.add(jf.p1,zj.JPl1());</span><span class="token comment" spellcheck="true">//        c.add(jf.p2,zj.JPl2());</span><span class="token comment" spellcheck="true">//        c.add(jf.p3,zj.JPl3());</span>        <span class="token comment" spellcheck="true">//约束测试（3）</span>        <span class="token comment" spellcheck="true">//fill属性</span><span class="token comment" spellcheck="true">//        c.add(new JButton("按钮1") , zj.GBC7());</span><span class="token comment" spellcheck="true">//        c.add(new JButton("按钮2") , zj.GBC8());</span><span class="token comment" spellcheck="true">//        c.add(new JButton("按钮3") , zj.GBC9());</span><span class="token comment" spellcheck="true">//        c.add(new JButton("按钮3") , zj.GBC10());</span>        <span class="token comment" spellcheck="true">//约束测试（4）</span>        <span class="token comment" spellcheck="true">//anchor属性</span><span class="token comment" spellcheck="true">//        c.add(new JButton("按钮1") , zj.GBC11());</span><span class="token comment" spellcheck="true">//        c.add(new JButton("按钮2") , zj.GBC12());</span><span class="token comment" spellcheck="true">//        c.add(new JButton("按钮3") , zj.GBC13());</span><span class="token comment" spellcheck="true">//        c.add(new JButton("按钮3") , zj.GBC14());</span><span class="token comment" spellcheck="true">//        //添加颜色面板</span><span class="token comment" spellcheck="true">//        c.add(jf.p1,zj.JPl1());</span><span class="token comment" spellcheck="true">//        c.add(jf.p2,zj.JPl2());</span><span class="token comment" spellcheck="true">//        c.add(jf.p3,zj.JPl3());</span><span class="token comment" spellcheck="true">//        c.add(jf.p4,zj.JPl4());</span>        <span class="token comment" spellcheck="true">//约束测试（5）</span>        <span class="token comment" spellcheck="true">//inset属性</span><span class="token comment" spellcheck="true">//        c.add(new JButton("按钮1") , zj.GBC15());</span><span class="token comment" spellcheck="true">//        c.add(new JButton("按钮2") , zj.GBC16());</span>        <span class="token comment" spellcheck="true">//约束测试（6）</span>        <span class="token comment" spellcheck="true">//ipadx , ipady 属性</span><span class="token comment" spellcheck="true">//        c.add(new JButton("按钮1") , zj.GBC17());</span><span class="token comment" spellcheck="true">//        c.add(new JButton("按钮2") , zj.GBC18());</span><span class="token comment" spellcheck="true">//        //添加颜色面板</span><span class="token comment" spellcheck="true">//        c.add(jf.p1,zj.JPl1());</span><span class="token comment" spellcheck="true">//        c.add(jf.p2,zj.JPl2());</span>        <span class="token comment" spellcheck="true">//约束测试（7）</span>        <span class="token comment" spellcheck="true">//weightx , weighty 属性</span><span class="token comment" spellcheck="true">//        c.add(new JButton("x,y:10") , zj.GBC19());</span><span class="token comment" spellcheck="true">//        c.add(new JButton("x :５") , zj.GBC20());</span><span class="token comment" spellcheck="true">//        c.add(new JButton("x : 2") , zj.GBC21());</span><span class="token comment" spellcheck="true">//        c.add(new JButton("y : 5") , zj.GBC22());</span><span class="token comment" spellcheck="true">//        c.add(new JButton("y : 2") , zj.GBC23());</span><span class="token comment" spellcheck="true">//        //添加颜色面板</span><span class="token comment" spellcheck="true">//        c.add(jf.p1,zj.JPl5());</span><span class="token comment" spellcheck="true">//        c.add(jf.p2,zj.JPl6());</span><span class="token comment" spellcheck="true">//        c.add(jf.p3,zj.JPl7());</span><span class="token comment" spellcheck="true">//        c.add(jf.p4,zj.JPl8());</span><span class="token comment" spellcheck="true">//        c.add(jf.p5,zj.JPl9());</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        jf<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="GridBagConstraints属性"><a href="#GridBagConstraints属性" class="headerlink" title="GridBagConstraints属性"></a>GridBagConstraints属性</h3><p><strong>gridx , gridy属性</strong></p><p>该属性用来设置组件起始点所在单元格的索引位置，gridx设置X轴的索引值，gridy设置Y轴的索引值</p><p>该属性的运行结果：</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java12.png" style="zoom:67%;" /><p><strong>gridwidth , gridheight属性</strong></p><p>该属性用来设置组件占用网格组的行数和行数</p><p>该属性的运行结果：</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java13.png" style="zoom:67%;" /><p><strong>fill属性</strong></p><p>该属性用来设置组件填充方式，填充单元格最大的范围</p><table><thead><tr><th>fill属性的静态常量</th><th>说明</th><th>定义数</th></tr></thead><tbody><tr><td>NONE</td><td>不填充（默认）</td><td>0</td></tr><tr><td>HORIZONTAL</td><td>水平填充</td><td>2</td></tr><tr><td>VERTICAL</td><td>垂直填充</td><td>3</td></tr><tr><td>BOTH</td><td>填满</td><td>1</td></tr></tbody></table><p>该属性的运行结果：</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java14.png" style="zoom:67%;" /><p><strong>anchor属性</strong></p><p>该属性用来设置组件在单元格的显示区域</p><table><thead><tr><th>anchor属性的静态常量</th><th>说明</th></tr></thead><tbody><tr><td>NORTHWEST</td><td>左上</td></tr><tr><td>NORTH</td><td>上</td></tr><tr><td>NORTHEAST</td><td>右上</td></tr><tr><td>WEST</td><td>左</td></tr><tr><td>CENTER</td><td>中</td></tr><tr><td>EAST</td><td>右</td></tr><tr><td>SOUTHWEST</td><td>左下</td></tr><tr><td>SOUTH</td><td>下</td></tr><tr><td>SOUTHEAST</td><td>右下</td></tr></tbody></table><p>该属性的运行结果：</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java15.png" style="zoom:67%;" /><p><strong>inset属性</strong></p><p>该属性用来设置组件四周与单元格边缘之间的最小距离</p><p>Insets类 仅限于一个构造方法Insets（int top , int left , int bottom , int right），上左下右来设置边缘距离，默认为没有距离</p><p>该属性的运行结果：</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java16.png" style="zoom:67%;" /><p><strong>ipadx , ipady 属性</strong></p><p>该属性用来修改组件的大小，ipadx修改组件宽度，ipady修改组件的高度，正数为加大，负数为缩小</p><p>该属性的运行结果：</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java17.png" style="zoom:67%;" /><p><strong>weightx , weighty 属性</strong></p><p>该属性用来设置网格组的每一行和每一列对额外空间的分布方式，分配是以百分比形式分配！！</p><p>该属性的运行结果：</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java18.png" style="zoom:67%;" /><h1 id="常用面板"><a href="#常用面板" class="headerlink" title="常用面板"></a>常用面板</h1><h2 id="JPanel-面板"><a href="#JPanel-面板" class="headerlink" title="JPanel 面板"></a>JPanel 面板</h2><blockquote><p><strong>Class JPanel</strong></p><p>java.lang.Object<br>java.awt.Component<br>java.awt.Container<br>javax.swing.JComponent<br>javax.swing.JPanel </p></blockquote><p>JPanel面板可聚集一些组件进行布局，JPanel面板也是容器，因继承 java.awt.Container类 </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JFrame父窗体类</span><span class="token keyword">class</span> <span class="token class-name">Parentform</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为父类添加标题</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"JFrame父窗体的标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体关闭规则</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">230</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">550</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取窗体容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体设置网格布局行2，列2，水平间距10px，垂直间距10px</span>        <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//该面板可视为容器使用</span>        JPanel p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JPanel p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JPanel p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JPanel p4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//为添加面板边框</span>        p1<span class="token punctuation">.</span><span class="token function">setBorder</span><span class="token punctuation">(</span>BorderFactory<span class="token punctuation">.</span><span class="token function">createTitledBorder</span><span class="token punctuation">(</span><span class="token string">"面板1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p2<span class="token punctuation">.</span><span class="token function">setBorder</span><span class="token punctuation">(</span>BorderFactory<span class="token punctuation">.</span><span class="token function">createTitledBorder</span><span class="token punctuation">(</span><span class="token string">"面板2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p3<span class="token punctuation">.</span><span class="token function">setBorder</span><span class="token punctuation">(</span>BorderFactory<span class="token punctuation">.</span><span class="token function">createTitledBorder</span><span class="token punctuation">(</span><span class="token string">"面板3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p4<span class="token punctuation">.</span><span class="token function">setBorder</span><span class="token punctuation">(</span>BorderFactory<span class="token punctuation">.</span><span class="token function">createTitledBorder</span><span class="token punctuation">(</span><span class="token string">"面板4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//面板1 添加标签并居中</span>        p1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"容器测试"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>BorderLayout<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//面板2 添加按钮</span>        p2<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//流布局</span>        p2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p3<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span> <span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p4<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"面板4 测试"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>BorderLayout<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加面板</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java19.png" style="zoom:67%;" /><h2 id="JScrollPane-面板"><a href="#JScrollPane-面板" class="headerlink" title="JScrollPane 面板"></a>JScrollPane 面板</h2><blockquote><p><strong>Class JScrollPane</strong></p><p>java.lang.Object<br>java.awt.Component<br>java.awt.Container<br>javax.swing.JComponent<br>javax.swing.JScrollPane </p></blockquote><p>JScrollPane面板是带滚动条的面板，也是容器，但JScrollPane面板只能放一个组件，不能布局。但可以通过放一个JPanel面板实现多组件插入！！</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JFrame父窗体类</span><span class="token keyword">class</span> <span class="token class-name">Parentform</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为父类添加标题</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"JFrame父窗体的标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体关闭规则</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">230</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">550</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取窗体容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//文本域</span>        JTextArea area <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建添加滚动面板</span>        JScrollPane js <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JScrollPane</span><span class="token punctuation">(</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>js<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java20.png" style="zoom:67%;" /><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><p>通用抽象窗口工具包（AWT）容器对象是可以包含其他AWT组件的组件</p><p><strong>构造方法</strong></p><p><font color = #05ffdc>Container（） </font> 创建新的容器</p><p><strong>常用方法</strong></p><table><thead><tr><th>修饰符、类型</th><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>Container</td><td><font color = #05ffdc>add（Component comp)</font></td><td>将指定的组件附加到此容器的后面</td></tr><tr><td>Container</td><td><font color = #05ffdc>add（Component comp, int index）</font></td><td>在给定的位置将指定的组件添加到此容器</td></tr><tr><td>void</td><td><font color = #05ffdc>addContainerListener（ContainerListener l） </font></td><td>添加指定的容器侦听器以从此容器接收容器事</td></tr><tr><td>int</td><td><font color = #05ffdc>getComponentCount（） </font></td><td>获取此面板中的组件数量</td></tr><tr><td>component[]</td><td><font color = #05ffdc>getComponents（） </font></td><td>获取此容器中的所有组件</td></tr><tr><td>void</td><td><font color = #05ffdc>validate（） </font></td><td>验证此容器及其所有子组件（刷新组件）</td></tr></tbody></table><h2 id="按钮组件"><a href="#按钮组件" class="headerlink" title="按钮组件"></a>按钮组件</h2><h3 id="JButton-按钮"><a href="#JButton-按钮" class="headerlink" title="JButton 按钮"></a>JButton 按钮</h3><blockquote><p><strong>Class JButton</strong></p><p>java.long.Object<br>java.awt.Component<br>java.awt.Container<br>javax.swing.JComponent<br>javax.swing.AbstractButton<br>javax.swing.JButton</p></blockquote><p>能获取用户点击</p><p><strong>构造方法</strong></p><p><font color = #05ffdc>JButton（） </font> </p><p><font color = #05ffdc>JButton（String text） </font> </p><p><font color = #05ffdc>JButton（lcon icon） </font> </p><p><font color = #05ffdc>JButton（String text , lcon icon） </font> </p><blockquote><p><strong>text：</strong>表示标签，标识性文字、<br><strong>icon：</strong>图标</p></blockquote><p><strong>常用方法</strong></p><p>javax.swing.AbstractButton类 里的方法 ，由于方法较多自行查询API</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionEvent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionListener<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JFrame父窗体类</span><span class="token keyword">class</span> <span class="token class-name">Parentform</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为父类添加标题</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"JFrame父窗体的标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体关闭规则</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">230</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">550</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取窗体容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//网格布局</span>        <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JButton<span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//设置按钮不可用</span>        b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"不可用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置按钮背景色</span>        b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"有背景色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>pink<span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"无边框"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setBorderPainted</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"有边框"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setBorder</span><span class="token punctuation">(</span>BorderFactory<span class="token punctuation">.</span><span class="token function">createLineBorder</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>RED<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Icon icon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"src/imageButtoo.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//给按钮设置图片</span>        b<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span>icon<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//鼠标悬停提示</span>        b<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setToolTipText</span><span class="token punctuation">(</span><span class="token string">"图片按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"可点击"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>Parentform<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"点击按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java21.png" style="zoom:67%;" /><h3 id="JRadioButton-单选按钮"><a href="#JRadioButton-单选按钮" class="headerlink" title="JRadioButton 单选按钮"></a>JRadioButton 单选按钮</h3><blockquote><p><strong>Class JRadioButton</strong></p><p>java.lang.Object<br>java.awt.Component<br>java.awt.Container<br>javax.swing.JComponent<br>javax.swing.AbstractButton<br>javax.swing.JToggleButton<br>javax.swing.JRadioButton </p></blockquote><p>显示圆形图标的按钮，旁边有说明性文字，默认情况单选按钮是单独存在的，因此需要按钮组将多个按钮放在一起使得按钮有单选效果，方法在javax.swing.AbstractButton类中</p><p><strong>构造方法</strong></p><p><font color = #05ffdc>JRadioButton（）</font> </p><p><font color = #05ffdc>JRadioButton（Icon icon）</font> </p><p><font color = #05ffdc>JRadioButton（Icon icon , boolean selected）</font> </p><p><font color = #05ffdc>JRadioButton（String text）</font> </p><p><font color = #05ffdc>JRadioButton（String text , Icon icon）</font> </p><p><font color = #05ffdc>JRadioButton（String text , Icon icon , boolean selected）</font> </p><blockquote><p><strong>icon：</strong>图标对象<br><strong>selected：</strong>是否选中 true：选中<br><strong>text：</strong>标示性文字</p></blockquote><p><strong>按钮组</strong></p><blockquote><p><strong>Class ButtonGroup</strong></p><p>java.lang.Object<br>javax.swing.ButtonGroup </p></blockquote><p>用于为一组按钮设置排除范围，意味着其中一个打开，则关闭组中的其他按钮</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionEvent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionListener<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JFrame父窗体类</span><span class="token keyword">class</span> <span class="token class-name">Parentform</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为父类添加标题</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"JFrame父窗体的标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体关闭规则</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">230</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">550</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取窗体容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JRadioButton no1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JRadioButton</span><span class="token punctuation">(</span><span class="token string">"按钮No.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JRadioButton no2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JRadioButton</span><span class="token punctuation">(</span><span class="token string">"按钮No.2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JRadioButton no3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JRadioButton</span><span class="token punctuation">(</span><span class="token string">"按钮No.3"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//默认选中</span><span class="token comment" spellcheck="true">//        no1.setSelected(true);</span>        <span class="token comment" spellcheck="true">//按钮组</span>        ButtonGroup group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ButtonGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        group<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>no1<span class="token punctuation">)</span><span class="token punctuation">;</span>        group<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>no2<span class="token punctuation">)</span><span class="token punctuation">;</span>        group<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>no3<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>no1<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>no2<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>no3<span class="token punctuation">)</span><span class="token punctuation">;</span>        JButton jb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"打印"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jb<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>no1<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"按钮1："</span><span class="token operator">+</span>no1<span class="token punctuation">.</span><span class="token function">isSelected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>no2<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"按钮1："</span><span class="token operator">+</span>no2<span class="token punctuation">.</span><span class="token function">isSelected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>no3<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"按钮1："</span><span class="token operator">+</span>no3<span class="token punctuation">.</span><span class="token function">isSelected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                group<span class="token punctuation">.</span><span class="token function">clearSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//清除选中（刷新）</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jb<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java22.png" style="zoom:67%;" /><h3 id="JCheckBox-复选框"><a href="#JCheckBox-复选框" class="headerlink" title="JCheckBox 复选框"></a>JCheckBox 复选框</h3><blockquote><p><strong>Class JCheckBox</strong></p><p>java.lang.Object<br>java.awt.Component<br>java.awt.Container<br>javax.swing.JComponent<br>javax.swing.AbstractButton<br>javax.swing.JToggleButton<br>javax.swing.JCheckBox </p></blockquote><p>显示方块的图标，旁边有说明性文字，可多选设置，属性设置来源 javax.swing.AbstractButton类</p><p><strong>构造方法</strong></p><p><font color = #05ffdc>JCheckBox（） </font> </p><p><font color = #05ffdc>JCheckBox（Icon icon , boolean checked） </font> </p><p><font color = #05ffdc>JCheckBox（String text , boolean chccked） </font> </p><blockquote><p><strong>icon：</strong>图标对象<br><strong>checked：</strong>是否选中 true：选中<br><strong>text：</strong>标示性文字</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionEvent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionListener<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JFrame父窗体类</span><span class="token keyword">class</span> <span class="token class-name">Parentform</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为父类添加标题</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"JFrame父窗体的标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体关闭规则</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">230</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">550</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取窗体容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JCheckBox no1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JCheckBox</span><span class="token punctuation">(</span><span class="token string">"按钮No.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JCheckBox no2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JCheckBox</span><span class="token punctuation">(</span><span class="token string">"按钮No.2"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JCheckBox no3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JCheckBox</span><span class="token punctuation">(</span><span class="token string">"按钮No.3"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//默认选中</span><span class="token comment" spellcheck="true">//        no1.setSelected(true);</span><span class="token comment" spellcheck="true">//        no2.setSelected(true);</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>no1<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>no2<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>no3<span class="token punctuation">)</span><span class="token punctuation">;</span>        JButton jb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"打印"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jb<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>no1<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"按钮1："</span><span class="token operator">+</span>no1<span class="token punctuation">.</span><span class="token function">isSelected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>no2<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"按钮1："</span><span class="token operator">+</span>no2<span class="token punctuation">.</span><span class="token function">isSelected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>no3<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"按钮1："</span><span class="token operator">+</span>no3<span class="token punctuation">.</span><span class="token function">isSelected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jb<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java23.png" style="zoom:67%;" /><h2 id="列表组件"><a href="#列表组件" class="headerlink" title="列表组件"></a>列表组件</h2><h3 id="JComboBox下拉列表框"><a href="#JComboBox下拉列表框" class="headerlink" title="JComboBox下拉列表框"></a>JComboBox下拉列表框</h3><p><strong>JComboBox下拉表框</strong></p><blockquote><p><strong>Class JComboBox<E></strong></p><p>java.lang.Object<br>java.awt.Component<br>java.awt.Container<br>javax.swing.JComponent<br>javax.swing.JComboBox<E> </p></blockquote><p>带条状的显示区，具有下拉功能</p><p><strong>构造方法</strong></p><p><font color = #05ffdc>JComboBox（） </font> </p><p><font color = #05ffdc>JComboBox（ComboBoxModel dataModel） </font> </p><p><font color = #05ffdc>JComboBox（Object[] arrayDate） </font> </p><p><font color = #05ffdc>JComboBox（Vector vector） </font> </p><blockquote><p><strong>dataModel：</strong>模型<br><strong>arrayDate：</strong>数组<br><strong>vector：</strong>动态数组</p><p>Vector 类型实现了一个动态数组。和 数组 很相似，但是两者是不同的：</p><ul><li>Vector 是同步访问的</li><li>Vector 包含了许多传统的方法，这些方法不属于集合框架</li></ul></blockquote><p><strong>JComboBox模型</strong></p><p>将下拉列表框中的项目封装为ComboBoxModel（接口 / 模型）</p><p>初始化JComboBox对象时向上转型为ComboBoxModel 接口类型，必须实现以下两种方法：</p><p><font color = #05ffdc>（void）setSelectedItem（Object item） </font> 用于设置下拉列表框中的选中项</p><p><font color = #05ffdc>（Object）getSelectedItem（） </font> 用于返回下拉列表框中的选中项</p><p>继承 AbstractLisModel类 也有两个重要的操作：</p><p><font color = #05ffdc>getSize（） </font> 返回列表的长度</p><p><font color = #05ffdc>getElementAt（int index） </font> 返回指定的索引处的值</p><p>如果想实现调用接口，自定义一个实现 ComboBoxModel接口 并继承 AbstractLisModel类 的类，这样可以重写或实现该类的重要方法，初始化JComboBox对象时向上转型为ComboBoxModel 接口类型即可</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionEvent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionListener<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JFrame父窗体类</span><span class="token keyword">class</span> <span class="token class-name">Parentform</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为父类添加标题</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"JFrame父窗体的标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体关闭规则</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">230</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">550</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取窗体容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        //初始化对象（1）</span><span class="token comment" spellcheck="true">//        JComboBox&lt;String> comboBox = new JComboBox&lt;>();</span><span class="token comment" spellcheck="true">//        //像下拉列表添加数据</span><span class="token comment" spellcheck="true">//        comboBox.addItem("No.1");</span><span class="token comment" spellcheck="true">//        comboBox.addItem("No.2");</span><span class="token comment" spellcheck="true">//        comboBox.addItem("No.3");</span><span class="token comment" spellcheck="true">//        //初始化对象（2）数组载入</span><span class="token comment" spellcheck="true">//        String[] str = new String[]{"No.1","No.2","No.3"};</span><span class="token comment" spellcheck="true">//        JComboBox&lt;String> comboBox = new JComboBox&lt;>(str);</span>        <span class="token comment" spellcheck="true">//初始化对象（3）调用接口</span>        <span class="token comment" spellcheck="true">//向上转型为ComboBoxModel接口</span>        ComboBoxModel com <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyComboBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JComboBox comboBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JComboBox</span><span class="token punctuation">(</span>com<span class="token punctuation">)</span><span class="token punctuation">;</span>        comboBox<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JButton btn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"打印"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btn<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"选中索引为："</span><span class="token operator">+</span>comboBox<span class="token punctuation">.</span><span class="token function">getSelectedIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"选中的值为："</span><span class="token operator">+</span>comboBox<span class="token punctuation">.</span><span class="token function">getSelectedItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---测试2---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下拉列表框中的个数："</span><span class="token operator">+</span>com<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取下拉列表框的项目："</span><span class="token operator">+</span>com<span class="token punctuation">.</span><span class="token function">getSelectedItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查看下拉列表框索引2 : "</span><span class="token operator">+</span>com<span class="token punctuation">.</span><span class="token function">getElementAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>comboBox<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//用于提供接口获取信息</span><span class="token comment" spellcheck="true">//模型类 继承 AbstractListModel类 ，实现ComboBoxModel接口</span><span class="token keyword">class</span> <span class="token class-name">MyComboBox</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractListModel</span> <span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">ComboBoxModel</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">{</span>     String g <span class="token operator">=</span> null<span class="token punctuation">;</span>     String<span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"No.1"</span><span class="token punctuation">,</span><span class="token string">"No.2"</span><span class="token punctuation">,</span><span class="token string">"No.3"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置下拉列表框项目</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSelectedItem</span><span class="token punctuation">(</span>Object anItem<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>g <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>anItem<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取下拉列表框的项目（数据获取来源）</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">getSelectedItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回下拉列表框的数目</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回索引值</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getElementAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> str<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java24.png" style="zoom:67%;" /><h3 id="JList列表框"><a href="#JList列表框" class="headerlink" title="JList列表框"></a>JList列表框</h3><blockquote><p><strong>Class JList<E></strong></p><p>java.lang.Object<br>java.awt.Component<br>java.awt.Container<br>javax.swing.JComponent<br>javax.swing.JList<E> </p></blockquote><p>列表框无需按钮激活，直接将内容展示出来，大小属性的列表框会限制内容展示，可用滚动面板弥补内容缺失的展示，可多选</p><p><strong>构造方法</strong></p><p><font color = #05ffdc>JLsit（） </font> </p><p><font color = #05ffdc>JLsit（Object[] listData） </font> </p><p><font color = #05ffdc>JLsit（Vector listData） </font> </p><p><font color = #05ffdc>JLsit（ListModel dataModel） </font> </p><blockquote><p><strong>listData：</strong>数组<br><strong>dataModel：</strong>模型</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionEvent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionListener<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Vector<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JFrame父窗体类</span><span class="token keyword">class</span> <span class="token class-name">Parentform</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为父类添加标题</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"JFrame父窗体的标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体关闭规则</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">230</span><span class="token punctuation">,</span><span class="token number">140</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取窗体容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setLayout</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//new FlowLayout()</span><span class="token comment" spellcheck="true">//        //初始化对象（1）</span><span class="token comment" spellcheck="true">//        Vector&lt;String> con = new Vector&lt;String>();</span><span class="token comment" spellcheck="true">//        JList&lt;String> jl = new JList&lt;>(con);</span><span class="token comment" spellcheck="true">//        //像下拉列表添加数据</span><span class="token comment" spellcheck="true">//        con.add("No.1");</span><span class="token comment" spellcheck="true">//        con.add("No.2");</span><span class="token comment" spellcheck="true">//        con.add("No.3");</span><span class="token comment" spellcheck="true">//        con.add("No.4");</span><span class="token comment" spellcheck="true">//        con.add("No.5");</span><span class="token comment" spellcheck="true">//        con.add("No.6");</span><span class="token comment" spellcheck="true">//        con.add("No.7");</span><span class="token comment" spellcheck="true">//        con.add("No.8");</span><span class="token comment" spellcheck="true">//        JScrollPane js = new JScrollPane(jl);</span><span class="token comment" spellcheck="true">//        //初始化对象（2）</span><span class="token comment" spellcheck="true">//        String[] str = new String[]{"No.1","No.2","No.3","No.4","No.5","No.6","No.7","No.8"};</span><span class="token comment" spellcheck="true">//        JList&lt;String> jl = new JList&lt;>(str);</span><span class="token comment" spellcheck="true">//        JScrollPane js = new JScrollPane(jl);</span>        <span class="token comment" spellcheck="true">//初始化对象（3）</span>        <span class="token comment" spellcheck="true">//向上转型为ListModel 接口</span>        ListModel LM <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyListModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JList<span class="token operator">&lt;</span>String<span class="token operator">></span> jl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>LM<span class="token punctuation">)</span><span class="token punctuation">;</span>        JScrollPane js <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JScrollPane</span><span class="token punctuation">(</span>jl<span class="token punctuation">)</span><span class="token punctuation">;</span>        JButton btn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"打印"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btn<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> values <span class="token operator">=</span> jl<span class="token punctuation">.</span><span class="token function">getSelectedValuesList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>String tmp <span class="token operator">:</span> values<span class="token punctuation">)</span><span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"选中的索引"</span><span class="token operator">+</span> jl<span class="token punctuation">.</span><span class="token function">getAnchorSelectionIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"的值为："</span><span class="token operator">+</span>tmp<span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中项目有："</span><span class="token operator">+</span>LM<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---END---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        js<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btn<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>js<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//用于提供接口获取信息</span><span class="token keyword">class</span> <span class="token class-name">MyListModel</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractListModel</span> <span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"No.1"</span><span class="token punctuation">,</span><span class="token string">"No.2"</span><span class="token punctuation">,</span><span class="token string">"No.3"</span><span class="token punctuation">,</span><span class="token string">"No.4"</span><span class="token punctuation">,</span><span class="token string">"No.5"</span><span class="token punctuation">,</span><span class="token string">"No.6"</span><span class="token punctuation">,</span><span class="token string">"No.7"</span><span class="token punctuation">,</span><span class="token string">"No.8"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>str<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getElementAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> str<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java25.png" style="zoom:67%;" /><h2 id="文本组件"><a href="#文本组件" class="headerlink" title="文本组件"></a>文本组件</h2><h3 id="JTextField文本框"><a href="#JTextField文本框" class="headerlink" title="JTextField文本框"></a>JTextField文本框</h3><blockquote><p><strong>Class JTextField</strong></p><p>java.lang.Object<br>java.awt.Component<br>java.awt.Container<br>javax.swing.JComponent<br>javax.swing.text.JTextComponent<br>javax.swing.JTextField </p></blockquote><p>用来显示或编辑一个单行文本</p><p><strong>构造方法</strong></p><p><font color = #05ffdc>JTextField（） </font> </p><p><font color = #05ffdc>JTextField（String text） </font> </p><p><font color = #05ffdc>JTextField（int fieldwidth） </font> </p><p><font color = #05ffdc>JTextField（String text , int fieldwidth） </font> </p><p><font color = #05ffdc>JTextField（Document docModel , String text , int fieldWidth） </font> </p><blockquote><p><strong>text：</strong>默认内容<br><strong>fieldwidth：</strong>字体数的行长<br><strong>docModel：</strong>文本组件的模型</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionEvent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionListener<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JFrame父窗体类</span><span class="token keyword">class</span> <span class="token class-name">Parentform</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为父类添加标题</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"JFrame父窗体的标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体关闭规则</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">230</span><span class="token punctuation">,</span><span class="token number">140</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取窗体容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建文本框对象（1）</span><span class="token comment" spellcheck="true">//        JTextField jt = new JTextField();</span><span class="token comment" spellcheck="true">//        jt.setColumns(20);</span>        <span class="token comment" spellcheck="true">//创建文本框对象（2）</span><span class="token comment" spellcheck="true">//        JTextField jt = new JTextField("测试");</span>        <span class="token comment" spellcheck="true">//创建文本框对象（3）</span><span class="token comment" spellcheck="true">//        JTextField jt = new JTextField(20);</span>        <span class="token comment" spellcheck="true">//创建文本框对象（4）</span><span class="token comment" spellcheck="true">//        JTextField jt = new JTextField("测试" , 20);</span>        <span class="token comment" spellcheck="true">//创建文本框对象（5）</span>        JTextField jt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token string">"测试"</span> <span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JButton btn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"确认"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btn<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获取内容</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"内容为："</span><span class="token operator">+</span>jt<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                jt<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//覆盖内容（清空效果）</span>                jt<span class="token punctuation">.</span><span class="token function">requestFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取焦点</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jt<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java26.png" style="zoom:67%;" /><h3 id="JPasswordField密码框"><a href="#JPasswordField密码框" class="headerlink" title="JPasswordField密码框"></a>JPasswordField密码框</h3><blockquote><p><strong>Class JPasswordField</strong></p><p>java.lang.Object<br>java.awt.Component<br>java.awt.Container<br>javax.swing.JComponent<br>javax.swing.text.JTextComponent<br>javax.swing.JTextField<br>javax.swing.JPasswordField </p></blockquote><p>密码框与文本框定义和用法基本相同，有用户输入的字符串有字符加密功能</p><p><strong>构造方法</strong></p><p><font color = #05ffdc>JPasswordField（） </font> </p><p><font color = #05ffdc>JPasswordField（String text） </font> </p><p><font color = #05ffdc>JPasswordField（int fieldwidth） </font> </p><p><font color = #05ffdc>JPasswordField（String text , int fieldwidth） </font> </p><p><font color = #05ffdc>JPasswordField（Document docModel , String text , int fieldWidth） </font> </p><blockquote><p><strong>text：</strong>默认内容<br><strong>fieldwidth：</strong>字体数的行长<br><strong>docModel：</strong>文本组件的模型</p></blockquote><p>用法与上面JTextFidle文本框例子一样</p><p>JPasswordField提供了一个<font color = #05ffdc>setEchoChar（） </font> 方法，可输入框中的加密回显字符</p><h3 id="JTextArea文本域"><a href="#JTextArea文本域" class="headerlink" title="JTextArea文本域"></a>JTextArea文本域</h3><blockquote><p><strong>Class JTextArea</strong></p><p>java.lang.Object<br>java.awt.Component<br>java.awt.Container<br>javax.swing.JComponent<br>javax.swing.text.JTextComponent<br>javax.swing.JTextArea </p></blockquote><p>能支持多行字符的输入</p><p><strong>构造方法</strong></p><p><font color = #05ffdc>JTextArea（） </font> </p><p><font color = #05ffdc>JTextArea（String text） </font> </p><p><font color = #05ffdc>JTextArea（int rows , int columns） </font> </p><p><font color = #05ffdc>JTextArea（Document doc） </font> </p><p><font color = #05ffdc>JTextArea（Document doc , String text , int rows , int columns） </font> </p><blockquote><p><strong>text：</strong>默认定义的内容<br><strong>rows：</strong> 行数<br><strong>columns：</strong>列数<br><strong>doc：</strong>文本组件模型</p></blockquote><p><strong>提供方法</strong></p><p><font color = #05ffdc>setLineWrap（boolean Newline） </font> 字符到达边缘自动换行</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JFrame父窗体类</span><span class="token keyword">class</span> <span class="token class-name">Parentform</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为父类添加标题</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"JFrame父窗体的标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体关闭规则</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">230</span><span class="token punctuation">,</span><span class="token number">140</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取窗体容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建文本框对象（1）</span><span class="token comment" spellcheck="true">//        JTextArea area = new JTextArea();</span><span class="token comment" spellcheck="true">//        area.setRows(5);</span><span class="token comment" spellcheck="true">//        area.setColumns(20);</span>        <span class="token comment" spellcheck="true">//创建文本框对象（2）</span><span class="token comment" spellcheck="true">//        JTextArea area = new JTextArea("测试");</span><span class="token comment" spellcheck="true">//        area.setRows(5);</span><span class="token comment" spellcheck="true">//        area.setColumns(20);</span>        <span class="token comment" spellcheck="true">//创建文本框对象（3）</span>        JTextArea area <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextArea</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//到达边缘自动换行</span>        area<span class="token punctuation">.</span><span class="token function">setLineWrap</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//定义默认内容</span>        area<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//内容里后面追加内容</span>        area<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//索引位置追加内容</span>        area<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"测试2"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JScrollPane js <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JScrollPane</span><span class="token punctuation">(</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>js<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java27.png" style="zoom:67%;" /><h2 id="事件监听器"><a href="#事件监听器" class="headerlink" title="事件监听器"></a>事件监听器</h2><p>事件监听器，实质上是一个 实现特定类型监听器接口 的类对象，事件源 在用户做出相应动作 来产生事件对象</p><p><strong>方法</strong></p><p><font color = #05ffdc>addActionListener（ActionListener Act） </font> 添加事件监听器</p><p><font color = #05ffdc>removeActionListener（ActionListener Act） </font> 删除事件监听器</p><h3 id="ActionEvent动作事件"><a href="#ActionEvent动作事件" class="headerlink" title="ActionEvent动作事件"></a>ActionEvent动作事件</h3><blockquote><p><strong>Class ActionEvent</strong></p><p>java.lang.Object<br>java.util.EventObject<br>java.awt.AWTEvent<br>java.awt.event.ActionEvent </p></blockquote><p>组件定义的动作发生的语义事件。 当发生组件特定操作（例如被按下）时，此事件由组件生成的</p><p>使用例子：（也可以外部类继承ActionListener类 调用响应事件）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//ActionListener()  事件响应类(匿名类)</span>事件源组件<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment" spellcheck="true">//事件反应方法（重写）</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//响应代码</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>个人登录练习：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionEvent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionListener<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JFrame父窗体类</span><span class="token keyword">class</span> <span class="token class-name">Parentform</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为父类添加标题</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"JFrame父窗体的标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体关闭规则</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">230</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">220</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取窗体容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setLayout</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        JLabel bq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"组件选择状态"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bq<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">70</span> <span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        jb.setBounds(70,110,140,40);</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bq<span class="token punctuation">)</span><span class="token punctuation">;</span>        JLabel jl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"账号："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jl<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jl<span class="token punctuation">)</span><span class="token punctuation">;</span>        JTextField jt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jt<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//以下是三个属性是必要的，连写的缘故</span>        jt<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"微软雅黑"</span><span class="token punctuation">,</span>Font<span class="token punctuation">.</span>PLAIN<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加动作事件监听器</span>        <span class="token comment" spellcheck="true">//addActionListener 添加监听的方法</span>        <span class="token comment" spellcheck="true">//ActionListener()  事件响应类</span>        jt<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//匿名内部类</span>            <span class="token comment" spellcheck="true">//ActionEvent：动作事件类 ，可获取组件触发···</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                bq<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"账号文本框选中以回车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JLabel jl2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"密码："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jl2<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jl2<span class="token punctuation">)</span><span class="token punctuation">;</span>        JPasswordField jpf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPasswordField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jpf<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jpf<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"微软雅黑"</span><span class="token punctuation">,</span>Font<span class="token punctuation">.</span>PLAIN<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jpf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//触发按钮立即实例jbAdl类 ，因jbAdl类继承了ActionListener类</span>        jbAdl jba <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">jbAdl</span><span class="token punctuation">(</span>bq<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加事件监听器</span>        jpf<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span>jba<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//删除事件监听器（自选控件）</span>        jpf<span class="token punctuation">.</span><span class="token function">removeActionListener</span><span class="token punctuation">(</span>jba<span class="token punctuation">)</span><span class="token punctuation">;</span>        JButton jb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jb<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">140</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jb<span class="token punctuation">)</span><span class="token punctuation">;</span>        Parentform jftmp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//匿名类形式触发动作事件</span>        jb<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                bq<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"点击了按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>jpf<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">new</span> <span class="token class-name">Dialog</span><span class="token punctuation">(</span>jftmp<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token keyword">new</span> <span class="token class-name">Dialog</span><span class="token punctuation">(</span>jftmp<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jb<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dialog</span> <span class="token keyword">extends</span> <span class="token class-name">JDialog</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Dialog</span><span class="token punctuation">(</span>Parentform p <span class="token punctuation">,</span> <span class="token keyword">boolean</span> Happening<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//参数顺序： 1.父窗体对象 ， 2.对话框标题 ，3.是否堵塞父窗体</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token string">"消息"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取对话框容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Happening<span class="token punctuation">)</span><span class="token punctuation">{</span>            c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"登录成功"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//对话框坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">360</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//思路2 外部事件相应</span><span class="token keyword">class</span> <span class="token class-name">jbAdl</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span><span class="token punctuation">{</span>    JLabel c<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">jbAdl</span><span class="token punctuation">(</span>JLabel c <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>c <span class="token operator">=</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        c<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"密码框选中以回车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java28.png" style="zoom:67%;" /><h3 id="FocusEvent焦点事件监听器"><a href="#FocusEvent焦点事件监听器" class="headerlink" title="FocusEvent焦点事件监听器"></a>FocusEvent焦点事件监听器</h3><blockquote><p><strong>Class FocusEvent</strong><br>java.lang.Object<br>java.util.EventObject<br>java.awt.AWTEvent<br>java.awt.event.ComponentEvent<br>java.awt.event.FocusEvent </p></blockquote><p>以光标视为焦点，失去或激活都会触发事件</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>FocusEvent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>FocusListener<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Parentform</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为父类添加标题</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"JFrame父窗体的标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体关闭规则</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">230</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">220</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取窗体容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setLayout</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        JTextField jt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JTextField jt2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JTextField jt3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jt<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jt2<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jt3<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//直接调用类，因 fet类 继承FocusEvent类</span>        jt<span class="token punctuation">.</span><span class="token function">addFocusListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">fet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jt2<span class="token punctuation">.</span><span class="token function">addFocusListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">fet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jt3<span class="token punctuation">.</span><span class="token function">addFocusListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">fet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jt<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jt2<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jt3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 继承FocusEvent类</span><span class="token keyword">class</span> <span class="token class-name">fet</span> <span class="token keyword">implements</span> <span class="token class-name">FocusListener</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取焦点时的相应</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">focusGained</span><span class="token punctuation">(</span>FocusEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取触发组件</span>        JTextField tmp <span class="token operator">=</span> <span class="token punctuation">(</span>JTextField<span class="token punctuation">)</span> e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//给获取焦点的文本框设置绿色边框</span>        tmp<span class="token punctuation">.</span><span class="token function">setBorder</span><span class="token punctuation">(</span>BorderFactory<span class="token punctuation">.</span><span class="token function">createLineBorder</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>green<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//失去焦点时的相应</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">focusLost</span><span class="token punctuation">(</span>FocusEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取触发组件</span>        JTextField tmp <span class="token operator">=</span> <span class="token punctuation">(</span>JTextField<span class="token punctuation">)</span> e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//给获取焦点的文本框设置绿色边框</span>        tmp<span class="token punctuation">.</span><span class="token function">setBorder</span><span class="token punctuation">(</span>BorderFactory<span class="token punctuation">.</span><span class="token function">createLineBorder</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java29.png" style="zoom:67%;" /><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Swing程序设计&quot;&gt;&lt;a href=&quot;#Swing程序设计&quot; class=&quot;headerlink&quot; title=&quot;Swing程序设计&quot;&gt;&lt;/a&gt;Swing程序设计&lt;/h1&gt;&lt;p&gt;Swing为GUI(图形用户界面)提供开发工具包，使用Swing开发的应用程序可以统
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://Sanscan12.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="笔记" scheme="https://Sanscan12.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://Sanscan12.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>07Java 异常篇</title>
    <link href="https://sanscan12.github.io/posts/df59.html"/>
    <id>https://sanscan12.github.io/posts/df59.html</id>
    <published>2020-07-14T16:00:00.000Z</published>
    <updated>2020-07-27T02:02:34.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p>异常机制提供了程序退出的安全通道。当出现错误后，程序执行的流程发生改变，程序的控制权转移到异常处理器</p><p>Java类库的每个包中都定义有异常类，所有这些类都是 Throwable类 的子类，有两个子类分别是 Error类、Exception类</p><p>Error类 是描述java运行系统中的内部错误以及资源耗尽的错误，属于较为致命的错误</p><p>Exception类 是可以通过捕捉处理使程序继续运行，属于非致命的错误</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java04.png" style="zoom:80%;" /><h1 id="常见异常"><a href="#常见异常" class="headerlink" title="常见异常"></a>常见异常</h1><table><thead><tr><th>异常类</th><th>说明</th></tr></thead><tbody><tr><td>ClassCastException</td><td>类型转换异常类</td></tr><tr><td>ClassNotFoundException</td><td>没找到相应类异常</td></tr><tr><td>ArithmeticException</td><td>算术条件异常</td></tr><tr><td>ArrayIndexOutOfBoundsException</td><td>数组索引越界异常</td></tr><tr><td>ArrayStoreException</td><td>数组中包含不兼容的值抛出的异常</td></tr><tr><td>SQLException</td><td>操作数据库异常类</td></tr><tr><td>NullPointerException</td><td>空指针异常</td></tr><tr><td>NoSuchFieldException</td><td>字段未找到异常</td></tr><tr><td>NoSuchMethodException</td><td>方法未找到抛出的异常</td></tr><tr><td>NumberFormatException</td><td>字符串转换为数字抛出的异常</td></tr><tr><td>NegativeArraySizeException</td><td>数组长度为负异常</td></tr><tr><td>StringIndexOutOfBoundsException</td><td>字符串索引超出范围抛出的异常</td></tr><tr><td>IOException</td><td>操作输入流和输出流时异常</td></tr><tr><td>IllegalAccessException</td><td>不允许访问某类异常</td></tr><tr><td>InstantiationException</td><td>当应用程序试图使用Class类中的newInstance()方法创建一个类的实例，而指定的类对象无法被实例化时，抛出该异常</td></tr><tr><td>EOFException</td><td>文件已结束异常</td></tr><tr><td>FileNotFoundException</td><td>文件未找到异常</td></tr></tbody></table><h1 id="捕捉异常"><a href="#捕捉异常" class="headerlink" title="捕捉异常"></a>捕捉异常</h1><p>异常捕捉有两种，自动捕捉异常（系统自带）、try-catch 语句捕捉异常 </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>   被捕获代码的区块<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型 e<span class="token punctuation">)</span><span class="token punctuation">{</span>   对异常处理的区块<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型 e<span class="token punctuation">)</span><span class="token punctuation">{</span>   对异常处理的区块<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型 e<span class="token punctuation">)</span><span class="token punctuation">{</span>   对异常处理的区块<span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>    最后运行的区块<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>try：语句用来存放可能发生异常的语句<br>catch：激发被捕获的异常类型<br>finally：异常处理的最后运行的区域</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//输出异常错误性质</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//输出异常类型和性质</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//输出异常类型、性质、栈层（出现位置不定）</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"END....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">/ by zero--java.lang.ArithmeticException: / by zero----END.....java.lang.ArithmeticException: / by zero    at Demo.main(Demo.java:5)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>finally语句不会执行情况：</strong></p><ul><li>在finally语句块中发生了异常</li><li>在前面的代码中使用了 <code>System.exit()</code>（退出程序）</li><li>程序所在的线程死亡（运行时终止程序）</li><li>关闭CPU</li></ul></blockquote><h1 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h1><p>创建API中没有的异常，自定条件的异常</p><blockquote><p><strong>使用步骤：</strong> </p><ol><li>创建自定义异常类</li><li>在方法中通过 throw 关键字 抛出异常对象</li><li>如果在当前抛出异常的方法中处理异常，可以使用 try-catch语句块捕获并处理，否则在方法的声明处通过 throws关键字 指明要抛出给方法调用者的异常</li><li>在出现异常方法的调用者中捕获并处理异常</li></ol></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> 自定义异常类 <span class="token keyword">extends</span> 已有的异常类<span class="token punctuation">{</span>···<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        orangutan xingxing <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">orangutan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bird niao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        key yaoshi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//No.1</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>xingxing <span class="token keyword">instanceof</span> <span class="token class-name">Animals</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token string">"非动物"</span><span class="token operator">+</span>xingxing<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CustomException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//No.2</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>niao <span class="token keyword">instanceof</span> <span class="token class-name">Animals</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token string">"非动物"</span><span class="token operator">+</span>niao<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CustomException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//No.3 类型错误</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token string">"非动物："</span><span class="token operator">+</span>yaoshi<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CustomException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//动物类</span><span class="token keyword">class</span> <span class="token class-name">Animals</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//猩猩</span><span class="token keyword">class</span> <span class="token class-name">orangutan</span> <span class="token keyword">extends</span> <span class="token class-name">Animals</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//鸟</span><span class="token keyword">class</span> <span class="token class-name">bird</span> <span class="token keyword">extends</span> <span class="token class-name">Animals</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//物品类</span><span class="token keyword">class</span> <span class="token class-name">Items</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//钥匙</span><span class="token keyword">class</span> <span class="token class-name">key</span> <span class="token keyword">extends</span> <span class="token class-name">Items</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//自定义异常类 继承异常类</span><span class="token keyword">class</span> <span class="token class-name">CustomException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">CustomException</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">开始1开始2CustomException: 非动物：key@133314b    at Demo.main(Demo.java:30)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="方法中抛出异常"><a href="#方法中抛出异常" class="headerlink" title="方法中抛出异常"></a>方法中抛出异常</h1><p>方法出现异常，又不想在当前方法处理，则可以用 throws、throw 关键字 在方法中抛出异常</p><h2 id="throws-关键字抛出异常"><a href="#throws-关键字抛出异常" class="headerlink" title="throws 关键字抛出异常"></a>throws 关键字抛出异常</h2><p>throws将代码中可能产生的异常交给上一级处理，直到处理异常 try-catch 语句调用 ，否则调用的那个方法也要加抛出的关键字已经方法类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> 方法名<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> 异常类型<span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>异常类型n<span class="token punctuation">{</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>被调用时：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型 e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//抛出中断异常</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">,</span>ArithmeticException<span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>           Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               i<span class="token operator">-=</span><span class="token number">5</span><span class="token punctuation">;</span>               <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span>i<span class="token punctuation">;</span>           <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取方法中的异常</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//终止异常</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show()方法抛出终止异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//算术异常</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show()方法抛出算术异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//异常</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show()方法抛出异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">012345show()方法抛出算术异常<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="throw-关键字抛出异常"><a href="#throw-关键字抛出异常" class="headerlink" title="throw 关键字抛出异常"></a>throw 关键字抛出异常</h2><p>手动制造异常。程序运行到throw语句时立即终止程序，不会执行后面的语句</p><p>使用throw抛出异常的前提，必须要有try-catch语句包围捕捉异常</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//强制中断</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"b 为 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> s <span class="token operator">=</span> a <span class="token operator">/</span> b <span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">java.lang.NullPointerException: b 为 0    at Demo2.main(Demo2.java:7)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="异常的使用原则"><a href="#异常的使用原则" class="headerlink" title="异常的使用原则"></a>异常的使用原则</h1><p>提高程序的安全性，控制流程状况以及异常修复！</p><ul><li>不要怱略捕捉到的异常</li><li>不要过度使用异常</li><li>不要使用过于庞大的 try-catch语句</li><li>子类抛出的异常不能比父类高级（RuntimeException不受此约束）</li><li>一个方法被覆盖时，覆盖它的方法必须抛出相同的异常或异常的子类</li></ul><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;异常&quot;&gt;&lt;a href=&quot;#异常&quot; class=&quot;headerlink&quot; title=&quot;异常&quot;&gt;&lt;/a&gt;异常&lt;/h1&gt;&lt;p&gt;异常机制提供了程序退出的安全通道。当出现错误后，程序执行的流程发生改变，程序的控制权转移到异常处理器&lt;/p&gt;
&lt;p&gt;Java类库的每个包中都
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://Sanscan12.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="笔记" scheme="https://Sanscan12.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://Sanscan12.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>06Java 类的高级特性篇</title>
    <link href="https://sanscan12.github.io/posts/f98c.html"/>
    <id>https://sanscan12.github.io/posts/f98c.html</id>
    <published>2020-07-10T16:00:00.000Z</published>
    <updated>2020-07-27T02:02:20.754Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java类包"><a href="#Java类包" class="headerlink" title="Java类包"></a>Java类包</h1><p>Java JDK API中提供了类功能，它们封装为类包</p><h2 id="类名冲突"><a href="#类名冲突" class="headerlink" title="类名冲突"></a>类名冲突</h2><p>JDK API 中提供的类，在同一类包 同类名 会导致编译器无法执行 ，要把类包分开或更改类名</p><h2 id="完整的类路径"><a href="#完整的类路径" class="headerlink" title="完整的类路径"></a>完整的类路径</h2><p>完整的类名需要包名与类名的组合</p><pre class="line-numbers language-java"><code class="language-java">java<span class="token punctuation">.</span>包名<span class="token punctuation">.</span>类名<span class="token comment" spellcheck="true">//例子</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>如果指定路径不确定可能会翻车，像以下是需要完整路径<br><code>java.util.Date date = new java.util.Date();</code><br><code>java.sql.Date date2 = new java.sql.Date();</code></p></blockquote><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>java包是为了防止命名冲突，访问控制，提供搜索和定位类、接口、枚举和注释等</p><p>没有定义包会自动归纳在预设包（默认包）中，最好为所有类设置包名（良好习惯）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> 包名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>注意：</strong></p><ul><li><p>在类中指定包名时，需要将 package 表达式 放在程序的第一行，必须是，非注释代码</p></li><li><p>Java包的命名规则是全部使用小写字母的</p></li></ul></blockquote><h2 id="import-关键字导入包"><a href="#import-关键字导入包" class="headerlink" title="import 关键字导入包"></a>import 关键字导入包</h2><p>引入包可以调用包中的方法，不能调用两包中的同类名，指定包后面有 <code>*</code> ，代表使用包中的所有类</p><p>默认包中的类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> noa<span class="token punctuation">.</span>out<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        out a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nob<span class="token punctuation">.</span>out2 b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">nob<span class="token punctuation">.</span>out2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>noa包 中的 out类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> noa<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">out</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>nob包 中的 out2类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> nob<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">out2</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">测试1测试2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="import-关键字导入静态成员"><a href="#import-关键字导入静态成员" class="headerlink" title="import 关键字导入静态成员"></a>import 关键字导入静态成员</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> 静态成员<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例子：</p><blockquote><p>java.lang.System 类中的out成员变量<br>java.lang.Math 类中的max成员方法</p><p>它们都是静态成员，这是前提！！！</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>System<span class="token punctuation">.</span>out<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//导入静态成员方法</span><span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Math<span class="token punctuation">.</span>max<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//导入静态成员变量</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//静态成员简写调用</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//静态方法简写调用</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"max(3,4)?"</span><span class="token operator">+</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"max(3,4)?"</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">123123max(3,4)?4max(3,4)?4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h1><p><strong>final变量</strong></p><p>final 声明的变量，设定后，不能更改该变量的值，被final设置的变量称为常量！！</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> 数据类型 变量名 <span class="token operator">=</span> 值<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>final方法</strong></p><p>final 定义的方法，不能被其他子类重写该方法</p><p>用private修饰符（限于本类使用）修饰的方法隐式被指定为 final类型 ，可不需再定义 final 类型</p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> <span class="token keyword">final</span> 数据类型 方法名<span class="token punctuation">(</span><span class="token punctuation">[</span>参数<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>···<span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>final类</strong></p><p>final 定义的类，不能被继承 （跟部分API类类似）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">class</span> 类名<span class="token punctuation">{</span>···<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>final定义</p><p>变量 不能被更改</p><p>方法 不能被重写</p><p>类 不能被继承</p></blockquote><p>例子</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//final变量   常量IP</span>    <span class="token keyword">final</span> <span class="token keyword">double</span> IP <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        IP = 3.143;不能赋值更改</span>        no1 n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">no1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        n<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        n.show2();不能访问</span>        no2 n2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">no2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        n<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用继承父类的方法</span><span class="token comment" spellcheck="true">//        n.show2();不能访问</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">no1</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//show() final方法</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">show2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//no3 final类</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">no2</span> <span class="token keyword">extends</span> <span class="token class-name">no1</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*    不能重写 父类show()方法    public void show(){        System.out.println("测试1");    }    */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">show2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//class no3 extends no2{····}不能继承</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">测试1测试1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><p>一个类中再定义一个类，在类中再定义的类 称为内部类</p><h2 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h2><p>可直接使用所在的类中的成员方法 / 成员变量</p><blockquote><p><strong>注意：</strong></p><ul><li>在外部类外和非静态方法外实例内部类对象，需要外部类指定该对象的类型</li><li>访问 被 private修饰的内部类方法，需要接口重写调用</li><li>this关键字调用本类的成员变量，外类需要类名作为前缀。如果多类需要完整的类路径</li></ul></blockquote><p><strong>1.内部类调用外部类变量和方法及 private修饰 的访问</strong> </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">345</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">Demoo</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        int i = 456;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//共用外类的变量</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用内部类(Demo2)的show()方法输出i , j："</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"、"</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ssc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在内部类调用外类ss()方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//调用外类的ss()方法</span>            Demo<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n在内部类调用外类sss()方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//调用外类的sss()方法</span>            Demo<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用Demo类的show()方法输出i , j："</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"、"</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//public 修饰的外部类方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用sss()方法,public修饰"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//private 修饰的外部类方法</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用ss()方法,private修饰"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//在外部类实例化内部类对象引用</span>    Demoo n3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"内部类的变量使用以及比较："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Demo n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        n<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        Demo2 n2 = new Demo2(); 无法引用</span>        Demo<span class="token punctuation">.</span>Demoo n2 <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Demoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        n2<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n内部类的方法调用："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        n2<span class="token punctuation">.</span><span class="token function">ssc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">内部类的变量使用以及比较：调用Demo类的show()方法输出i , j：123、345调用内部类(Demo2)的show()方法输出i , j：123、345内部类的方法调用：在内部类调用外类ss()方法调用sss()方法,public修饰在内部类调用外类sss()方法调用ss()方法,private修饰<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.private修饰的内部类向上转型为接口</strong></p><p>能隐藏内部类方法运行情况，但仅限于接口抽象方法重写的访问</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">nn</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"no1类使用隐藏内部类的方法："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        no1 cc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">no1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过no1类doit()方法返回 nn接口</span>        nn cc2 <span class="token operator">=</span> cc<span class="token punctuation">.</span><span class="token function">doit</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cc2<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        cc2.f2();仅限于接口抽象方法的访问</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">no1</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//隐式内部类</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">no2</span> <span class="token keyword">implements</span> <span class="token class-name">nn</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//内部类的构造方法</span>        <span class="token function">no2</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"隐藏内部类获取的字符串："</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//重写接口方法</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用隐藏内部类接口f()方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试内部类的方法的访问"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回接口 ，实例化内部类</span>    <span class="token keyword">public</span> nn <span class="token function">doit</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">no2</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">no1类使用隐藏内部类的方法：隐藏内部类获取的字符串：Java调用隐藏内部类接口f()方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.<strong>使用 this 获取内部类与外部类的引用</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">D3nn</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo3</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">88</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Demoo3</span> <span class="token keyword">implements</span> <span class="token class-name">D3nn</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"参数i："</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"内部类i："</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"外部类i："</span><span class="token operator">+</span>Demo3<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> D3nn <span class="token function">doit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Demoo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">diao</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化外部类</span>        Demo3 n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过外部类doit()方法获取接口调用内部类重写方法</span>        D3nn n2 <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">doit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        n2<span class="token punctuation">.</span><span class="token function">out</span><span class="token punctuation">(</span><span class="token number">66</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">参数i：66内部类i：99外部类i：88<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h2><p>类定义在方法或任意的作用域中均可定义为内部类</p><p>方法不能访问内部类，但内部类可以访问当前方法的常量以及所有成员</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定义接口</span><span class="token keyword">interface</span> <span class="token class-name">D4nn</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo4</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//doit方法返回接口调用</span>    <span class="token keyword">public</span> D4nn <span class="token function">doit</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">class</span> <span class="token class-name">Demoo4</span> <span class="token keyword">implements</span> <span class="token class-name">D4nn</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//内部类的构造方法</span>            <span class="token keyword">public</span> <span class="token function">Demoo4</span><span class="token punctuation">(</span>String x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//外部类方法参数覆盖内容</span>                x <span class="token operator">=</span> s<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//内部类获取的参数</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//返回内部类对象</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Demoo4</span><span class="token punctuation">(</span><span class="token string">"参数测试22"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//主方法调用方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Demo4 n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        n<span class="token punctuation">.</span><span class="token function">doit</span><span class="token punctuation">(</span><span class="token string">"参数测试11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">参数测试11<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><p>匿名内部类没有名称，默认使用构造方法接口对象，匿名定义结束要有分号标识</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定义接口</span><span class="token keyword">interface</span> <span class="token class-name">D5nn</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Demoo5</span><span class="token punctuation">(</span>String x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo5</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> D5nn <span class="token function">doit</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">D5nn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//内部类的构造方法</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Demoo5</span><span class="token punctuation">(</span>String x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//外部类方法参数覆盖内容</span>                x <span class="token operator">=</span> s<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//内部类获取的参数</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Demo5 n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        D5nn  n2 <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">doit</span><span class="token punctuation">(</span><span class="token string">"参数匿名类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        n2<span class="token punctuation">.</span><span class="token function">Demoo5</span><span class="token punctuation">(</span><span class="token string">"参数匿名类2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">参数匿名类<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><p>内部类前面加static关键字即可，变成静态内部类，静态内部类只能调用静态的成员，用于调试</p><ul><li>如果创建静态内部类对象，不需要外部类的对象</li><li>不能从静态内部类的对象中访问非静态外部类的对象</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//静态内部类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo6</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Demoo6</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">Demoo6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            System.out.println(i);无法打印i ，i非静态</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//内部类里写主方法 ！！ 用于测试内部类</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Demoo6 n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demoo6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">22<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="内部类继承"><a href="#内部类继承" class="headerlink" title="内部类继承"></a>内部类继承</h2><p>内部类继承相对较复杂，需要设置专门的语法完成</p><p>继承内部类时，必须有构造方法带参数的，参数是内部类的外部类对象，同时构造方法里有使用 <code>a.super()</code> 语句</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo7</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//内部类</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demoo7</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">gg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cs n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">cs</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Demo7</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        n<span class="token punctuation">.</span><span class="token function">gg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//cs 继承 Demoo7内部类</span><span class="token keyword">class</span> <span class="token class-name">cs</span> <span class="token keyword">extends</span> <span class="token class-name">Demo7<span class="token punctuation">.</span>Demoo7</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//构造方法的参数是外部类的对象</span>    <span class="token keyword">public</span> <span class="token function">cs</span><span class="token punctuation">(</span>Demo7 d<span class="token punctuation">)</span><span class="token punctuation">{</span>        d<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">gg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">测试<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java类包&quot;&gt;&lt;a href=&quot;#Java类包&quot; class=&quot;headerlink&quot; title=&quot;Java类包&quot;&gt;&lt;/a&gt;Java类包&lt;/h1&gt;&lt;p&gt;Java JDK API中提供了类功能，它们封装为类包&lt;/p&gt;
&lt;h2 id=&quot;类名冲突&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://Sanscan12.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="笔记" scheme="https://Sanscan12.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://Sanscan12.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>C# 学习笔记</title>
    <link href="https://sanscan12.github.io/posts/7cc9.html"/>
    <id>https://sanscan12.github.io/posts/7cc9.html</id>
    <published>2020-07-09T16:00:00.000Z</published>
    <updated>2020-07-10T05:50:47.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-的开始"><a href="#C-的开始" class="headerlink" title="C#的开始"></a>C#的开始</h1><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>命名空间是程序的内部的组织系统，向外公开的组织系统</p><blockquote><p>命名空间好比是不同储存的仓库，using关键字 就像把仓库的钥匙，命名空间的名称可以对应着仓库名称，特定的钥匙可以打开指定的仓库名称，从而在仓库中获取所需的物品</p></blockquote><p><strong>using系统命名空间</strong></p><p>引入系统空间来使用</p><pre class="line-numbers language-C#"><code class="language-C#">using [命名空间名称]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>namespace用户自定义命名空间</strong></p><p>自行创建的命名空间，可以控制空间内里的类和方法，可以引用 用户自定义命名空间 里的 类和方法 </p><pre class="line-numbers language-C#"><code class="language-C#">namespace [命名空间名];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>一种数据结构，存储数据成员、方法成员和其它类等内容，便于调用</p><pre class="line-numbers language-C#"><code class="language-C#">[类修饰符] class [类名] [基类 或 接口]{    [类体，内容区块]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Main方法"><a href="#Main方法" class="headerlink" title="Main方法"></a>Main方法</h2><p>Main方法是程序的入口点，程序中必须有一个Main方法</p><pre class="line-numbers language-C#"><code class="language-C#">static void Main(string[] args){    [方法体，内容区块]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>Main方法创建要求：</strong></p><ul><li>方法必须静态 static </li><li>方法名Main 首字母必须为大写</li><li>返回值是 void 或 int</li><li>命令行参数可选（在使用命令行参数的使用）</li></ul></blockquote><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>标识符用来标识 类名、变量名、方法名、数组名、文件名的有效字符序列</p><blockquote><p><strong>命名规则：</strong></p><ul><li>首字母必须为 字母 或 下划线 <code>_</code></li><li>其余部分可以有：字母、数字、下划线 <code>_</code></li></ul></blockquote><p><strong>程序命名规范</strong> （好习惯）</p><p>项目名：公司+产品名</p><p>命名空间名：公司名称 / 产品名称</p><p>接口名：名称前缀加 字母 <code>I</code>（大写I）</p><p>类名：功能以及操作的说明</p><p>方法名：动宾短语，行为的说明</p><p>成员变量：名称前缀加 字符 <code>_</code> （下划线）</p><h1 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h1><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C-的开始&quot;&gt;&lt;a href=&quot;#C-的开始&quot; class=&quot;headerlink&quot; title=&quot;C#的开始&quot;&gt;&lt;/a&gt;C#的开始&lt;/h1&gt;&lt;h2 id=&quot;命名空间&quot;&gt;&lt;a href=&quot;#命名空间&quot; class=&quot;headerlink&quot; title=&quot;命名空间&quot;
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://Sanscan12.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="笔记" scheme="https://Sanscan12.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="C#" scheme="https://Sanscan12.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>05Java 接口继承多态篇</title>
    <link href="https://sanscan12.github.io/posts/b142.html"/>
    <id>https://sanscan12.github.io/posts/b142.html</id>
    <published>2020-07-04T16:00:00.000Z</published>
    <updated>2020-07-27T02:02:11.914Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h1><p>子类可以继承父类原有的属性和方法，也可以增加父类没有的属性和方法，还可以重写父类中的某些方法</p><blockquote><p><strong>知识点：</strong></p><ul><li>父类继承</li><li>父类方法重写以及修饰权限的访问</li><li>super关键字</li><li>多父类的继承</li></ul></blockquote><p><strong>super关键字</strong></p><p>super关键字可以调用父类的属性和方法。<br><code>super();</code>语句调用父类构造方法<br><code>super.方法名;</code> 语句调用父类的方法<br><code>super.属性;</code> 语句调用父类的属性（变量）</p><p>以下代码有 方法继承、super关键字的使用、方法重写、构造方法的调用</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化</span>        Computer com <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Notebook not <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Notebook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Tablet pan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tablet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------继承的使用----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//父类自身方法、属性</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span>Display<span class="token punctuation">)</span><span class="token punctuation">;</span>        com<span class="token punctuation">.</span><span class="token function">openUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//子类继承方法、属性</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>not<span class="token punctuation">.</span>Display<span class="token punctuation">)</span><span class="token punctuation">;</span>        not<span class="token punctuation">.</span><span class="token function">openUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//子类继承方法、属性</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pan<span class="token punctuation">.</span>Display<span class="token punctuation">)</span><span class="token punctuation">;</span>        pan<span class="token punctuation">.</span><span class="token function">openUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//子类自身的方法、属性</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pan<span class="token punctuation">.</span>Battery<span class="token punctuation">)</span><span class="token punctuation">;</span>        pan<span class="token punctuation">.</span><span class="token function">Network</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//无法调用</span><span class="token comment" spellcheck="true">//    com.myComputer();</span><span class="token comment" spellcheck="true">//    pan.myComputer();</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------方法重写----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        not<span class="token punctuation">.</span><span class="token function">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//以重写的方法</span>        pan<span class="token punctuation">.</span><span class="token function">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------super关键字的使用----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span><span class="token function">Welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>not<span class="token punctuation">.</span><span class="token function">Welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pan<span class="token punctuation">.</span><span class="token function">Welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        not<span class="token punctuation">.</span><span class="token function">Super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------构造方法调用----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Computer no1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token string">"联想电脑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Notebook no2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Notebook</span><span class="token punctuation">(</span><span class="token string">"雷蛇笔记本电脑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Tablet no3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tablet</span><span class="token punctuation">(</span><span class="token string">"苹果平板电脑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//电脑类</span><span class="token keyword">class</span> <span class="token class-name">Computer</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//最顶端的类</span>    String name <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//电脑类的构造方法</span>    <span class="token keyword">public</span> <span class="token function">Computer</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用时输出电脑name</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//存在有参数的构造方法，编译器不会自动创建无参数构造方法</span>    <span class="token keyword">public</span> <span class="token function">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//手动创建无参构造方法</span>    String Display <span class="token operator">=</span> <span class="token string">"液晶显示屏"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">openUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打开电脑，请稍等····"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//限于本类访问的方法 （其他类无法访问、继承的方法）</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">myComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我的电脑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">Welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"欢迎使用"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//笔记本电脑类</span><span class="token keyword">class</span> <span class="token class-name">Notebook</span> <span class="token keyword">extends</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//继承电脑类（父类）</span>    String name <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//笔记本电脑类构造方法</span>    <span class="token keyword">public</span> <span class="token function">Notebook</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用电脑类（父类）的构造方法</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//存在有参数的构造方法，编译器不会自动创建无参数构造方法</span>    <span class="token keyword">public</span> <span class="token function">Notebook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//手动创建无参构造方法</span>    <span class="token comment" spellcheck="true">//使用super关键字调用电脑类（父类）方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用了电脑类属性(Display)："</span><span class="token operator">+</span><span class="token keyword">super</span><span class="token punctuation">.</span>Display<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用了电脑类方法openUp()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">openUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"可折叠电脑！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment" spellcheck="true">//重写电脑类（父类）的Welcome()方法</span>    <span class="token keyword">public</span> String  <span class="token function">Welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//继承电脑类（父类）数据并添加返回</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">Welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"笔记本电脑"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//平板电脑类</span><span class="token keyword">class</span> <span class="token class-name">Tablet</span> <span class="token keyword">extends</span> <span class="token class-name">Notebook</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//继承笔记本电脑类</span>    String name <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//平板笔记本电脑类（父类）构造方法</span>    <span class="token keyword">public</span> <span class="token function">Tablet</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用笔记本电脑类（父类）的构造方法</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//存在有参数的构造方法，编译器不会自动创建无参数构造方法</span>    <span class="token keyword">public</span> <span class="token function">Tablet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//手动创建无参构造方法</span>    String Battery <span class="token operator">=</span> <span class="token string">"5000毫安"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Network</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打开数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment" spellcheck="true">//重写笔记本电脑类（父类）的Function()方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不可折叠电脑！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment" spellcheck="true">//重写电脑类（最顶父类）的Welcome()方法</span>    <span class="token keyword">public</span> String  <span class="token function">Welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//继承笔记本电脑类（父类）数据并添加返回</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">Welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"平板电脑"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误示范。（继承笔记本电脑类已修改的数据）</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">---------继承的使用----------液晶显示屏打开电脑，请稍等····液晶显示屏打开电脑，请稍等····液晶显示屏打开电脑，请稍等····5000毫安打开数据---------方法重写----------可折叠电脑！！不可折叠电脑！！---------super关键字的使用----------欢迎使用欢迎使用笔记本电脑欢迎使用笔记本电脑平板电脑调用了电脑类属性(Display)：液晶显示屏调用了电脑类方法(Display)打开电脑，请稍等····---------构造方法调用----------联想电脑雷蛇笔记本电脑苹果平板电脑<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>*<em>注意 : *</em></p><ul><li>Java语言中，一个类只可以有一个父类（可以层叠继承）</li><li>子类不仅会覆盖父类的方法，还会覆盖父类的属性</li><li>父类无参构造方法可自动调用，有参构造方法只能使用 super关键字 调用父类构造方法</li><li>用 private 写的方法，其他类无法调用和重写</li></ul></blockquote><h1 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h1><p>Object类是所有类的父类，是最顶层的类，定义类时可省略 <code>extends Object</code> 关键字 ，任何类都可以重写Object类中的方法</p><p><strong>Object方法</strong></p><p><font color = #05ffdc>Object.getClass（） </font> 返回对象执行时的Class实例</p><p><font color = #05ffdc>Object.toString（） </font> 以字符串形式返回对象</p><p><font color = #05ffdc>Object.equals（Object val） </font> 比较两对象的引用是否相等（内容）</p><blockquote><p>equals（）方法比较内容，<code>==</code> 比较对象引用的地址</p></blockquote><p>以下代码 Object方法测试</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"字符串"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//getClass()方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------getClass()方法--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Object tmp <span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//toString()方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------toString()方法--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Object tmp <span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Object tmp <span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//equals()方法</span>        Object no1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object no2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object no3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------equals()方法--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>no1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>no1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>no3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>no1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>no1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>no2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">---------getClass()方法--------class java.lang.Objectclass java.lang.Stringclass Democlass java.lang.Integer---------toString()方法--------java.lang.Object@10f87f48字符串Demo@b4c966a12-----------------java.lang.Object@10f87f48字符串Demo@b4c966a12---------equals()方法--------truetruetruefalse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="对象类型的转换"><a href="#对象类型的转换" class="headerlink" title="对象类型的转换"></a>对象类型的转换</h1><h2 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h2><p>向上转型是子类对象赋值给父类类型的变量 （子类 → 父类）</p><h2 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h2><p>向下转型是将比较抽象的类转换为较具体的类（父类 → 子类）</p><blockquote><p>转换的前提继承父类的子类必须是它本身</p></blockquote><p>以下代码 上下转型以及测试例子</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//向上转型</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------向上转型---------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Animal no1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">,</span><span class="token string">"Jak"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//向下转型</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------向下转型---------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Animal no2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">,</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Animal no3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">,</span><span class="token string">"Jak"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Animal no4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rabbit</span><span class="token punctuation">(</span><span class="token string">"Rabbit"</span><span class="token punctuation">,</span><span class="token string">"Tt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//yes 为向下转型成功</span><span class="token comment" spellcheck="true">//      Dog dg = (Dog)no2;         //no</span>        Dog dg2 <span class="token operator">=</span> <span class="token punctuation">(</span>Dog<span class="token punctuation">)</span>no3<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//yes</span><span class="token comment" spellcheck="true">//      Dog dg3 = (Dog)no4;        //no</span><span class="token comment" spellcheck="true">//      Rabbit rm = (Rabbit)no2;      //no</span><span class="token comment" spellcheck="true">//      Rabbit rm2 = (Rabbit)no3;     //no</span>        Rabbit rm3 <span class="token operator">=</span> <span class="token punctuation">(</span>Rabbit<span class="token punctuation">)</span>no4<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//yes</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//动物类</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Animal</span><span class="token punctuation">(</span>String type<span class="token punctuation">,</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我的宠物是"</span><span class="token operator">+</span>type<span class="token operator">+</span><span class="token string">" , 名叫："</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//小狗类</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String type<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//兔子类</span><span class="token keyword">class</span> <span class="token class-name">Rabbit</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Rabbit</span><span class="token punctuation">(</span>String type<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">-----------向上转型---------我的宠物是dog , 名叫：Jak-----------向下转型---------我的宠物是dog , 名叫：tom我的宠物是dog , 名叫：Jak我的宠物是Rabbit , 名叫：Tt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="instanceof关键字"><a href="#instanceof关键字" class="headerlink" title="instanceof关键字"></a>instanceof关键字</h1><p>instanceof关键字是判断父类对象是否为子类对象的实例，是否继承该子类</p><pre class="line-numbers language-java"><code class="language-java">myobject <span class="token keyword">instanceof</span> <span class="token class-name">ExampleClass</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>myobject：某类的对象引用</p><p>ExampleClass：某类名称 / 接口名称</p></blockquote><p>以下代码 instanceof关键字的使用</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">E</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">E</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> ars<span class="token punctuation">)</span> <span class="token punctuation">{</span>        C c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c是否继承A父类?"</span><span class="token operator">+</span><span class="token punctuation">(</span>c <span class="token keyword">instanceof</span> <span class="token class-name">A</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c是否继承B父类?"</span><span class="token operator">+</span><span class="token punctuation">(</span>c <span class="token keyword">instanceof</span> <span class="token class-name">B</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c是否调用E接口?"</span><span class="token operator">+</span><span class="token punctuation">(</span>c <span class="token keyword">instanceof</span> <span class="token class-name">E</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        B b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\nb是否继承C父类?"</span><span class="token operator">+</span><span class="token punctuation">(</span>b <span class="token keyword">instanceof</span> <span class="token class-name">C</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b是否继承A父类?"</span><span class="token operator">+</span><span class="token punctuation">(</span>b <span class="token keyword">instanceof</span> <span class="token class-name">A</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">c是否继承A父类?truec是否继承B父类?truec是否调用E接口?trueb是否继承C父类?falseb是否继承A父类?true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h1><p>方法重载是在同一个类中允许多个同名方法，只要方法参数个数、类型、顺序不同即可！</p><blockquote><p><strong>不同条件：</strong></p><ul><li>参数个数的不同</li><li>参数顺序的不同</li><li>参数类型的不同</li><li><code>...</code>定义不定长的参数个数</li></ul></blockquote><p>以下代码 方法从写及方法的多样性</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Demo d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> a <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        d<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用了method( int )的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//参数个数的不同</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用了method( int , int )的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//参数类型的不同</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">long</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用了method( int , long )的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//参数顺序的不同</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用了method( long , int )的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//不定长度参数方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用了method(int...)的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> tmp <span class="token operator">:</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>tmp<span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">long</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用了method(long,int...)的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> tmp <span class="token operator">:</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>tmp<span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">调用了method( int )的方法调用了method( int , int )的方法调用了method( int , long )的方法调用了method( long , int )的方法调用了method(int...)的方法1    2    3    4    5    6    7    8    调用了method(long,int...)的方法2    3    4    5    6    7    8    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>多态可以根据不同类在同一变量，同一方法，执行结果不同的作用</p><p>以下代码 多态测试</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Animals ton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"Dog(狗)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ton<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Animals Jak <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rabbit</span><span class="token punctuation">(</span><span class="token string">"Rabbit(兔子)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Jak<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Animals Yin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Eagle</span><span class="token punctuation">(</span><span class="token string">"Eagle(鹰)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Yin<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//动物类</span><span class="token keyword">class</span> <span class="token class-name">Animals</span> <span class="token punctuation">{</span>    String type<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Animals</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//移动的方法</span>    <span class="token keyword">public</span> String <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">(</span>type<span class="token operator">+</span><span class="token string">"的移动方式："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//狗类 继承 动物类</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animals</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment" spellcheck="true">//重写移动方法</span>    <span class="token keyword">public</span> String <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"跑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//兔子类 继承 动物类</span><span class="token keyword">class</span> <span class="token class-name">Rabbit</span> <span class="token keyword">extends</span> <span class="token class-name">Animals</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Rabbit</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment" spellcheck="true">//重写移动方法</span>    <span class="token keyword">public</span> String <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"跳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//鹰类 继承 动物类</span><span class="token keyword">class</span> <span class="token class-name">Eagle</span> <span class="token keyword">extends</span> <span class="token class-name">Animals</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Eagle</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment" spellcheck="true">//重写移动方法</span>    <span class="token keyword">public</span> String <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"飞翔"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">Dog(狗)的移动方式：跑Rabbit(兔子)的移动方式：跳Eagle(鹰)的移动方式：飞翔<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><p>抽象类一般定义在父类，用来进行继承和多态的处理，该抽象类不能被实例化，需要子类具体化</p><p><strong>abstract关键字</strong> </p><p>abstract关键字是定义抽象类的关键字</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Text</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>抽象方法</strong></p><p>抽象方法没有方法体，本身是没有意义，需要被继承的子类重写抽象方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Text</span> <span class="token punctuation">{</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">textAbstract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>抽象方法存在前提，在抽象方法里的类也是抽象类</li><li>抽象方法重写才有意义</li><li>抽象类不能实例化</li></ul></blockquote><p>以下代码 抽象类和方法的使用</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Teachers Tom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Englishteachers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Teachers Jak <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mathteachers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        Teachers Tea = new Teachers();</span>        Tom<span class="token punctuation">.</span><span class="token function">teaching</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Jak<span class="token punctuation">.</span><span class="token function">teaching</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//教师抽象类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Teachers</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//讲课抽象方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">teaching</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//英语老师 继承 教师抽象类</span><span class="token keyword">class</span> <span class="token class-name">Englishteachers</span> <span class="token keyword">extends</span> <span class="token class-name">Teachers</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment" spellcheck="true">//重写讲课方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">teaching</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"英语老师，讲课"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//数学老师 继承 教师抽象类</span><span class="token keyword">class</span> <span class="token class-name">Mathteachers</span> <span class="token keyword">extends</span> <span class="token class-name">Teachers</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment" spellcheck="true">//重写讲课方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">teaching</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数学老师，讲课"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">英语老师，讲课数学老师，讲课<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>个人习题</strong></p><blockquote><p><strong>题目：</strong></p><p>动物类（抽象）里有鸟类（抽象）里有小鸡（具体） 和 鹰（具体），写出他们的移动方式，皮毛类型</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Birds lan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Eagle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鹰的属性："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"移动方式："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lan<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"毛皮样式："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lan<span class="token punctuation">.</span><span class="token function">Fur</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Birds tom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小鸡的属性："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"移动方式："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tom<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"毛皮样式："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tom<span class="token punctuation">.</span><span class="token function">Fur</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n----------测试--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Animals lan2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Eagle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鹰的属性："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"移动方式："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lan2<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        System.out.print("毛皮样式：");</span><span class="token comment" spellcheck="true">//        lan2.Fur();</span>        <span class="token comment" spellcheck="true">/*            需要向下转型             ((Eagle) lan2).Fur();             ((Birds) lan2).Fur();            才可以调用        * */</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Animals tom2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小鸡的属性："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"移动方式："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tom2<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        System.out.print("毛皮样式：");</span><span class="token comment" spellcheck="true">//        tom2.Fur();</span>        <span class="token comment" spellcheck="true">/*            需要向下转型             ((Eagle) lan2).Fur();             ((Birds) lan2).Fur();            才可以调用        * */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//动物抽象类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animals</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Animals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建了一个动物"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//移动抽象方法</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//鸟</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Birds</span> <span class="token keyword">extends</span> <span class="token class-name">Animals</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Birds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建了一个鸟类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//毛皮样式抽象方法</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Fur</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//鹰</span><span class="token keyword">class</span> <span class="token class-name">Eagle</span> <span class="token keyword">extends</span> <span class="token class-name">Birds</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Eagle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建了一个鹰"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"飞翔"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Fur</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"羽毛"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//小鸡</span><span class="token keyword">class</span> <span class="token class-name">Chick</span> <span class="token keyword">extends</span> <span class="token class-name">Birds</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Chick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建了一个小鸡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"步行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Fur</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"细毛"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">创建了一个动物创建了一个鸟类创建了一个鹰鹰的属性：移动方式：飞翔毛皮样式：羽毛创建了一个动物创建了一个鸟类创建了一个小鸡小鸡的属性：移动方式：步行毛皮样式：细毛----------测试---------创建了一个动物创建了一个鸟类创建了一个鹰鹰的属性：移动方式：飞翔创建了一个动物创建了一个鸟类创建了一个小鸡小鸡的属性：移动方式：步行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>接口是抽象类的延伸，能批量设置部分子类独有方法</p><p><strong>interface关键字</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Text</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fangfa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>interface：定义接口关键字<br>Text：接口名称</p></blockquote><p><strong>接口 继承与多继承</strong></p><p>子接口被调用时，该子接口的父接口全部方法都要继承，都要调用</p><p>一个类可以实现多个继承接口，在interface关键字后面逗号分隔即可</p><blockquote><p><strong>注意：</strong></p><ul><li>接口中的方法必须定义为 public 或 abstract （抽象方法）形式 ，Java 默认修饰 public</li><li>接口定义的字段都是为静态（static）和常量（final）</li><li>接口内的方法可以省去 abstract（抽象）关键字</li><li>实现多接口时，实例化对象类型为它的本身，否则要转换</li></ul></blockquote><p>以下代码 接口的调用</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">DrawInterface</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 绘制接口</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Ddc</span> <span class="token keyword">extends</span> <span class="token class-name">DrawInterface</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Ddcb</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">csb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DrawInterface d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Qua</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用重写接口方法</span>        d<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n重新测试："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例化类本身</span>        Qua q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Qua</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用类本身的方法</span>        q<span class="token punctuation">.</span><span class="token function">benshen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用重写接口方法</span>        q<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DrawInterface d2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d2<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Ddc d3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Triangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d3<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d3<span class="token punctuation">.</span><span class="token function">cs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例对象本身调用接口方法</span>        Triangle t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Triangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">csb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//三角形类</span><span class="token keyword">class</span> <span class="token class-name">Triangle</span> <span class="token keyword">implements</span> <span class="token class-name">Ddc</span> <span class="token punctuation">,</span>Ddcb<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//实现多接口继承</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"绘制三角形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试继承"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">csb</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试继承2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//四边形类</span><span class="token keyword">class</span> <span class="token class-name">Qua</span> <span class="token keyword">implements</span> <span class="token class-name">DrawInterface</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"绘制四边形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">benshen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是四边形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//正方形类 继承 四边形</span><span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Qua</span> <span class="token keyword">implements</span> <span class="token class-name">DrawInterface</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"绘制正方形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">绘制四边形重新测试：我是四边形绘制四边形绘制正方形绘制三角形测试继承测试继承2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;类的继承&quot;&gt;&lt;a href=&quot;#类的继承&quot; class=&quot;headerlink&quot; title=&quot;类的继承&quot;&gt;&lt;/a&gt;类的继承&lt;/h1&gt;&lt;p&gt;子类可以继承父类原有的属性和方法，也可以增加父类没有的属性和方法，还可以重写父类中的某些方法&lt;/p&gt;
&lt;blockquote
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://Sanscan12.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="笔记" scheme="https://Sanscan12.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://Sanscan12.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>04Java 数字处理篇</title>
    <link href="https://sanscan12.github.io/posts/d1eb.html"/>
    <id>https://sanscan12.github.io/posts/d1eb.html</id>
    <published>2020-06-30T16:00:00.000Z</published>
    <updated>2020-07-27T02:01:59.114Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数字格式化"><a href="#数字格式化" class="headerlink" title="数字格式化"></a>数字格式化</h1><p>数字格式化是用模板控制内容数字类型，用到DecimalFormat类进行格式化</p><p>DecimalFormat类有特殊字符 构成的格式化模板，是数字会按照特殊字符规则进行匹配</p><p>DecimalFormat类中特殊字符的说明</p><table><thead><tr><th>字符</th><th>说明</th></tr></thead><tbody><tr><td>0</td><td>一个数字，不存在则显示0</td></tr><tr><td>#</td><td>一个数字，存在则显示，否则不显示</td></tr><tr><td>.</td><td>小数分隔符或货币小数分隔符</td></tr><tr><td>-</td><td>符号</td></tr><tr><td>,</td><td>分组分隔符</td></tr><tr><td>E</td><td>分隔科学计数法中的尾数和指数</td></tr><tr><td>%</td><td>存在数字的前缀或后缀，乘100显示百分数</td></tr><tr><td>\u2030</td><td>存在数字的前缀或后缀，乘1000显示千分数</td></tr><tr><td>\u00A4</td><td>存在数字的前缀或后缀，显示货币记号</td></tr><tr><td>‘</td><td>视为普通单引号处理</td></tr></tbody></table><p><strong>DecimalFormat类方法</strong></p><p><font color = #05ffdc>DecimalFormat.applyPattern（String patten） </font> 设置数字格式化模板</p><p><font color = #05ffdc>DecimalFormat.format（value） </font> 转换模板样式</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>DecimalFormat<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//有DecimalFormat包的调用</span><span class="token keyword">static</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Sformat</span><span class="token punctuation">(</span>String patten<span class="token punctuation">,</span> <span class="token keyword">double</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//pattem：模板，value：数值</span>        <span class="token comment" spellcheck="true">//实例化对象</span>        DecimalFormat n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span>patten<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//进行格式化的方法 format(double value)</span>        String out <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"模板："</span><span class="token operator">+</span>patten<span class="token operator">+</span><span class="token string">"，数值 "</span><span class="token operator">+</span>value<span class="token operator">+</span><span class="token string">"\n结果："</span><span class="token operator">+</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Sformat2</span><span class="token punctuation">(</span>String patten<span class="token punctuation">,</span> <span class="token keyword">double</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//pattem：模板，value：数值</span>        <span class="token comment" spellcheck="true">//实例化对象</span>        DecimalFormat n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span>patten<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置格式化模板</span>        n<span class="token punctuation">.</span><span class="token function">applyPattern</span><span class="token punctuation">(</span>patten<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"模板："</span><span class="token operator">+</span>patten<span class="token operator">+</span><span class="token string">"，数值 "</span><span class="token operator">+</span>value<span class="token operator">+</span><span class="token string">"\n结果："</span><span class="token operator">+</span>n<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//静态调用方法，无需实例化</span>        <span class="token function">Sformat</span><span class="token punctuation">(</span><span class="token string">"###,###,###"</span><span class="token punctuation">,</span><span class="token number">12345.6789</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Sformat</span><span class="token punctuation">(</span><span class="token string">"00000000.###kg"</span><span class="token punctuation">,</span><span class="token number">12345.6789</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Sformat</span><span class="token punctuation">(</span><span class="token string">"000000.000"</span><span class="token punctuation">,</span><span class="token number">123.45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Sformat2</span><span class="token punctuation">(</span><span class="token string">"#.###%"</span><span class="token punctuation">,</span><span class="token number">0.789</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Sformat2</span><span class="token punctuation">(</span><span class="token string">"###.##"</span><span class="token punctuation">,</span><span class="token number">123456.789</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Sformat2</span><span class="token punctuation">(</span><span class="token string">"0.00\u2030"</span><span class="token punctuation">,</span><span class="token number">0.789</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">模板：###,###,###，数值 12345.6789结果：12,346模板：00000000.###kg，数值 12345.6789结果：00012345.679kg模板：000000.000，数值 123.45结果：000123.450------------模板：#.###%，数值 0.789结果：78.9%模板：###.##，数值 123456.789结果：123456.79模板：0.00‰，数值 0.789结果：789.00‰<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="数字运算"><a href="#数字运算" class="headerlink" title="数字运算"></a>数字运算</h1><p><strong>Math类</strong></p><p>Math类提供了数学函数方法</p><blockquote><ul><li>不用调用包</li><li>都是静态方法</li></ul></blockquote><p><strong>常用数学运算方法</strong></p><h2 id="三角函数方法"><a href="#三角函数方法" class="headerlink" title="三角函数方法"></a>三角函数方法</h2><p><font color = #05ffdc>Math.sin（double a） </font> 返回三角正弦</p><p><font color = #05ffdc>Math.cos（double a） </font> 返回三角余弦</p><p><font color = #05ffdc>Math.tan（double a） </font> 返回三角正切</p><p><font color = #05ffdc>Math.asin（double a） </font> 返回一个反正弦</p><p><font color = #05ffdc>Math.acos（double a） </font> 返回一个反余弦</p><p><font color = #05ffdc>Math.atan（double a） </font> 返回一个反正切</p><p><font color = #05ffdc>Math.toRadians（double a） </font> 角度转换为弧度</p><p><font color = #05ffdc>Math.toDegrees（double a） </font> 弧度转换为角度</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"PI："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.sin（double a） 返回三角正弦(90)："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>PI<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.cos（double a） 返回三角余弦："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.tan（double a） 返回三角正切："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">tan</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>PI<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取2点平方根与2商的反正弦</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.asin（double a） 返回一个反正弦："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">asin</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取2点平方根与2商的反余弦</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.acos（double a） 返回一个反余弦："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">acos</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.atan（double a） 返回一个反正切："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">atan</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.toRadians（double a） 角度转换为弧度："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">toRadians</span><span class="token punctuation">(</span><span class="token number">120.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.toDegrees（double a） 弧度转换为角度："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">toDegrees</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>PI<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">PI：3.141592653589793Math.sin（double a） 返回三角正弦(90)：1.0Math.cos（double a） 返回三角余弦：1.0Math.tan（double a） 返回三角正切：1.7320508075688767Math.asin（double a） 返回一个反正弦：0.7853981633974484Math.acos（double a） 返回一个反余弦：0.7853981633974483Math.atan（double a） 返回一个反正切：0.7853981633974483Math.toRadians（double a） 角度转换为弧度：2.0943951023931953Math.toDegrees（double a） 弧度转换为角度：90.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="指数函数方法"><a href="#指数函数方法" class="headerlink" title="指数函数方法"></a>指数函数方法</h2><p><font color = #05ffdc>Math.exp（double a） </font> 获取e的a次方</p><p><font color = #05ffdc>Math.log（double a） </font> 取自然对数，即取lna的值</p><p><font color = #05ffdc>Math.log10（double a） </font> 取底数为10的对数</p><p><font color = #05ffdc>Math.sqrt（double a） </font> 取a的平方根，a不能为负数</p><p><font color = #05ffdc>Math.cbrt（double a） </font> 取a的立方根</p><p><font color = #05ffdc>Math.pow（double a,double b） </font> 取a的b次方</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.exp（double a）  获取e的a次方："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.log（double a）  取自然对数，即取lna的值："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.log10（double a）取底数为10的对数："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">log10</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.sqrt（double a）  取a的平方根，a不能为负数："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.cbrt（double a）  取a的立方根："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">cbrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.pow（double a）  取a的b次方："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">Math.exp（double a）  获取e的a次方：7.38905609893065Math.log（double a）  取自然对数，即取lna的值：0.6931471805599453Math.log10（double a）取底数为10的对数：0.3010299956639812Math.sqrt（double a）  取a的平方根，a不能为负数：1.4142135623730951Math.cbrt（double a）  取a的立方根：1.2599210498948732Math.pow（double a）  取a的b次方：8.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="取整函数方法"><a href="#取整函数方法" class="headerlink" title="取整函数方法"></a>取整函数方法</h2><p><font color = #05ffdc> </font> <font color = #05ffdc>Math.ceil（double a） </font> 返回大于等于参数的最小整数</p><p> <font color = #05ffdc>Math.floor（double a） </font> 返回小于等于参数的最大整数</p><p> <font color = #05ffdc>Math.rint（double a） </font> 返回与参数接近的整数，如果两整数一样，则取偶数</p><p> <font color = #05ffdc>Math.round（float a） </font> 返回参数加 0.5 后与参数接近的整数</p><p> <font color = #05ffdc>Math.round（double a） </font> 返回参数加 0.5 后与参数接近的整数并转换为长整型(double)</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.ceil（double a） 返回大于等于参数的最小整数："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">5.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.floor（double a）返回小于等于参数的最大整数："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.rint（double a） 返回与参数接近的整数，如果两整数一样，则取偶数："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">rint</span><span class="token punctuation">(</span><span class="token number">2.7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.round（float a） 返回参数加 0.5 后与参数接近的整数："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">3.4f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.round（double a） 返回参数加 0.5 后与参数接近的整数并转换为长整型(double)："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">Math.ceil（double a） 返回大于等于参数的最小整数：6.0Math.floor（double a）返回小于等于参数的最大整数：2.0Math.rint（double a） 返回与参数接近的整数，如果两整数一样，则取偶数：3.0Math.round（float a） 返回参数加 0.5 后与参数接近的整数：3Math.round（double a） 返回参数加 0.5 后与参数接近的整数并转换为长整型(double)：3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最大、最小、绝对值函数方法"><a href="#最大、最小、绝对值函数方法" class="headerlink" title="最大、最小、绝对值函数方法"></a>最大、最小、绝对值函数方法</h2><p><font color = #05ffdc>Math.max（double a ，double b） </font> 取a ，b 较大值，参数整型</p><p><font color = #05ffdc>Math.min（int a ，int b） </font> 取a ，b 较小值，参数整型</p><p><font color = #05ffdc>Math.min（long a ，long b） </font>  取a ，b 较小值，参数长整型</p><p><font color = #05ffdc>Math.min（float a ，float b） </font>  取a ，b 较小值，参数浮点型</p><p><font color = #05ffdc>Math.min（doubl a ，double b） </font>  取a ，b 较小值，参数双精度型</p><p><font color = #05ffdc>Math.abs（int a） </font> 返回整型参数的绝对值</p><p><font color = #05ffdc>Math.abs（long a） </font> 返回长整型参数的绝对值</p><p><font color = #05ffdc>Math.abs（float a） </font> 返回浮点型参数的绝对值</p><p><font color = #05ffdc>Math.abs（double a） </font> 返回双精度型参数的绝对值</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.max（double a ，double b） 取a ，b 较大值，参数整型："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">4.3</span><span class="token punctuation">,</span><span class="token number">4.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.min（int a ，int b） 取a ，b 较小值，参数整型："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.abs（double a） 返回双精度型参数的绝对值："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果 </p><pre class="line-numbers language-text"><code class="language-text">Math.max（double a ，double b） 取a ，b 较大值，参数整型：4.3Math.min（int a ，int b） 取a ，b 较小值，参数整型：3Math.abs（double a） 返回双精度型参数的绝对值：5.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h1><h2 id="Math-random（）方法"><a href="#Math-random（）方法" class="headerlink" title="Math.random（）方法"></a>Math.random（）方法</h2><p>Math类中的random（）方法，用于产生随机数字，该方法默认生成 0 ~ 1 之间的double型随机数</p><p>以下方法可以从0 控制的范围<br>$$<br>Math.random()*m<br>$$</p><p>$$<br>0*m &lt;= double值 * m &lt; 1 * m<br>$$</p><p>$$<br>0 &lt;= double值 &lt; m<br>$$</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1 - 100 的随机数："</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"50 - 100 的随机数："</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//'a'+Math.random()*('z'-'a'+1) ：后面加1原因因为要包含字母‘z’</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a - z 的随机字符："</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token string">'z'</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">1 - 100 的随机数：8450 - 100 的随机数：64a - z 的随机字符：s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Random类"><a href="#Random类" class="headerlink" title="Random类"></a>Random类</h2><p>Java提供有Java.util.Random类，可以通过Random对象创建随机数生成器</p><pre class="line-numbers language-java"><code class="language-java">Random r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span>seedValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>seedValue：系统时间作为随机数生成的种子</p><p><strong>Random方法</strong></p><p><font color = #05ffdc>Random.nextInt（） </font> 返回随机整数</p><p><font color = #05ffdc>Random.nextInt（int n） </font> 返回大于等于0且小于n的随机数</p><p><font color = #05ffdc>Random.nextLong（） </font> 返回随机数长整型</p><p><font color = #05ffdc>Random.nextBoolean（）</font> 返回随机数布尔值</p><p><font color = #05ffdc>Random.nextFloat（） </font> 返回随机数浮点型</p><p><font color = #05ffdc>Random.nextDouble（） </font> 返回随机数双精度型</p><p><font color = #05ffdc>Random.nextGaussian（） </font> 返回概率密度为高斯分布的双精度值</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Random d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"nextInt（） 返回随机整数："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"nextInt（int n） 返回大于等于0且小于n的随机数(10)："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"nextLong（） 返回随机数长整型："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"nextBoolean（）返回随机数布尔值："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">nextBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"nextFloat（） 返回随机数浮点型："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">nextFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"nextDouble（） 返回随机数双精度型："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"nextGaussian（） 返回概率密度为高斯分布的双精度值："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">nextInt（） 返回随机整数：1697026804nextInt（int n） 返回大于等于0且小于n的随机数(10)：3nextLong（） 返回随机数长整型：-2264169696298848856nextBoolean（）返回随机数布尔值：falsenextFloat（） 返回随机数浮点型：0.7777471nextDouble（） 返回随机数双精度型：0.10485108224186857nextGaussian（） 返回概率密度为高斯分布的双精度值：0.22713289568100314<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="大数字运算"><a href="#大数字运算" class="headerlink" title="大数字运算"></a>大数字运算</h1><h2 id="BigInteger"><a href="#BigInteger" class="headerlink" title="BigInteger"></a>BigInteger</h2><p>java.math.BigInteger类 可以准确地表示任何大小的整型而不会丢失数据</p><ol><li>new BigInteger（String val）;    （val：是十进制字符串）</li><li>BigInteger.valueOf(Long);</li></ol><p>以上有两种方式获取 BigInteger对象 </p><h3 id="BigInteger方法"><a href="#BigInteger方法" class="headerlink" title="BigInteger方法"></a><strong>BigInteger方法</strong></h3><p><font color = #05ffdc>BigInteger.add（BigInteger val） </font> 加法运算</p><p><font color = #05ffdc>BigInteger.subtract（BigInteger val） </font> 减法运算</p><p><font color = #05ffdc>BigInteger.mulitply（BigInteger val）</font> 乘法运算</p><p><font color = #05ffdc>BigInteger.divide（BigInteger val）</font> 除法运算</p><p><font color = #05ffdc>BigInteger.remainder（BigInteger val）</font> 取余操作</p><p><font color = #05ffdc>BigInteger.divideAndRemainder（BigInteger val）</font> 用数组返回余数的商，结果：第一个为商，第二个为余数</p><p><font color = #05ffdc>BigInteger.pow（int n）</font> 取参数 n次方 的操作</p><p><font color = #05ffdc>BigInteger.negate（）</font> 取相反数</p><p><font color = #05ffdc>BigInteger.shiftLeft（int n）</font> 将数字左移n位，负数则右移</p><p><font color = #05ffdc>BigInteger.shiftRight（int n）</font> 将数字右移n位，负数则左移</p><p><font color = #05ffdc>BigInteger.and（BigInteger val）</font> 与 操作</p><p><font color = #05ffdc>BigInteger.or（BigInteger val）</font> 或 操作</p><p><font color = #05ffdc>BigInteger.compareTo（BigInteger val）</font> 数字比较</p><p><font color = #05ffdc>BigInteger.equals（Object x）</font> 判断内容是否相同</p><p><font color = #05ffdc>BigInteger.min（BigInteger val）</font> 返回较小值</p><p><font color = #05ffdc>BigInteger.max（BigInteger val）</font> 返回较大值</p><p><font color = #05ffdc>BigInteger.gcd（BigInteger val） </font> 返回最大公约数</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    BigInteger b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"999"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BigInteger b2 <span class="token operator">=</span> BigInteger<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">99999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigInteger.add（BigInteger val） 加法运算："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigInteger.subtract（BigInteger val） 减法运算："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigInteger.mulitply（BigInteger val）乘法运算："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigInteger.divide（BigInteger val）除法运算："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigInteger.remainder（BigInteger val）取余操作："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">remainder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"BigInteger.divideAndRemainder（BigInteger val）用数组返回余数的商，结果：第一个为商，第二个为余数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BigInteger<span class="token punctuation">[</span><span class="token punctuation">]</span> big <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">divideAndRemainder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>BigInteger tmp <span class="token operator">:</span> big<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>tmp<span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigInteger.pow（int n）取参数 n次方 的操作："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigInteger.negate（）取相反数："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">negate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigInteger.shiftLeft（int n）将数字左移n位，负数则右移2："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">shiftLeft</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigInteger.shiftLeft（int n）将数字左移n位，负数则右移-2："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">shiftLeft</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigInteger.shiftRight（int n）将数字右移n位，负数则左移2："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">shiftRight</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigInteger.shiftRight（int n）将数字右移n位，负数则左移-2："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">shiftRight</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"BigInteger.and（BigInteger val）与 操作："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"999"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"BigInteger.or（BigInteger val）或 操作："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b2<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"99999"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigInteger.compareTo（BigInteger val）数字比较999："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"999"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigInteger.compareTo（BigInteger val）数字比较99："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"99"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigInteger.equals（Object x）判断内容是否相同："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigInteger.min（BigInteger val）返回较小值："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigInteger.max（BigInteger val）返回较大值："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//new BigInteger("a").gcd(new BigInteger("b"));    a 与 b 的最大公约数！！！</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigInteger.gcd（BigInteger val）返回最大公约数："</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"23123213"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"2443512"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">BigInteger.add（BigInteger val） 加法运算：1000BigInteger.subtract（BigInteger val） 减法运算：998BigInteger.mulitply（BigInteger val）乘法运算：1998BigInteger.divide（BigInteger val）除法运算：333BigInteger.remainder（BigInteger val）取余操作：4BigInteger.divideAndRemainder（BigInteger val）用数组返回余数的商，结果：第一个为商，第二个为余数：199    4BigInteger.pow（int n）取参数 n次方 的操作：998001BigInteger.negate（）取相反数：-999BigInteger.shiftLeft（int n）将数字左移n位，负数则右移2：3996BigInteger.shiftLeft（int n）将数字左移n位，负数则右移-2：249BigInteger.shiftRight（int n）将数字右移n位，负数则左移2：249BigInteger.shiftRight（int n）将数字右移n位，负数则左移-2：3996BigInteger.and（BigInteger val）与 操作：yesBigInteger.or（BigInteger val）或 操作：noBigInteger.compareTo（BigInteger val）数字比较999：0BigInteger.compareTo（BigInteger val）数字比较99：1BigInteger.equals（Object x）判断内容是否相同：falseBigInteger.min（BigInteger val）返回较小值：999BigInteger.max（BigInteger val）返回较大值：99999BigInteger.gcd（BigInteger val）返回最大公约数：17<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h2><p>java.math.BigDecimal类 可以高精度浮动运算，支持任何精度的定点数</p><p><strong>BigDecimal构造方法</strong></p><ol><li>new BigDecimal（String val）</li><li>new BigDecima（double val）</li><li>BigDecima.valueOf（double val）</li></ol><p>以上有三种方式获取 BigDecimal对象 </p><p><strong>BigDecimal方法</strong></p><p><font color = #05ffdc>BigDecimal.add（BigDecimal val） </font> 加法运算</p><p><font color = #05ffdc>BigDecimal.subtract（BigDecimal val） </font> 减法运算</p><p><font color = #05ffdc>BigDecimal.multiply（BigDecimal val） </font> 乘法运算</p><p><font color = #05ffdc>BigDecimal.divide（BigDecimal val） </font> 除法运算</p><p><font color = #05ffdc>BigDecimal.divide（BigDecimal val , int n , int j） </font> 除法运算</p><blockquote><p>val：除数<br>i：小数位数<br>j：近似值处理模式</p></blockquote><table><thead><tr><th>处理模式</th><th>说明</th><th>定义值</th></tr></thead><tbody><tr><td>BigDecimal.ROUND_UP</td><td>商最后一位大0，进位，正负一样</td><td>0</td></tr><tr><td>BigDecimal.ROUND_DOWN</td><td>商最后一位直接省略</td><td>1</td></tr><tr><td>BigDecimal.ROUND_CEILING</td><td>商正数0处理，负数则1处理</td><td>2</td></tr><tr><td>BigDecimal.ROUND_FLOOR</td><td>商正数1处理，负数则0处理</td><td>3</td></tr><tr><td>BigDecimal.ROUND_HALF_UP</td><td>商最后一位，四舍五入，大于等于5进位，小于5省略</td><td>4</td></tr><tr><td>BigDecimal.ROUND_HALF_DOWN</td><td>商最后一位，四舍五入，大于5进位，小于等于5省略</td><td>5</td></tr><tr><td>BigDecimal.ROUND_HALF_EVEN</td><td>商的倒数第二位，奇数4处理，偶数5处理</td><td>6</td></tr></tbody></table><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BigDecimal b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"30.12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BigDecimal b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">40.12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BigDecimal b3 <span class="token operator">=</span> BigDecimal<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">50.12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigDecimal.add（BigDecimal val） 加法运算："</span><span class="token operator">+</span>b1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigDecimal.subtract（BigDecimal val） 减法运算："</span><span class="token operator">+</span>b1<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigDecimal.multiply（BigDecimal val） 乘法运算："</span><span class="token operator">+</span>b1<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BigDecimal d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigDecimal.divide（BigDecimal val） 除法运算："</span><span class="token operator">+</span>b3<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigDecimal.divide（BigDecimal val , int n , int j） 除法运算："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 0 ：ROUND_UP</span>        <span class="token comment" spellcheck="true">// 1 ：ROUND_DOWN</span>        <span class="token comment" spellcheck="true">// 2 ：ROUND_CEILING</span>        <span class="token comment" spellcheck="true">// 3 ：ROUND_FLOOR</span>        <span class="token comment" spellcheck="true">// 4 ：ROUND_HALF_UP</span>        <span class="token comment" spellcheck="true">// 5 ：ROUND_HALF_DOWN</span>        <span class="token comment" spellcheck="true">// 6 ：ROUND_HALF_EVEN</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"50.12/3 = "</span> <span class="token operator">+</span> b3<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"（0）50.12/3 = "</span> <span class="token operator">+</span> b3<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"（1）50.12/3 = "</span> <span class="token operator">+</span> b3<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"（2）50.12/3 = "</span> <span class="token operator">+</span> b3<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"（3）50.12/3 = "</span> <span class="token operator">+</span> b3<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"（4）50.12/3 = "</span> <span class="token operator">+</span> b3<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"（5）50.12/3 = "</span> <span class="token operator">+</span> b3<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"（6）50.12/3 = "</span> <span class="token operator">+</span> b3<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">BigDecimal.add（BigDecimal val） 加法运算：70.23999999999999744204615126363933086395263671875BigDecimal.subtract（BigDecimal val） 减法运算：-9.99999999999999744204615126363933086395263671875BigDecimal.multiply（BigDecimal val） 乘法运算：1208.4143999999999229544300760608166456222534179687500BigDecimal.divide（BigDecimal val） 除法运算：10.024BigDecimal.divide（BigDecimal val , int n , int j） 除法运算：50.12/3 = 16.70666666666666666667（0）50.12/3 = 16.706666666666666667（1）50.12/3 = 16.706666666666666666（2）50.12/3 = 16.706666666666666667（3）50.12/3 = 16.706666666666666666（4）50.12/3 = 16.706666666666666667（5）50.12/3 = 16.706666666666666667（6）50.12/3 = 16.706666666666666667<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数字格式化&quot;&gt;&lt;a href=&quot;#数字格式化&quot; class=&quot;headerlink&quot; title=&quot;数字格式化&quot;&gt;&lt;/a&gt;数字格式化&lt;/h1&gt;&lt;p&gt;数字格式化是用模板控制内容数字类型，用到DecimalFormat类进行格式化&lt;/p&gt;
&lt;p&gt;DecimalForm
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://Sanscan12.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="笔记" scheme="https://Sanscan12.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://Sanscan12.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>03Java 包装类篇</title>
    <link href="https://sanscan12.github.io/posts/d35a.html"/>
    <id>https://sanscan12.github.io/posts/d35a.html</id>
    <published>2020-06-21T16:00:00.000Z</published>
    <updated>2020-07-27T02:01:46.560Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h1><p><strong>Integer构造方法</strong></p><ol><li>new Integer（int number）</li><li>new Integer（String str）</li></ol><p>以上有两种方式获取 Integer对象</p><p><strong>Integer常量</strong></p><p><font color = #05ffdc>Integer.MAX_VALUE </font> 返回int型的最大值</p><p><font color = #05ffdc>Integer.MIN_VALUE  </font> 返回int型的最小值</p><p><font color = #05ffdc>Integer.SIZE </font> 用二进制补码形式表示 int位数</p><p><font color = #05ffdc>Integer.TYPE </font> 基本类型int</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"int最大值（max）："</span><span class="token operator">+</span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"int最小值（min）："</span><span class="token operator">+</span>Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"max："</span><span class="token operator">+</span>Integer<span class="token punctuation">.</span>SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"max："</span><span class="token operator">+</span>Integer<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">int最大值（max）：2147483647int最小值（min）：-2147483648max：32max：int<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Integer方法</strong></p><p><font color = #05ffdc>Integer.byteValue（） </font> 以 byte类型 返回</p><p><font color = #05ffdc>Integer.compareTo（Integer i） </font> 比较是否相同，两值相同则返回 0，对象小于 参数i 返回负值，否则为正值</p><p><font color = #05ffdc>Integer.intValue（） </font> 以 int类型 返回</p><p><font color = #05ffdc>Integer.shortValue（） </font> 以 short类型 返回</p><p><font color = #05ffdc>Integer.toString（） </font> 返回 Integer值 的 String对象，返回String</p><p><font color = #05ffdc>Integer.valueOf（String str） </font> 返回保存参数的 Integer对象</p><p><font color = #05ffdc>Integer.parseInt（String str） </font> 返回参数中的数值</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">no1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Integer n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"byteValue（） 以 byte类型 返回(12)："</span><span class="token operator">+</span>n<span class="token punctuation">.</span><span class="token function">byteValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"compareTo（Integer i）比较是否相同(12 v 10)："</span><span class="token operator">+</span>n<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"intValue（）以 int类型 返回："</span><span class="token operator">+</span>n<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"shortValue（）以 short类型 返回："</span><span class="token operator">+</span>n<span class="token punctuation">.</span><span class="token function">shortValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toString（）返回 Integer值 的 String对象："</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"valueOf（String str） 返回保存参数的 Integer对象((String)123) : "</span><span class="token operator">+</span>n<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"parseInt（String str） 返回参数中的数值((String)123)："</span><span class="token operator">+</span>n<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">byteValue（） 以 byte类型 返回(12)：12compareTo（Integer i）比较是否相同(12 v 10)：1intValue（）以 int类型 返回：12shortValue（）以 short类型 返回：12toString（）返回 Integer值 的 String对象：123valueOf（String str） 返回保存参数的 Integer对象((String)123) : 123parseInt（String str） 返回参数中的数值((String)123)：123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h1><p><strong>Boolean构造方法</strong></p><ol><li>new Boolean（boolean value）</li><li>new Boolean（String str）</li></ol><p>以上有两种方式获取 Boolean对象 </p><p><strong>Boolean常量</strong></p><p><font color = #05ffdc>Boolean.TRUE </font> 对应基于true的 Boolean对象</p><p><font color = #05ffdc>Boolean.FALSE</font> 对应基于false的 Boolean对象</p><p><font color = #05ffdc>Boolean.TYPE </font> 基本类型Boolean</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Boolean.TRUE："</span><span class="token operator">+</span>Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Boolean.FALSE："</span><span class="token operator">+</span>Boolean<span class="token punctuation">.</span>FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Boolean.TYPE："</span><span class="token operator">+</span>Boolean<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-text"><code class="language-text">Boolean.TRUE：trueBoolean.FALSE：falseBoolean.TYPE：boolean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Boolean方法</strong></p><p><font color = #05ffdc>Boolean.BooleanValue（） </font> 将Boolean对象的值对应返回 Boolean值 </p><p><font color = #05ffdc>Boolean.equsla（Object obj） </font> 对象相同返回true，否则false</p><p><font color = #05ffdc>Boolean.parseBoolean（String s） </font> 参数字符串解析为 Boolean值</p><p><font color = #05ffdc>Boolean.toString() </font> 返回boolean值的String对象，返回String</p><p><font color = #05ffdc>Boolean.valueOf（String s） </font> 返回参数Boolean值</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Boolean b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//默认false</span>    Boolean b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BooleanValue(b1) : "</span><span class="token operator">+</span>b1<span class="token punctuation">.</span><span class="token function">booleanValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BooleanValue(b2) : "</span><span class="token operator">+</span>b2<span class="token punctuation">.</span><span class="token function">booleanValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b1.equsla(b2)："</span><span class="token operator">+</span>b1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"valueOf（b1）："</span><span class="token operator">+</span>Boolean<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"valueOf（b2）："</span><span class="token operator">+</span>Boolean<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//String.valueOf(b1)：把b1引用的对象字符串化</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"parseBoolean（b1）："</span><span class="token operator">+</span>Boolean<span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//String.valueOf(b1)：把b2引用的对象字符串化</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"parseBoolean（b2）："</span><span class="token operator">+</span>Boolean<span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">BooleanValue(b1) : trueBooleanValue(b2) : falseb1.equsla(b2)：falsevalueOf（String s）：truevalueOf（String s）：falseparseBoolean（String s）：trueparseBoolean（String s）：false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Byte"><a href="#Byte" class="headerlink" title="Byte"></a>Byte</h1><p><strong>Byte构造方法</strong></p><ol><li>new Byte（byte value）</li><li>new Byte（String str）</li></ol><p>以上有两种方式获取 Byte对象 </p><p><strong>Byte常量</strong></p><p><font color = #05ffdc>Byte.MAX_VALUE </font> 返回byte型的最大值</p><p><font color = #05ffdc>Byte.MIN_VALUE  </font> 返回byte型的最小值</p><p><font color = #05ffdc>Byte.SIZE </font> 用二进制补码形式表示 byte位数</p><p><font color = #05ffdc>Byte.TYPE </font> 基本类型byte</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Byte.MAX："</span><span class="token operator">+</span>Byte<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Byte.MIN："</span><span class="token operator">+</span>Byte<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Byte.SIZE："</span><span class="token operator">+</span>Byte<span class="token punctuation">.</span>SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Byte.TYPE："</span><span class="token operator">+</span>Byte<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">Byte.MAX：127Byte.MIN：-128Byte.SIZE：8Byte.TYPE：byte<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Byte方法</strong></p><p><font color = #05ffdc>Byte.parseByte（String str） </font> 参数String以byte值返回</p><p><font color = #05ffdc>Byte.valueOf（String str） </font> 参数String以byte对象返回</p><p><font color = #05ffdc>Byte.equals（Object obj） </font> 两个Byte对象判断是否相同</p><p><font color = #05ffdc>Byte.byteValue（） </font> 返回此对象的byte值</p><p><font color = #05ffdc>Byte.intValue（） </font>  返回此对象的int值</p><p><font color = #05ffdc>Byte.doubleValue（） </font>  返回此对象的double值</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        Byte be = new Byte(12);  过时了</span><span class="token comment" spellcheck="true">//        实例化对象的例子需要调用valueOf方法</span>        Byte b <span class="token operator">=</span> Byte<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        或者</span>        Byte b2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token number">12</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"parseByte（String str）参数String以byte值返回："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">parseByte</span><span class="token punctuation">(</span><span class="token string">"23"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"valueOf（String str）参数String以byte对象返回："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"22"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"equals（Object obj）两个Byte对象判断是否相同："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"byteValue（） 返回此对象的byte值："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">byteValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"intValue（）返回此对象的int值："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doubleValue（） 返回此对象的double值："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">parseByte（String str）参数String以byte值返回：23valueOf（String str）参数String以byte对象返回：22equals（Object obj）两个Byte对象判断是否相同：truebyteValue（） 返回此对象的byte值：12intValue（）返回此对象的int值：12doubleValue（） 返回此对象的double值：12.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Character"><a href="#Character" class="headerlink" title="Character"></a>Character</h1><p><strong>Character构造方法</strong></p><pre class="line-numbers language-java"><code class="language-java">Character（<span class="token keyword">char</span> value）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Character常量</strong></p><p><font color = #05ffdc>Character.CONNECTOR_PUNCTUATION </font> 返回byte型值，表示Unicode的常规类别 Pc</p><p><font color = #05ffdc>Character.UNASSIGNED </font> 返回byte型值，表示Unicode的常规类别 Cn</p><p><font color = #05ffdc>Character.TITLECASE_LETTER </font> 返回byte型值，表示Unicode的常规类别 Lt</p><p><strong>Character方法</strong></p><p><font color = #05ffdc>Character.compareTo（Charcter char）</font> 比较两个对象是否相同，相同则0</p><p><font color = #05ffdc>Character.equals（Object obj） </font> 比较两对象的值，返回boolean值</p><p><font color = #05ffdc>Character.toUpperCase（char ch） </font> 参数字母转化为大写doubleValue（） </p><p><font color = #05ffdc>Character.toLowerCase（char ch） </font> 参数字母转化为小写</p><p><font color = #05ffdc>Character.toString（） </font> 返回指定的char值的String对象</p><p><font color = #05ffdc>Character.charValue（） </font> 返回Character对象的值</p><p><font color = #05ffdc>Character.isUpperCase（char ch） </font> 判断参数字符是否是大写</p><p><font color = #05ffdc>Character.isLowerCase（char ch） </font> 判断参数字符是否是小写</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Character ch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Character</span><span class="token punctuation">(</span><span class="token string">'S'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Character ch2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Character</span><span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"compareTo（Charcter char）比较两个对象是否相同，相同则0："</span><span class="token operator">+</span>ch<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>ch2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"equals（Object obj）比较两对象的值，返回boolean值："</span><span class="token operator">+</span>ch<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ch2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toUpperCase（char ch）参数字母转化为大写："</span><span class="token operator">+</span>Character<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toLowerCase（char ch）参数字母转化为小写："</span><span class="token operator">+</span>Character<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toString（）返回指定的char值的String对象："</span><span class="token operator">+</span>ch<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"charValue（） 返回Character对象的值："</span><span class="token operator">+</span>ch<span class="token punctuation">.</span><span class="token function">charValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"isUpperCase（char ch） 判断参数字符是否是大写(S)："</span><span class="token operator">+</span>Character<span class="token punctuation">.</span><span class="token function">isUpperCase</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"isUpperCase（char ch） 判断参数字符是否是大写(s)："</span><span class="token operator">+</span>Character<span class="token punctuation">.</span><span class="token function">isUpperCase</span><span class="token punctuation">(</span>ch2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"isLowerCase（char ch） 判断参数字符是否是小写(S)："</span><span class="token operator">+</span>Character<span class="token punctuation">.</span><span class="token function">isLowerCase</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"isLowerCase（char ch） 判断参数字符是否是小写(s)："</span><span class="token operator">+</span>Character<span class="token punctuation">.</span><span class="token function">isLowerCase</span><span class="token punctuation">(</span>ch2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">compareTo（Charcter char）比较两个对象是否相同，相同则0：-32equals（Object obj）比较两对象的值，返回boolean值：falsetoUpperCase（char ch）参数字母转化为大写：StoLowerCase（char ch）参数字母转化为小写：stoString（）返回指定的char值的String对象：ScharValue（） 返回Character对象的值：SisUpperCase（char ch） 判断参数字符是否是大写(S)：trueisUpperCase（char ch） 判断参数字符是否是大写(s)：falseisLowerCase（char ch） 判断参数字符是否是小写(S)：falseisLowerCase（char ch） 判断参数字符是否是小写(s)：true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Double"><a href="#Double" class="headerlink" title="Double"></a>Double</h1><p><strong>Double构造方法</strong></p><ol><li>new Double（double value）</li><li>new Double（String str）</li></ol><p>以上有两种方式获取 Double对象 </p><p><strong>Double常量</strong></p><p><font color = #05ffdc>Double.MAX_EXPONENT</font> 返回int值，double最大指数</p><p><font color = #05ffdc>Double.MIN_EXPONENT </font> 返回int值，double最小指数</p><p><font color = #05ffdc>Double.TYPE </font> 基本类型double</p><p><font color = #05ffdc>Double.SIZE </font> 用二进制补码形式表示 double位数</p><p><font color = #05ffdc>Double.NEGATIVE_INFINITY </font> 返回double值，保存double类型的负穷大值</p><p><font color = #05ffdc>Double.POSITIVE_INFINITY </font> 返回double值，返回double类型的正无穷大值</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Double.MAX："</span><span class="token operator">+</span>Double<span class="token punctuation">.</span>MAX_EXPONENT<span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Double.NIN："</span><span class="token operator">+</span>Double<span class="token punctuation">.</span>MIN_EXPONENT<span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Double.SIZE："</span><span class="token operator">+</span>Double<span class="token punctuation">.</span>SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Double.TYPE："</span><span class="token operator">+</span>Double<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">Double.MAX：1023Double.NIN：-1022Double.SIZE：64Double.TYPE：double<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Double方法</strong></p><p><font color = #05ffdc>Double.byteValue（） </font> 以byte形式返回Double对象值</p><p><font color = #05ffdc>Double.compareTo（Double d） </font> 两Double对象进行数值比较，相同则0</p><p><font color = #05ffdc>Double.equals（Object obj） </font> 比较两对象是否相同，返回boolean</p><p><font color = #05ffdc>Double.intValue（） </font> 以int形式返回double值</p><p><font color = #05ffdc>Double.isNaN（） </font> 非数字值，则返回true，否则false</p><p><font color = #05ffdc>String.toString（） </font> 返回Double对象的字符串形式</p><p><font color = #05ffdc>Double.valueOf（String str） </font> 返回保存参数的double值的对象</p><p><font color = #05ffdc>Double.doubleValue（） </font> 以double形式返回Double对象</p><p><font color = #05ffdc>Double.longValue（） </font> 以long形式返回double值</p><p><font color = #05ffdc>Double.parseDouble（String str） </font>返回参数中的数值</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Double d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">11.22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Double d2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Double d3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">11.22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"byteValue（） 以byte形式返回Double对象值："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">byteValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"compareTo（Double d） 两Double对象进行数值比较，相同则0(d2)："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"compareTo（Double d） 两Double对象进行数值比较，相同则0(d3)："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>d3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"equals（Object obj）比较两对象是否相同，返回boolean(d2)："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"equals（Object obj）比较两对象是否相同，返回boolean(d3)："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>d3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"intValue（）以int形式返回double值："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"isNaN（）非数字值，则返回true，否则false(d2)："</span><span class="token operator">+</span>d2<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toString（）返回Double对象的字符串形式："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"valueOf（String str）返回保存参数的double值的对象："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"22.33"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doubleValue（）以double形式返回Double对象："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"longValue（） 以long形式返回double值："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"parseDouble（String str）返回参数中的数值："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span><span class="token string">"33.2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">byteValue（） 以byte形式返回Double对象值：11compareTo（Double d） 两Double对象进行数值比较，相同则0(d2)：-1compareTo（Double d） 两Double对象进行数值比较，相同则0(d3)：0equals（Object obj）比较两对象是否相同，返回boolean(d2)：falseequals（Object obj）比较两对象是否相同，返回boolean(d3)：trueintValue（）以int形式返回double值：11isNaN（）非数字值，则返回true，否则false(d2)：falsetoString（）返回Double对象的字符串形式：11.22valueOf（String str）返回保存参数的double值的对象：22.33doubleValue（）以double形式返回Double对象：11.22longValue（） 以long形式返回double值：11parseDouble（String str）返回参数中的数值：33.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h1><p>Number数值类是byte、Integer、long、float、Double、··· 的父类，Number的方法子类都可以用！！</p><p><strong>Number方法</strong></p><table><thead><tr><th>方法</th><th>返回值</th><th>说明</th></tr></thead><tbody><tr><td><font color = #05ffdc>byteValue（） </font></td><td>byte</td><td>以byte形式返回数值</td></tr><tr><td><font color = #05ffdc>intValue（） </font></td><td>int</td><td>以int形式返回数值</td></tr><tr><td><font color = #05ffdc>floatValue（） </font></td><td>float</td><td>以float形式返回数值</td></tr><tr><td><font color = #05ffdc>shortValue（） </font></td><td>short</td><td>以short形式返回数值</td></tr><tr><td><font color = #05ffdc>longValue（） </font></td><td>long</td><td>以long形式返回数值</td></tr><tr><td><font color = #05ffdc>doubleValue（） </font></td><td>double</td><td>以double形式返回数值</td></tr></tbody></table><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     Number num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">23000.23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"以byte形式返回数值："</span><span class="token operator">+</span>num<span class="token punctuation">.</span><span class="token function">byteValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"以int形式返回数值："</span><span class="token operator">+</span>num<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"以float形式返回数值："</span><span class="token operator">+</span>num<span class="token punctuation">.</span><span class="token function">floatValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"以short形式返回数值："</span><span class="token operator">+</span>num<span class="token punctuation">.</span><span class="token function">shortValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"以long形式返回数值："</span><span class="token operator">+</span>num<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"以double形式返回数值："</span><span class="token operator">+</span>num<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">以byte形式返回数值：-40以int形式返回数值：23000以float形式返回数值：23000.23以short形式返回数值：23000以long形式返回数值：23000以double形式返回数值：23000.23<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Integer&quot;&gt;&lt;a href=&quot;#Integer&quot; class=&quot;headerlink&quot; title=&quot;Integer&quot;&gt;&lt;/a&gt;Integer&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Integer构造方法&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;new Inte
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://Sanscan12.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="笔记" scheme="https://Sanscan12.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://Sanscan12.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>02Java 类和对象篇</title>
    <link href="https://sanscan12.github.io/posts/40d6.html"/>
    <id>https://sanscan12.github.io/posts/40d6.html</id>
    <published>2020-06-11T16:00:00.000Z</published>
    <updated>2020-07-27T02:01:35.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面向对象概述"><a href="#面向对象概述" class="headerlink" title="面向对象概述"></a>面向对象概述</h1><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>对象 就是通过java类所产生的实体<br>如：动物百科的记载中有兔子类（java封装的类），根据百科中所呈现出来且真实存在的 实体 被为对象，相当于得到了兔子的 对象</p><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>类 是封装 对象 的 行为 和 属性 的载体。反过来，具有 相同属性 和 行为 的一类实体被称为类<br>如：兔子类（所有物种的兔子）封装有兔子的 共同属性 和 行为</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>封装是将类的某些信息隐藏在类的内部，不许外部直接访问<br>通过类提供的方法实现对 隐藏信息 的 访问 和 操作<br>如：QQ聊天的界面，聊天的内容位置是已经提供方法，可 访问 和 操作 的，可避免其他操作影响的不良后果</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承 是类与类之间同样具有关系，则为两类的关联<br>如：学生类 与 教师类 关联关系</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态 是父类对象应用于子类的特征</p><h1 id="类-1"><a href="#类-1" class="headerlink" title="类"></a>类</h1><h2 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h2><p>成员变量是java类中的属性</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">tuzi</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String eat<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//吃</span>        String hair<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//毛</span>        String jump<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//跳</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h2><p>成员方法是java中的行为</p><pre class="line-numbers language-java"><code class="language-java">权限修饰符 返回值类型 方法名<span class="token punctuation">(</span>参数类型 参数名<span class="token punctuation">[</span><span class="token punctuation">,</span>···<span class="token punctuation">)</span><span class="token punctuation">{</span>    ····        <span class="token comment" spellcheck="true">//方法体</span>    <span class="token keyword">return</span> 返回的值<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//例子</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果方法返回类型为void（空），则无返回（retrun）</p></blockquote><h2 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h2><p>权限修饰符控制 类 、类的成员变量 、成员方法 的访问</p><table><thead><tr><th>类修饰符</th><th>本类</th><th>同包其他类 / 子类</th><th>其他包的类 / 子类</th></tr></thead><tbody><tr><td>private</td><td>可见</td><td>不可见</td><td>不可见</td></tr><tr><td>protected</td><td>可见</td><td>可见</td><td>不可见</td></tr><tr><td>public</td><td>可见</td><td>可见</td><td>可见</td></tr></tbody></table><blockquote><p>当声明类时不使用修饰符设置权限 ，则这个类预设为包存取范围，前提是只有一个包中的类可以调用类的成员方法 、成员变量</p></blockquote><p>使用默认修饰符的例子</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//AnyClass类为默认访问权限</span><span class="token keyword">class</span> <span class="token class-name">AnyClass</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//doString()方法访问权限为public</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ····    <span class="token comment" spellcheck="true">//方法体</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><p>成员方法内定义的变量，则该变量是局部变量</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">jububianliang</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token keyword">private</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//成员方法。max变量限于该方法的范围</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//局部变量max</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>            max <span class="token operator">=</span> a<span class="token punctuation">;</span>            <span class="token keyword">return</span> max<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            max <span class="token operator">=</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>方法内的局部变量，外部是无法调用方法内的局部变量，因外部并没有声明变量</p></blockquote><h2 id="this关键子"><a href="#this关键子" class="headerlink" title="this关键子"></a>this关键子</h2><p>this关键字用于引用对象的成员变量和方法 ，将方法的参数值赋予类本身的成员变量</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">thsiches</span> <span class="token punctuation">{</span>    String  str <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">no1</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//打印 str形参</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"no1："</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//打印 thsiches类 中的str成员变量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"no2："</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String str2 <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">thsiches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">no1</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类的构造方法"><a href="#类的构造方法" class="headerlink" title="类的构造方法"></a>类的构造方法</h2><p>构造方法是创建对象过程中运行的方法，也是初始化方法，与类同名，对象创建是通过构造方法完成的</p><blockquote><p>构造方法</p><ul><li>没有返回值，也不需void（空）修饰</li><li>名称要与本类的名称相同</li><li>没有定义构造方法，编译器会自动创建无参数构造方法</li><li>实例化对象，类都会自动调用构造方法</li><li>在无参调用 this 有参构造方法，则该语句必须为第一个</li><li>实例化对象是有参构造方法，参数类型必须对应相应的值，否则会报错</li></ul></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//实例化对象</span>    no1 a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">no1</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//实例化对象</span>    no1 b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">no1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//无参构造方法</span><span class="token keyword">public</span> <span class="token function">no1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//使用this调用有参构造方法</span>    <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">"this 调用1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无参构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//有参构造方法</span><span class="token keyword">public</span> <span class="token function">no1</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">no1</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this 调用2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">1this 调用21232this 调用2this 调用1无参构造方法3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="私有构造方法"><a href="#私有构造方法" class="headerlink" title="私有构造方法"></a>私有构造方法</h2><p><strong>书本类</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token function">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ···    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//静态公开方法，图书馆借书</span>    <span class="token keyword">static</span> <span class="token keyword">public</span> Book <span class="token function">libraryBorrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>借书人类</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mytext</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> viod <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建一个书的对象，不是new实例化的，而是通过方法从图书馆借来的</span>        Book book <span class="token operator">=</span> Book<span class="token punctuation">.</span><span class="token function">libaryBorrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//错误方法    Book book = new Book();</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="static-静态"><a href="#static-静态" class="headerlink" title="static 静态"></a>static 静态</h1><p>静态修饰的代码，整个程序运行结束之后才会释放</p><p>静态区的数据是共享的，其他类调用本类的静态方法和静态变量时，无需实例化调用</p><pre class="line-numbers language-text"><code class="language-text">类名.静态类成员<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h2><p>静态变量的共享，在不同类对同一变量可以进行操作</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">no1</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//静态变量</span>    <span class="token keyword">static</span> <span class="token keyword">public</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">>=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            i <span class="token operator">-=</span><span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        i<span class="token operator">+=</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        no1 out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">no1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        no1 in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">no1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        in<span class="token punctuation">.</span><span class="token function">inlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"in："</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"out："</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"out："</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        no11 n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">no11</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//外部类调用静态变量</span><span class="token keyword">class</span> <span class="token class-name">no11</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">no11</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用no1类的方法</span>        <span class="token keyword">new</span> <span class="token class-name">no1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"no11(in) :  "</span><span class="token operator">+</span>no1<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text"> 0in：4out：1out：0no11(in) :  4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>同一个类的不同实例对象， 共用同一静态变量，如果一个对象将其更改，另一个对象的静态变量也会更改</p></blockquote><h2 id="静态常量"><a href="#静态常量" class="headerlink" title="静态常量"></a>静态常量</h2><p>静态常量用 final static 修饰成员变量 </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">no2</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//静态常量</span>    <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">double</span> P <span class="token operator">=</span> <span class="token number">3.1415</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Circular c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circular</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//计算圆类</span><span class="token keyword">class</span> <span class="token class-name">Circular</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> r<span class="token punctuation">;</span>    <span class="token keyword">double</span> a<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Circular</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span> r<span class="token punctuation">;</span>        a <span class="token operator">=</span> no2<span class="token punctuation">.</span>P <span class="token operator">*</span> r <span class="token operator">*</span> r<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"圆半径r为："</span><span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"圆面积a为: "</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">圆半径r为：2.0圆面积a为: 12.566<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>静态方法无需创建类的对象</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">no3</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//静态方法</span>    <span class="token keyword">static</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"以调用静态方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        no3<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>在静态方法中不可以使用 this关键字</li><li>在静态方法中不可以直接调用非静态方法</li></ul></blockquote><h2 id="类的主方法"><a href="#类的主方法" class="headerlink" title="类的主方法"></a>类的主方法</h2><p>主方法是类的入口点，也是程序运行的开始</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ul><li>主方法是静态的，主方法调用其他方法也必须是静态</li><li>主方法无返回值</li><li>主方法的形参为数组，args数组代表里面的参数个数，也可用args.length 获取参数个数</li></ul></blockquote><h1 id="对象-1"><a href="#对象-1" class="headerlink" title="对象"></a>对象</h1><h2 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h2><pre class="line-numbers language-java"><code class="language-java">Text text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Text text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>Text：类名<br>text：创建Text类引用对象<br>new：创建对象操作符<br>“ a ”：构造方法的参数</p></blockquote><h2 id="对象属性与行为"><a href="#对象属性与行为" class="headerlink" title="对象属性与行为"></a>对象属性与行为</h2><p>使用new操作符创建对象后，可以使用 <code>对象.类成员</code> 获取对象的 属性 或 行为 </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">no1</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用no1类的max方法(no1.max)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"max = a"</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"max = b"</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//对象的创建</span>        no1 t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">no1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        no1 t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">no1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取对象的属性（变量）</span>        t2<span class="token punctuation">.</span>i <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t2对象i："</span><span class="token operator">+</span>t2<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t1对象i："</span><span class="token operator">+</span>t1<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t1对象i："</span><span class="token operator">+</span>t1<span class="token punctuation">.</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用t1对象max方法</span>        t1<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用t2对象max方法</span>        t2<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">t2对象i：60t1对象i：50t1对象i：50调用no1类的max方法(no1.max)max = b23调用no1类的max方法(no1.max)max = b33<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对象引用"><a href="#对象引用" class="headerlink" title="对象引用"></a>对象引用</h2><pre class="line-numbers language-java"><code class="language-java">Text t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Text：类<br>t：引用<br>new Book（）：对象</p></blockquote><h1 id="扫描器"><a href="#扫描器" class="headerlink" title="扫描器"></a>扫描器</h1><p>扫描器用来获取用户输入的内容</p><p>使用方式</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//实例化</span>Sanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取变量调用的方法</span><span class="token keyword">double</span> d <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>···<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="时间记录"><a href="#时间记录" class="headerlink" title="时间记录"></a>时间记录</h2><p>记录开始运行到运行以下代码的时间段</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">long</span> i <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;面向对象概述&quot;&gt;&lt;a href=&quot;#面向对象概述&quot; class=&quot;headerlink&quot; title=&quot;面向对象概述&quot;&gt;&lt;/a&gt;面向对象概述&lt;/h1&gt;&lt;h2 id=&quot;对象&quot;&gt;&lt;a href=&quot;#对象&quot; class=&quot;headerlink&quot; title=&quot;对象&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://Sanscan12.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="笔记" scheme="https://Sanscan12.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://Sanscan12.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>01Java 数据类型篇</title>
    <link href="https://sanscan12.github.io/posts/4fbc.html"/>
    <id>https://sanscan12.github.io/posts/4fbc.html</id>
    <published>2020-05-31T16:00:00.000Z</published>
    <updated>2020-07-26T15:10:33.091Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p><strong>字符串方法</strong></p><table><thead><tr><th>修饰符、类型</th><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>int</td><td><font color = #05ffdc>length（） </font></td><td>测长度 ，返回字符串长度</td></tr><tr><td>int</td><td><font color = #05ffdc>indxOf(String s） </font></td><td>找参数的位置，返回参数字符串在字符串首个字符索引位置</td></tr><tr><td>int</td><td><font color = #05ffdc>lastIndexOf（String s）</font></td><td>找参数最后出现的位置，返回指定参数的字符串最后一个出现的索引位置</td></tr><tr><td>char</td><td><font color = #05ffdc>charAt（int i） </font></td><td>查找索引下标，返回指定索引处的字符</td></tr><tr><td>String</td><td><font color = #05ffdc>substring（int i） </font></td><td>查找索引下标开始到结尾，返回指定位置开始到结尾的字符串</td></tr><tr><td>String</td><td><font color = #05ffdc>substring（int i , int j）</font></td><td>获取指定范围字符串，返回指定位置范围的字符串</td></tr><tr><td>String</td><td><font color = #05ffdc>trim（） </font></td><td>去除多余空格，返回字符串副本，消除多余空格的</td></tr><tr><td>String</td><td><font color = #05ffdc>replace（char str1,char str2） </font></td><td>字符串/字符替换，返回字符串副本，指定 字符 / 字符串 替换新的 字符 / 字符串</td></tr><tr><td>boolean</td><td><font color = #05ffdc>startsWith（String p）</font></td><td>匹配前缀字符串，判定字符串前缀是否匹配参数字符串</td></tr><tr><td>boolean</td><td><font color = #05ffdc>endsWith（String p） </font></td><td>匹配后缀字符串，判断字符串后缀是否匹配参数字符串</td></tr><tr><td>boolean</td><td><font color = #05ffdc>equals（String str2） </font></td><td>判断是否相同，判断字符串与参数字符串的字符和长度是否相同</td></tr><tr><td>boolean</td><td><font color = #05ffdc>equalsIgnoreCase（String str2） </font></td><td>判断是否相同，比较两个字符串的对象</td></tr><tr><td>int</td><td><font color = #05ffdc>compareTo（String o）</font></td><td>比较顺序，按字典顺序比较两个字符串，参数位置前正，后负，等于0</td></tr><tr><td>String</td><td><font color = #05ffdc>toLowerCase（） </font></td><td>转换小写，字符串全部转换为小写</td></tr><tr><td>String</td><td><font color = #05ffdc>toUpperCase（） </font></td><td>转换大写，字符串全部转换为大写</td></tr><tr><td>String[]</td><td><font color = #05ffdc>split（String sign） </font></td><td>分割字符串，指定分割符对字符串进行拆分<br />sign为分割的字符串，也可以是正则表达式</td></tr><tr><td>String[]</td><td><font color = #05ffdc>split（String sign , int i） </font></td><td>分割字符串指定数量，指定分割符对字符串进行拆分，并限制拆分数</td></tr><tr><td>Appendable</td><td><font color = #05ffdc>append（content） </font></td><td>添加数据，字符串后面追加内容，频繁操作时引用，限于StringBuilder对象的使用（16字节）<br />content可以是任何数据类型或其他对象</td></tr><tr><td></td><td><font color = #05ffdc>insert（int i , String str2） </font></td><td>插入数据，参数索引的后一位插入字符串数据</td></tr><tr><td></td><td><font color = #05ffdc>delete（int i , int j） </font></td><td>删除字符串</td></tr></tbody></table><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"I love Java  20.06.05   !!! , or not love Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str："</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        String str2 <span class="token operator">=</span> <span class="token string">"Sanscan"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str2："</span><span class="token operator">+</span>str2<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str3 <span class="token operator">=</span> <span class="token string">"192.168.0.1"</span><span class="token punctuation">;</span>        StringBuilder str4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"Sanscan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> no1 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//length() 测长度</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str.length() 测长度："</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//inexOf(String s)找字符串位置</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str.inexOf(String s)找Java字符串位置："</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//lastIndexOf(String s)找参数最后出现的位置</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str.lastIndexOf(String s)找参数最后出现的位置："</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//charAt(int i)查找索引下标</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str.charAt(int i)查找索引下标："</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//substring(int i) 查找索引下标开始到结尾</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str.ubstring(int i) 查找索引下标开始到结尾："</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//substring(int i , int j) 获取指定范围字符串</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str.substring(int i , int j)获取指定范围字符串: "</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//trim() 去除多余空格</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str.trim() 去除多余空格："</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//replace(char str1,char str2) 字符串/字符替换</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str.replace(char str1,char str2) 字符串/字符替换(javas)："</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">,</span><span class="token string">"javas"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//startsWith(String p) 匹配字符</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str.startsWith(String p) 匹配字符(java)："</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//endsWith(String p) 匹配后缀字符串</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str.endsWith(String p) 匹配后缀字符串(java): "</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//equals(String str2) 判断是否相同</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str2.equals(String str2) 判断是否相同(Sanscan) :"</span><span class="token operator">+</span>str2<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Sanscan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//equalsIgnoreCase(String str2) 判断是否相同</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str2.equalsIgnoreCase(String str2)判断是否相同(Sanscan)："</span><span class="token operator">+</span>str2<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"Sanscan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//compareTo(String o) 比较顺序</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str2.compareTo(String o)  比较顺序(sans)："</span><span class="token operator">+</span>str2<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token string">"sans"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//toLowerCase() 转换小写</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str.toLowerCase() 转换小写："</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//toUpperCase() 转换大写</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str.toUpperCase() 转换大写： "</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//split(String sign) 分割字符串</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str.split(String sign) 分割字符串192.168.0.1："</span><span class="token operator">+</span> str3<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//split(String sign ,int i) 分割字符串指定数量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str.split(String sign) 分割字符串192.168.0.1："</span><span class="token operator">+</span> str3<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\."</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//append（content）添加数据</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str4.append（content）添加数据(Java)："</span><span class="token operator">+</span>str4<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//insert（int i , String str2） 插入数据</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str4.insert（int i , String str2） 插入数据(Java)："</span><span class="token operator">+</span>str4<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//delete（int i , int j） 删除字符串</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str4.delete（int i , int j） 删除字符串："</span><span class="token operator">+</span>str4<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> no2 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代码运行了："</span><span class="token operator">+</span><span class="token punctuation">(</span>no2<span class="token operator">-</span>no1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">str：I love Java  20.06.05   !!! , or not love Javastr2：Sanscanstr.length() 测长度：46str.inexOf(String s)找Java字符串位置：7str.lastIndexOf(String s)找参数最后出现的位置：42str.charAt(int i)查找索引下标：Jstr.ubstring(int i) 查找索引下标开始到结尾：e Java  20.06.05   !!! , or not love Javastr.substring(int i , int j)获取指定范围字符串: ovestr.trim() 去除多余空格：I love Java  20.06.05   !!! , or not love Javastr.replace(char str1,char str2) 字符串/字符替换(javas)：I love javas  20.06.05   !!! , or not love javasstr.startsWith(String p) 匹配字符(java)：falsestr.endsWith(String p) 匹配后缀字符串(java): falsestr2.equals(String str2) 判断是否相同(Sanscan) :truestr2.equalsIgnoreCase(String str2)判断是否相同(Sanscan)：truestr2.compareTo(String o)  比较顺序(sans)：-32str.toLowerCase() 转换小写：i love java  20.06.05   !!! , or not love javastr.toUpperCase() 转换大写： I LOVE JAVA  20.06.05   !!! , OR NOT LOVE JAVAstr.split(String sign) 分割字符串192.168.0.1：[Ljava.lang.String;@cc34f4dstr.split(String sign) 分割字符串192.168.0.1：[Ljava.lang.String;@17a7cec2str4.append（content）添加数据(Java)：SanscanJavastr4.insert（int i , String str2） 插入数据(Java)：SaJavanscanJavastr4.delete（int i , int j） 删除字符串：SanscanJava代码运行了：5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p><strong>数组方法</strong></p><p>调用到Arrays类</p><p><font color = #05ffdc>Arrays.fill（Object[] a , int value） </font> 填充数组，参数 数组 填充 int 值，无返回</p><p><font color = #05ffdc>Arrays.fill（Object[] a , int i  , int j , int value） </font> 限定范围填充数组，限定范围 i 为开始 j 为结尾，无返回</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//调用到的包 要用Arrays类调用</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"no1:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> tmp <span class="token operator">:</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>tmp<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n no2:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> tmp <span class="token operator">:</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>tmp<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">no1:2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2  no2:2 2 8 8 8 8 2 2 2 2 2 2 2 2 2 2 2 2 2 2 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><font color = #05ffdc>Array.ssort（Object[] a） </font> 数组排序，a为数组，无返回</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//调用到的包 要用Arrays类调用</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> tmp <span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>tmp<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">23 25 54 99 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font color = #05ffdc>Arrays.copyOf（Object[] a,int i）</font> 复制数组，复制参数数组索引0开始的个数，返回数组</p><p><font color = #05ffdc>Arrays.copyOfRange（Object[] a,int i）</font> 复制数组，复制参数数组索引0开始的个数，返回数组</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//调用到的包 要用Arrays类调用</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> tmp <span class="token operator">:</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>tmp<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>arr <span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> tmp <span class="token operator">:</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>tmp<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">99 23 54 54 25 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><font color = #05ffdc>Arrays.binarySearch（Object[] a , Object key） </font> 数组查询，查询参数数组中的 key值 ，返回查找值的索引位置</p><p><font color = #05ffdc>Arrays.binarySearch（Object[] a , int i , int j , Object key） </font> 数组查询，查询参数数组中的 key值 , 限定范围 i 为开始 j 为结尾，返回查找值的索引位置</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//调用到的包 要用Arrays类调用</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排列后的位置为（99）："</span><span class="token operator">+</span>Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"索引范围1 - 2 排列后的位置为（25）："</span><span class="token operator">+</span>Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">排列后的位置为（99）：3索引范围1 - 2 排列后的位置为（25）：1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;字符串方法&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;修饰符、类型&lt;/th&gt;
&lt;t
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://Sanscan12.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="笔记" scheme="https://Sanscan12.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://Sanscan12.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>进制转换</title>
    <link href="https://sanscan12.github.io/posts/8b05.html"/>
    <id>https://sanscan12.github.io/posts/8b05.html</id>
    <published>2020-05-25T14:25:21.443Z</published>
    <updated>2020-05-25T14:40:31.963Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a><strong>进制转换</strong></h1><h2 id="十进制-→-其他进制"><a href="#十进制-→-其他进制" class="headerlink" title="十进制 → 其他进制"></a>十进制 → 其他进制</h2><p>（短除法）</p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/JZConvert 03.jpg" style="zoom: 80%;" /><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/JZConvert 02.jpg" style="zoom: 80%;" /><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/JZConvert 01.jpg" style="zoom: 80%;" /><h2 id="其他进制-→-十进制"><a href="#其他进制-→-十进制" class="headerlink" title="其他进制 → 十进制"></a>其他进制 → 十进制</h2><p><strong>八进制 → 十进制</strong><br>$$<br>3436_{(8)} = 1822_{(10)}<br>$$</p><p>$$<br>3 * 8^3+4 * 8^2+3 * 8^1+6 * 8^0=1822_{(10)}<br>$$</p><p>$$<br>1536+256+24+6=1822_{(10)}<br>$$</p><p><strong>十六进制 → 十进制</strong><br>$$<br>E346A_{(16)} = 930922_{(10)}<br>$$</p><p>$$<br>14 * 16^4+3 * 16^3+4 * 16^2+6 * 16^1+10 * 16^0 = 930922_{(10)}<br>$$</p><p>$$<br>917504+12288+1024+96+10=930922_{(10)}<br>$$</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;进制转换&quot;&gt;&lt;a href=&quot;#进制转换&quot; class=&quot;headerlink&quot; title=&quot;进制转换&quot;&gt;&lt;/a&gt;&lt;strong&gt;进制转换&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;十进制-→-其他进制&quot;&gt;&lt;a href=&quot;#十进制-→-其他进制&quot; class=
      
    
    </summary>
    
    
      <category term="学习记录" scheme="https://Sanscan12.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="笔记" scheme="https://Sanscan12.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="进制转换" scheme="https://Sanscan12.github.io/tags/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>IDEA 快捷键（转载）</title>
    <link href="https://sanscan12.github.io/posts/5d9a.html"/>
    <id>https://sanscan12.github.io/posts/5d9a.html</id>
    <published>2020-05-18T16:00:00.000Z</published>
    <updated>2020-05-25T14:25:43.970Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IDEA-快捷键"><a href="#IDEA-快捷键" class="headerlink" title="IDEA 快捷键"></a>IDEA 快捷键</h1><h2 id="Ctrl-快捷键"><a href="#Ctrl-快捷键" class="headerlink" title="Ctrl 快捷键"></a>Ctrl 快捷键</h2><p>Ctrl + F    查找文本内容 （必备）<br>Ctrl + R    查找匹配文本内容替换 （必备）</p><blockquote><p>替换属性：</p><p>REPLACE：替换第一个内容<br>REPLACE ALL：全部替换<br>INCLUDE：取消选定内容的文本</p></blockquote><p>Ctrl + Z    撤销 （必备）<br>Ctrl + Y    删除光标所在行（必备）<br>Ctrl + X    剪切光标所在行 或 剪切选择内容<br>Ctrl + C    复制光标所在行 或 复制选择内容<br>Ctrl + D    复制光标所在行 或 复制选择内容（必备）<br>Ctrl + E    显示最近文件打开记录 （必备）<br>Ctrl + N    查找类文件 名/类名  （必备）<br>Ctrl + G    在当前文件跳转到指定行处<br>Ctrl + J     插入自定义动态代码模板 （必备）！！！<br>Ctrl + P    方法参数提示显示 （必备）<br>Ctrl + Q    光标所在的变量 / 类名 / 方法名等上面（也可以在提示补充的时候按），显示文档内容<br>Ctrl + /    释光标所在行代码，会根据当前不同文件类型使用不同的注释符号 （必备）<br>Ctrl + U    前往当前光标所在的方法的父类的方法 / 接口定义 （必备）<br>Ctrl + B    进入光标所在的方法/变量的接口或是定义处，等效于 Ctrl + 左键单击 （必备）<br>Ctrl + K    版本控制提交项目，需要此项目有加入到版本控制才可用<br>Ctrl + T    版本控制更新项目，需要此项目有加入到版本控制才可用<br>Ctrl + H    显示当前类的层次结构<br>Ctrl + O    选择可重写的方法<br>Ctrl + I    选择可继承的方法<br>Ctrl + +    展开代码<br>Ctrl + -    折叠代码<br>Ctrl + /    释光标所在行代码，会根据当前不同文件类型使用不同的注释符号 （必备）<br>Ctrl + [    移动光标到当前所在代码的花括号开始位置<br>Ctrl + ]    移动光标到当前所在代码的花括号结束位置<br>Ctrl + F1   在光标所在的错误代码处显示错误信息 （必备）<br>Ctrl + F3   调转到所选中的词的下一个引用位置 （必备）<br>Ctrl + F4   关闭当前编辑文件<br>Ctrl + F8   在 Debug 模式下，设置光标当前行为断点，如果当前已经是断点则去掉断点<br>Ctrl + F9   执行 Make Project 操作<br>Ctrl + F11  选中文件 / 文件夹，使用助记符设定 / 取消书签 （必备）<br>Ctrl + F12  弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选<br>Ctrl + Tab  编辑窗口切换，如果在切换的过程又加按上 delete，则是关闭对应选中的窗口<br>Ctrl + End  跳到文件尾<br>Ctrl + Home 跳到文件头<br>Ctrl + Space  基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 Ctrl +逗号 （必备）<br>Ctrl + Delete      删除光标后面的单词或是中文句 （必备）<br>Ctrl +BackSpace    删除光标前面的单词或是中文句 （必备）<br>Ctrl +1,2,3…9    定位到对应数值的书签位置 （必备）<br>Ctrl + 左键单击     在打开的文件标题上，弹出该文件路径 （必备）<br>Ctrl + 光标定位按   Ctrl 不要松开，会显示光标所在的类信息摘要<br>Ctrl + 左方向键     光标跳转到当前单词 / 中文句的左侧开头位置 （必备）<br>Ctrl + 右方向键     光标跳转到当前单词 / 中文句的右侧开头位置 （必备）<br>Ctrl + 前方向键     等效于鼠标滚轮向前效果 （必备）<br>Ctrl + 后方向键     等效于鼠标滚轮向后效果 （必备）</p><h2 id="Alt-快捷键"><a href="#Alt-快捷键" class="headerlink" title="Alt 快捷键"></a>Alt 快捷键</h2><p>Alt + `   显示版本控制常用操作菜单弹出层 （必备）<br>Alt + Q   弹出一个提示，显示当前类的声明 / 上下文信息<br>Alt + F1  显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择 （必备）<br>Alt + F2  对于前面页面，显示各类浏览器打开目标选择弹出层<br>Alt + F3  选中文本，逐个往下查找相同文本，并高亮显示<br>Alt + F7  查找光标所在的方法 / 变量 / 类被调用的地方<br>Alt + F8  在 Debug 的状态下，选中对象，弹出可输入计算表达式调试框，查看该输入内容的调试结果<br>Alt + Home   定位 / 显示到当前文件的 Navigation Bar<br>Alt + Enter  IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同 （必备）<br>Alt + Insert 代码自动生成，如生成对象的 set / get 方法，构造函数，toString() 等 （必备）<br>Alt + 左方向键     切换当前已打开的窗口中的子视图，比如 Debug 窗口中有 Output、Debugger 等子视图，用此快捷键就可以在子视图中切换 （必备）<br>Alt + 右方向键     按切换当前已打开的窗口中的子视图，比如 Debug 窗口中有 Output、Debugger 等子视图，用此快捷键就可以在子视图中切换 （必备）<br>Alt + 前方向键     当前光标跳转到当前文件的前一个方法名位置 （必备）<br>Alt + 后方向键     当前光标跳转到当前文件的后一个方法名位置 （必备）<br>Alt +1,2,3…9    显示对应数值的选项卡，其中 1 是 Project 用得最多 （必备）</p><h2 id="Shift-快捷键"><a href="#Shift-快捷键" class="headerlink" title="Shift 快捷键"></a>Shift 快捷键</h2><p>Shift + F1   如果有外部文档可以连接外部文档<br>Shift + F2   跳转到上一个高亮错误 或 警告位置<br>Shift + F3   在查找模式下，查找匹配上一个<br>Shift + F4   对当前打开的文件，使用新 Windows 窗口打开，旧窗口保留<br>Shift + F6   对文件 / 文件夹 重命名<br>Shift + F7   在 Debug 模式下，智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法<br>Shift + F8   在 Debug 模式下，跳出，表现出来的效果跟 F9 一样<br>Shift + F9   等效于点击工具栏的 Debug 按钮<br>Shift + F10  等效于点击工具栏的 Run 按钮<br>Shift + F11  弹出书签显示层 （必备）<br>Shift + Tab    取消缩进 （必备）<br>Shift + ESC    隐藏当前 或 最后一个激活的工具窗口<br>Shift + End    选中光标到当前行尾位置<br>Shift + Home   选中光标到当前行头位置<br>Shift + Enter    开始新一行。光标所在行下空出一行，光标定位到新行位置 （必备）<br>Shift + 左键单击      在打开的文件名上按此快捷键，可以关闭当前打开文件 （必备）<br>Shift + 滚轮前后滚动   当前文件的横向滚动轴滚动 （必备）</p><h2 id="Ctrl-Alt-快捷键"><a href="#Ctrl-Alt-快捷键" class="headerlink" title="Ctrl + Alt 快捷键"></a>Ctrl + Alt 快捷键</h2><p>Ctrl + Alt + L   格式化代码，可以对当前文件和整个包目录使用 （必备）<br>Ctrl + Alt + O   优化导入的类，可以对当前文件和整个包目录使用 （必备）<br>Ctrl + Alt + I   光标所在行 或 选中部分进行自动代码缩进，有点类似格式化<br>Ctrl + Alt + T   对选中的代码弹出环绕选项弹出层 （必备）<br>Ctrl + Alt + J   弹出模板选择窗口，将选定的代码加入动态模板中<br>Ctrl + Alt + H   调用层次<br>Ctrl + Alt + B   在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口<br>Ctrl + Alt + V   快速引进变量<br>Ctrl + Alt + Y   同步、刷新<br>Ctrl + Alt + S   打开 IntelliJ IDEA 系统设置 （必备）<br>Ctrl + Alt + F7  显示使用的地方。寻找被该类或是变量被调用的地方，用弹出框的方式找出来<br>Ctrl + Alt + F11 切换全屏模式<br>Ctrl + Alt + Enter   光标所在行上空出一行，光标定位到新行 （必备）<br>Ctrl + Alt + Home    弹出跟当前文件有关联的文件弹出层<br>Ctrl + Alt + Space   类名自动完成<br>Ctrl + Alt + 左方向键    退回到上一个操作的地方 （必备）<br>Ctrl + Alt + 右方向键    前进到上一个操作的地方 （必备）<br>Ctrl + Alt + 前方向键    在查找模式下，跳到上个查找的文件<br>Ctrl + Alt + 后方向键    在查找模式下，跳到下个查找的文件</p><h2 id="Ctrl-Shift-快捷键"><a href="#Ctrl-Shift-快捷键" class="headerlink" title="Ctrl + Shift 快捷键"></a>Ctrl + Shift 快捷键</h2><p>Ctrl + Shift + F  根据输入内容查找整个项目 或 指定目录内文件 （必备）<br>Ctrl + Shift + R  根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件 （必备）<br>Ctrl + Shift + J  自动将下一行合并到当前行末尾 （必备）<br>Ctrl + Shift + Z  取消撤销 （必备）<br>Ctrl + Shift + W  递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围 （必备）<br>Ctrl + Shift + N  通过文件名定位 / 打开文件 / 目录，打开目录需要在输入的内容后面多加一个正斜杠 （必备）<br>Ctrl + Shift + U  对选中的代码进行大 / 小写轮流转换 （必备）<br>Ctrl + Shift + T  对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择 （必备）<br>Ctrl + Shift + C  复制当前文件磁盘路径到剪贴板 （必备）<br>Ctrl + Shift + V  弹出缓存的最近拷贝的内容管理器弹出层<br>Ctrl + Shift + E  显示最近修改的文件列表的弹出层<br>Ctrl + Shift + H  显示方法层次结构<br>Ctrl + Shift + B  跳转到类型声明处 （必备）<br>Ctrl + Shift + I  快速查看光标所在的方法 或 类的定义<br>Ctrl + Shift + A  查找动作 / 设置<br>Ctrl + Shift + /  代码块注释 （必备）<br>Ctrl + Shift + [  选中从光标所在位置到它的顶部中括号位置 （必备）<br>Ctrl + Shift + ]  选中从光标所在位置到它的底部中括号位置 （必备）<br>Ctrl + Shift + +  展开所有代码 （必备）<br>Ctrl + Shift + -  折叠所有代码 （必备）<br>Ctrl + Shift + F7    高亮显示所有该选中文本，按 Esc 高亮消失 （必备）<br>Ctrl + Shift + F8    在 Debug 模式下，指定断点进入条件<br>Ctrl + Shift + F9    编译选中的文件 / 包 / Module<br>Ctrl + Shift + F12   编辑器最大化 （必备）<br>Ctrl + Shift + Space 智能代码提示<br>Ctrl + Shift + Enter 自动结束代码，行末自动添加分号 （必备）<br>Ctrl + Shift +Backspace  退回到上次修改的地方 （必备）<br>Ctrl + Shift +1,2,3…9  快速添加指定数值的书签 （必备）<br>Ctrl + Shift + 左键单击   把光标放在某个类变量上，按此快捷键可以直接定位到该类中（必备）<br>Ctrl + Shift + 左方向键    在代码文件上，光标跳转到当前单词 / 中文句的左侧开头位置，同时选中该单词 / 中文句（必备）<br>Ctrl + Shift + 右方向键    在代码文件上，光标跳转到当前单词 / 中文句的右侧开头位置，同时选中该单词 / 中文句（必备）<br>Ctrl + Shift + 前方向键    光标放在方法名上，将方法移动到上一个方法前面，调整方法排序 （必备）<br>Ctrl + Shift + 后方向键    光标放在方法名上，将方法移动到下一个方法前面，调整方法<br>Ctrl + Shift + 右方向键    在代码文件上，光标跳转到当前单词 / 中文句的右侧开头位置，同时选中该单词 / 中文句（必备）<br>Ctrl + Shift + 前方向键    光标放在方法名上，将方法移动到上一个方法前面，调整方法排序 （必备）<br>Ctrl + Shift + 后方向键    光标放在方法名上，将方法移动到下一个方法前面，调整方法排序 （必备）</p><h2 id="Alt-Shift-快捷键"><a href="#Alt-Shift-快捷键" class="headerlink" title="Alt + Shift 快捷键"></a>Alt + Shift 快捷键</h2><p>Alt + Shift + N     选择 / 添加 task （必备）<br>Alt + Shift + F     显示添加到收藏夹弹出层 / 添加到收藏夹<br>Alt + Shift + C     查看最近操作项目的变化情况列表<br>Alt + Shift + I     查看项目当前文件<br>Alt + Shift + F7在  Debug 模式下，下一步，进入当前方法体内，如果方法体还有方法，则会进入该内嵌的方法中，依此循环进入<br>Alt + Shift + F9    弹出 Debug 的可选择菜单<br>Alt + Shift + F10   弹出 Run 的可选择菜单<br>Alt + Shift + 左键双击  选择被双击的单词 / 中文句，按住不放，可以同时选择其他单词 / 中文句 （必备）<br>Alt + Shift + 前方向键  移动光标所在行向上移动 （必备）<br>Alt + Shift + 后方向键  移动光标所在行向下移动 （必备）</p><h2 id="Ctrl-Shift-Alt-快捷键"><a href="#Ctrl-Shift-Alt-快捷键" class="headerlink" title="Ctrl + Shift + Alt 快捷键"></a>Ctrl + Shift + Alt 快捷键</h2><p>Ctrl + Shift + Alt + V   无格式黏贴 （必备）<br>Ctrl + Shift + Alt + N   前往指定的变量 / 方法<br>Ctrl + Shift + Alt + S   打开当前项目设置 （必备）<br>Ctrl + Shift + Alt + C   复制参考信息</p><h2 id="其他快捷键"><a href="#其他快捷键" class="headerlink" title="其他快捷键"></a>其他快捷键</h2><p>F2   跳转到下一个高亮错误 或 警告位置 （必备）<br>F3   在查找模式下，定位到下一个匹配处<br>F4   编辑源 （必备）<br>F7   在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中<br>F8   在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内<br>F9   在 Debug 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上<br>F11  添加书签 （必备）<br>F12  回到前一个工具窗口 （必备）<br>Tab缩进 （必备）<br>ESC     从工具窗口进入代码文件窗口 （必备）<br>连按两次Shift  弹出 Search Everywhere 弹出层</p><blockquote><p>学习来源：</p><p><a href="https://www.cnblogs.com/jajian/p/8012603.html" target="_blank" rel="noopener">https://www.cnblogs.com/jajian/p/8012603.html</a></p></blockquote><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;IDEA-快捷键&quot;&gt;&lt;a href=&quot;#IDEA-快捷键&quot; class=&quot;headerlink&quot; title=&quot;IDEA 快捷键&quot;&gt;&lt;/a&gt;IDEA 快捷键&lt;/h1&gt;&lt;h2 id=&quot;Ctrl-快捷键&quot;&gt;&lt;a href=&quot;#Ctrl-快捷键&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="配置" scheme="https://Sanscan12.github.io/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="分享" scheme="https://Sanscan12.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>网页项目</title>
    <link href="https://sanscan12.github.io/posts/cf15.html"/>
    <id>https://sanscan12.github.io/posts/cf15.html</id>
    <published>2020-05-14T16:00:00.000Z</published>
    <updated>2020-05-25T14:25:43.979Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网页项目"><a href="#网页项目" class="headerlink" title="网页项目"></a>网页项目</h1><h2 id="目录说明"><a href="#目录说明" class="headerlink" title="目录说明"></a>目录说明</h2><p>文件实现结构。根目录的文件</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>css</td><td>存放CSS样式文件</td></tr><tr><td>images</td><td>存放图片</td></tr><tr><td>index</td><td>首页HTML结构</td></tr><tr><td>js</td><td>后期存放javascript文件</td></tr></tbody></table><h2 id="css样式分类"><a href="#css样式分类" class="headerlink" title="css样式分类"></a>css样式分类</h2><p> 可分类的有：初始换样式、字体图标样式、公用样式、页面样式、头部底部样式等···</p><h2 id="ico图标"><a href="#ico图标" class="headerlink" title="ico图标"></a>ico图标</h2><p>ico图标是放于标题旁的图标<br><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/jd1.png" alt=""></p><h3 id="引入ico图标"><a href="#引入ico图标" class="headerlink" title="引入ico图标"></a>引入ico图标</h3><pre class="line-numbers language-css"><code class="language-css">&lt;link rel=<span class="token string">"shortcut icon"</span> href=<span class="token string">"favicon.ico"</span>  type=<span class="token string">"image/x-icon"</span>/>   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>注意：</strong></p><ol><li>iconfont不是字体</li><li>位置在于head标签内</li><li>ype=”image/x-icon”  属性可以省略</li><li>为了兼容性，<code>favicon.ico</code>图标放到根目录下</li></ol></blockquote><p><strong>转换ico图标</strong>：<a href="http://www.bitbug.net/" target="_blank" rel="noopener">此处链接</a></p><h2 id="logo的使用"><a href="#logo的使用" class="headerlink" title="logo的使用"></a>logo的使用</h2><p>logo 一般形式：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>京东<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>a标签一般用于搜索引擎要获取的值，所以a标签一定要有网站标名</p><blockquote><p>使用时a标签的内容可以使用 文本首行缩进 <code>text-indent: -9999px;</code> 移除字体</p></blockquote><h2 id="三大标签"><a href="#三大标签" class="headerlink" title="三大标签"></a>三大标签</h2><h3 id="网页title-标题"><a href="#网页title-标题" class="headerlink" title="网页title 标题"></a>网页title 标题</h3><p>不可替代性，是搜索引擎了解网页的入口，和对网页主题归属的最佳判断点<br><strong>写法</strong>：网站名（产品名）- 网站的介绍<br><strong>例子</strong>：天猫tmall.com–理想生活上天猫、淘宝网 - 淘！我喜欢、小米商城 - 小米10 Pro、Redmi K30、小米MIX Alpha，小米电视官方网站</p><h3 id="Description-网站说明"><a href="#Description-网站说明" class="headerlink" title="Description 网站说明"></a>Description 网站说明</h3><p>对于关键词的作用明显降低，但由于很多搜索引擎，仍然大量采用网页的MATA标签中描述部分作为搜索结果的“内容摘要”。 就是简要说明我们网站的主要做什么的<br><strong>写法</strong>：在 head标签里添加meta单标签 Description属性 来添加网站的摘要<br>京东网例子：</p><pre class="line-numbers language-css"><code class="language-css">&lt;head>    ···    &lt;meta name=<span class="token string">"description"</span> content=<span class="token string">"京东JD.COM-专业的综合网上购物商城,销售家电、数码通讯、电脑、家居百货、服装服饰、母婴、图书、食品等数万个品牌优质商品.便捷、诚信的服务，为您提供愉悦的网上购物体验!"</span> />    ···&lt;/head><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小米网例子：</p><pre class="line-numbers language-css"><code class="language-css">&lt;head>    ···    &lt;meta name=<span class="token string">"description"</span> content=<span class="token string">"小米官网直营小米公司旗下所有产品，包括小米手机系列小米10 Pro 、小米9、小米MIX Alpha，Redmi 红米系列Redmi K30、Redmi Note 8 Pro，小米电视、笔记本、米家智能家居等，同时提供小米客户服务及售后支持."</span> />    ···&lt;/head><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>内容注意</strong>：</p><ol><li>描述中出现关键词，与正文内容相关，要写的很详细</li><li>同样遵循简短原则，字符数含空格在内不要超过 120  个汉字</li><li>补充在 title  和 keywords  中未能充分表述的说明</li><li>用英文逗号 关键词1,关键词2</li></ol></blockquote><h3 id="Keywords关键词"><a href="#Keywords关键词" class="headerlink" title="Keywords关键词"></a>Keywords关键词</h3><p>是搜索引擎关注点之一。Keywords应该限制在6～8个关键词左右<br>写法：在 head标签里添加meta单标签 Keywords属性 来添加网站的关键词<br>天猫网例子：</p><pre class="line-numbers language-css"><code class="language-css"> &lt;head>    ···    &lt;meta name=<span class="token string">"keywords"</span> content=<span class="token string">"商城,网上购物,网购,进口食品,美容护理,母婴玩具,家用电器,手机数码,家居生活,服饰内衣,营养保健,钟表珠宝,饰品箱包,汽车生活,图书音像,礼品卡"</span>/>    ···&lt;/head><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小米网例子：</p><pre class="line-numbers language-css"><code class="language-css"> &lt;head>    ···     &lt;meta name=<span class="token string">"keywords"</span> content=<span class="token string">"小米,redmi,小米10,Redmi K30,小米MIX Alpha,小米商城"</span> />    ···&lt;/head><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>待更新···· </p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;网页项目&quot;&gt;&lt;a href=&quot;#网页项目&quot; class=&quot;headerlink&quot; title=&quot;网页项目&quot;&gt;&lt;/a&gt;网页项目&lt;/h1&gt;&lt;h2 id=&quot;目录说明&quot;&gt;&lt;a href=&quot;#目录说明&quot; class=&quot;headerlink&quot; title=&quot;目录说明&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="脚本语言" scheme="https://Sanscan12.github.io/categories/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="分享" scheme="https://Sanscan12.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
      <category term="项目" scheme="https://Sanscan12.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>赛博朋克风格</title>
    <link href="https://sanscan12.github.io/posts/d3.html"/>
    <id>https://sanscan12.github.io/posts/d3.html</id>
    <published>2020-04-30T16:00:00.000Z</published>
    <updated>2020-05-03T12:51:27.661Z</updated>
    
    <content type="html"><![CDATA[<h1 id="赛博风格"><a href="#赛博风格" class="headerlink" title="赛博风格"></a>赛博风格</h1><h2 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h2><p>科技、时尚、未来、神秘、低生活、黑客、数字空间、恐怖·····</p><p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/5.jpg" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/2.png" alt=""></p><h2 id="配色"><a href="#配色" class="headerlink" title="配色"></a>配色</h2><h3 id="黑暗系列"><a href="#黑暗系列" class="headerlink" title="黑暗系列"></a>黑暗系列</h3><p><font color=#1c1769>#1c1769</font> 、<font color=#eb19c4>#ed175c</font> 、<font color=#fc4ced>#fc4ced</font> 、<font color=#05ffdc>#05ffdc</font>   、<font color=#40d4fa>#40d4fa</font> 、<font color=#e2fcfd>#e2fcfd</font> 、<font color=#21eafe>#21eafe</font> </p><h3 id="光感"><a href="#光感" class="headerlink" title="光感"></a>光感</h3><p>背景偏暗，要灯光点要强烈光感，方框线高亮</p><p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/7.jpg" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/9.jpg" alt=""></p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>故障感、粗体、倾斜</p><h3 id="屏幕故障"><a href="#屏幕故障" class="headerlink" title="屏幕故障"></a>屏幕故障</h3><p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/6.png" alt=""></p><p>注入灵魂。RGB 三原色 体现出来</p><p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/4.png" alt=""></p><h3 id="环境字体"><a href="#环境字体" class="headerlink" title="环境字体"></a>环境字体</h3><p>字体描边高亮，字体彩色阴影</p><h3 id="反光"><a href="#反光" class="headerlink" title="反光"></a>反光</h3><p>灯光线反射强烈程度根据反射物决定，暗淡透明升高 或 高亮直白</p><p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/1.jpg" alt=""></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;赛博风格&quot;&gt;&lt;a href=&quot;#赛博风格&quot; class=&quot;headerlink&quot; title=&quot;赛博风格&quot;&gt;&lt;/a&gt;赛博风格&lt;/h1&gt;&lt;h2 id=&quot;元素&quot;&gt;&lt;a href=&quot;#元素&quot; class=&quot;headerlink&quot; title=&quot;元素&quot;&gt;&lt;/a&gt;元素&lt;/h
      
    
    </summary>
    
    
      <category term="其他" scheme="https://Sanscan12.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="分享" scheme="https://Sanscan12.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
      <category term="搭色" scheme="https://Sanscan12.github.io/tags/%E6%90%AD%E8%89%B2/"/>
    
      <category term="喜好" scheme="https://Sanscan12.github.io/tags/%E5%96%9C%E5%A5%BD/"/>
    
  </entry>
  
  <entry>
    <title>Hexo个人装饰及解决问题篇</title>
    <link href="https://sanscan12.github.io/posts/e958.html"/>
    <id>https://sanscan12.github.io/posts/e958.html</id>
    <published>2020-04-26T16:00:00.000Z</published>
    <updated>2020-05-28T01:32:28.049Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo个人装饰篇"><a href="#Hexo个人装饰篇" class="headerlink" title="Hexo个人装饰篇"></a>Hexo个人装饰篇</h1><h2 id="颜色更改"><a href="#颜色更改" class="headerlink" title="颜色更改"></a>颜色更改</h2><p>看图，找要修改样式颜色的！</p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/Blogdecoration/no3.jpg" style="zoom:50%;" /><p>主题里的文件路径：<code>..\source\css\matery.css</code><br>在本地找到相应位置的文件查找对象修改部署即可！！!<br>附加：可选透明颜色的值有</p><table><thead><tr><th>颜色值</th><th>说明</th></tr></thead><tbody><tr><td>rgba(255, 255, 255, 0.6)</td><td>最后一个参数是调节透明度</td></tr><tr><td>transparent</td><td>完全透明</td></tr></tbody></table><h2 id="背景渐变颜色"><a href="#背景渐变颜色" class="headerlink" title="背景渐变颜色"></a>背景渐变颜色</h2><p>以下是颜色值：</p><pre class="line-numbers language-css"><code class="language-css">  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">142</span>,<span class="token number">140</span>, <span class="token number">220</span>, <span class="token number">0.7</span><span class="token punctuation">)</span>, <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">215</span>,<span class="token number">180</span>, <span class="token number">215</span>, <span class="token number">0.7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>参数1的值</th><th>说明</th></tr></thead><tbody><tr><td>to right(向右)、to left(向左)、to top(向上)、to buttom(向下)</td><td>线性渐变</td></tr><tr><td>right top、right buttom、left top、left buttom</td><td>斜线渐变</td></tr><tr><td>circle</td><td>放射性渐变</td></tr><tr><td>ellipse</td><td>圆形渐变</td></tr></tbody></table><h2 id="文本阴影"><a href="#文本阴影" class="headerlink" title="文本阴影"></a>文本阴影</h2><p>以下是颜色值：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">text-shadow</span><span class="token punctuation">:</span><span class="token number">0</span>px <span class="token number">0</span>px <span class="token number">3</span>px <span class="token hexcode">#05ffd</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>参数：</p><ol><li>阴影水平偏移值（可取正负值）</li><li>阴影垂直偏移值（可取正负值）</li><li>阴影模糊值</li><li>阴影颜色</li></ol></blockquote><h2 id="透明背景"><a href="#透明背景" class="headerlink" title="透明背景"></a>透明背景</h2><p>看图：<br><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/Blogdecoration/no4.jpg" alt=""></p><p>样式属性为：background-color: transparent; 即可！<br>主题里的文件路径：<code>..\source\css\matery.css</code></p><h2 id="主页面壁纸透明"><a href="#主页面壁纸透明" class="headerlink" title="主页面壁纸透明"></a>主页面壁纸透明</h2><p>先用ps对图片进行编辑！</p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/Blogdecoration/no1.jpg" style="zoom:50%;" /><p>在ps另存PNG格式，然后编辑更改为JPG格式</p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/Blogdecoration/no2.jpg" style="zoom:50%;" /><p>把图片文件放到相应位置即可部署即可！！!</p><h2 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h2><p>在<code>themes/matery/source/css/matery.css</code>找到<code>.bg-color</code>类选择器编辑即可<br>下图是我的编辑<br><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/Blogdecoration/no7.jpg" alt=""></p><h2 id="背景动态线条"><a href="#背景动态线条" class="headerlink" title="背景动态线条"></a>背景动态线条</h2><p>在<code>themes/matery/layout/layout.ejs</code>文件里的body范围内添加以下代码：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span>color<span class="token operator">=</span><span class="token string">"209 235 227"</span> opacity<span class="token operator">=</span><span class="token string">'0.6'</span> zIndex<span class="token operator">=</span><span class="token string">"-2"</span> count<span class="token operator">=</span><span class="token string">"300"</span> src<span class="token operator">=</span><span class="token string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="全局字体"><a href="#全局字体" class="headerlink" title="全局字体"></a>全局字体</h2><p>如果你有你喜欢的字体，先网站  <a href="https://transfonter.org/" target="_blank" rel="noopener">https://transfonter.org/</a>  编码，字体转base64编码<br><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/Blogdecoration/no6.jpg" style="zoom: 33%;" /></p><p>下载完后，在博客路径里<code>../source/font</code>里放刚刚下载的字体文件（.ttf）。如果没有font文件夹自行创建放进去。<br>最后在路径<code>../themes/matery/source/css/my.css</code>添加代码。</p><pre class="line-numbers language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span><span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'myFont'</span><span class="token punctuation">;</span>    <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('../font/myFont.ttf')</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">body</span><span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'myFont'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子：</p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/Blogdecoration/no5.jpg" style="zoom:50%;" /><p>保存部署即可。<br><strong>学习来源：</strong></p><ol><li><a href="https://www.cnblogs.com/victorlyw/articles/9970805.html" target="_blank" rel="noopener">https://www.cnblogs.com/victorlyw/articles/9970805.html</a></li><li><a href="https://yafine-blog.cn/posts/49fb.html" target="_blank" rel="noopener">https://yafine-blog.cn/posts/49fb.html</a></li></ol><h2 id="代码块样式"><a href="#代码块样式" class="headerlink" title="代码块样式"></a>代码块样式</h2><p>在根路经git运行</p><pre class="line-numbers language-npm"><code class="language-npm">npm i -S hexo-prism-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在根路经目录下_config.yml打开，查找位置<code>highlight</code>，大概位置在50行</p><pre class="line-numbers language-yml"><code class="language-yml">highlight:  enable: false # 把原本的true改为false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在下面新添加以下代码：</p><pre class="line-numbers language-yml"><code class="language-yml">prism_plugin:  mode: 'preprocess'     theme: 'duotone-light' #主题  line_number: true  custom_css: ''     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新部署即可~<br><strong>学习来源：</strong><a href="https://yafine-blog.cn/posts/8c84.html#toc-heading-7" target="_blank" rel="noopener">https://yafine-blog.cn/posts/8c84.html#toc-heading-7</a></p><h2 id="动态标题"><a href="#动态标题" class="headerlink" title="动态标题"></a>动态标题</h2><p>在主题文件下的<code>layout/layout.ejs</code>文件中添加代码，要在标签<code>&lt;bdoy&gt;</code>内添加</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>        <span class="token keyword">var</span> OriginTitile<span class="token operator">=</span>document<span class="token punctuation">.</span>title<span class="token punctuation">,</span>st<span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"visibilitychange"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            document<span class="token punctuation">.</span>hidden<span class="token operator">?</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>title<span class="token operator">=</span><span class="token string">" 网站丢失啦 qwq ！"</span><span class="token punctuation">,</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>title<span class="token operator">=</span><span class="token string">"ヾ(Ő∀Ő3)ノ欢迎回来！"</span><span class="token punctuation">,</span>st<span class="token operator">=</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>document<span class="token punctuation">.</span>title<span class="token operator">=</span>OriginTitile<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">3e3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>学习来源：</strong><a href="https://yafine-blog.cn/posts/8c84.html#toc-heading-7" target="_blank" rel="noopener">https://yafine-blog.cn/posts/8c84.html#toc-heading-7</a></p><h2 id="鼠标样式"><a href="#鼠标样式" class="headerlink" title="鼠标样式"></a>鼠标样式</h2><p>首先你找到自己喜欢的鼠标图，后缀最好是png格式32x32大小的透明背景图，别的格式不能保证起到期望效果，也可以自己动手ps。</p><blockquote><p><font color=red> <strong>重点：</strong></font></p><ol><li>图片大小32x32</li><li>图片格式png</li><li>图片背景透明</li><li>3个鼠标样式分为：默认、链接/图片、指示文本</li></ol></blockquote><p><strong>教程步骤：</strong></p><ol><li>在主题路径的 <code>source</code> 里新建文件夹 <code>shubiao</code> 的文件夹</li><li><code>shubiao</code> 用来存放鼠标图片的位置，留意一下图片名称一会用到</li><li>到主题路径的 <code>source\css\my.css</code> 的my.css文件配置样式</li><li>在最下面添加代码（不要盲目照抄，因为我用的是自己的仓库）</li><li><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo  s</code> 在4000端口预览，成功部署即可！！！</li></ol><p>url中我用了鼠标样式图片加速，使用方法：</p><pre class="line-numbers language-text"><code class="language-text">http://cdn.jsdelivr.net/gh/[github用户名]/[github用户名.github.io]/shubiao/图片名加后缀<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我用的，例子：</p><pre class="line-numbers language-text"><code class="language-text">http://cdn.jsdelivr.net/gh/Sanscan12/Sanscan12.github.io/shubiao/11.png<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><font color=red> <strong>鼠标样式末端定义说明：</strong></font><br>11.png 默认样式样式<br>22.png 链接打开样式<br>33.png 指示文本样式<br>url的值可以根据自己的图片链接设定</p></blockquote><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">{</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> <span class="token url">url("http://cdn.jsdelivr.net/gh/Sanscan12/Sanscan12.github.io/shubiao/11.png")</span>, default <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div </span><span class="token punctuation">{</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> <span class="token url">url("http://cdn.jsdelivr.net/gh/Sanscan12/Sanscan12.github.io/shubiao/11.png")</span>, default <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">a<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> <span class="token url">url("http://cdn.jsdelivr.net/gh/Sanscan12/Sanscan12.github.io/shubiao/22.png")</span>, pointer <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">a<span class="token pseudo-class">:hover</span> span </span><span class="token punctuation">{</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> <span class="token url">url("http://cdn.jsdelivr.net/gh/Sanscan12/Sanscan12.github.io/shubiao/22.png")</span>, pointer <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div<span class="token pseudo-class">:hover</span> img </span><span class="token punctuation">{</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> <span class="token url">url("http://cdn.jsdelivr.net/gh/Sanscan12/Sanscan12.github.io/shubiao/22.png")</span>, pointer <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div<span class="token pseudo-class">:hover</span> span </span><span class="token punctuation">{</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> <span class="token url">url("http://cdn.jsdelivr.net/gh/Sanscan12/Sanscan12.github.io/shubiao/22.png")</span>, pointer <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div<span class="token pseudo-class">:hover</span> button </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*d */</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> <span class="token url">url("http://cdn.jsdelivr.net/gh/Sanscan12/Sanscan12.github.io/shubiao/22.png")</span>, pointer <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div<span class="token pseudo-class">:hover</span> textarea </span><span class="token punctuation">{</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> <span class="token url">url("http://cdn.jsdelivr.net/gh/Sanscan12/Sanscan12.github.io/shubiao/33.png")</span>, pointer <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div<span class="token pseudo-class">:hover</span> input </span><span class="token punctuation">{</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> <span class="token url">url("http://cdn.jsdelivr.net/gh/Sanscan12/Sanscan12.github.io/shubiao/33.png")</span>, pointer <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码详细：（可跳过）</strong></p><p><code>:hover</code> ：作用鼠标经过时显示</p><p><code>!important</code>：可以获取最高权限来下显示鼠标样式，并覆盖原有的鼠标样式</p><p><code>cursor</code> 属性规定要显示的光标的类型（形状）该属性定义了鼠标指针放在一个元素边界范围内时所用的光标形状</p><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">url</td><td align="left">需使用的自定义光标的 URL。注释：请在此列表的末端始终定义一种普通的光标，以防没有由 URL 定义的可用光标</td></tr><tr><td align="left">default</td><td align="left">默认光标（通常是一个箭头）</td></tr><tr><td align="left">auto</td><td align="left">默认。浏览器设置的光标</td></tr><tr><td align="left">crosshair</td><td align="left">光标呈现为十字线</td></tr><tr><td align="left">pointer</td><td align="left">光标呈现为指示链接的指针（一只手）</td></tr><tr><td align="left">move</td><td align="left">此光标指示某对象可被移动</td></tr><tr><td align="left">e-resize</td><td align="left">此光标指示矩形框的边缘可被向右（东）移动</td></tr><tr><td align="left">ne-resize</td><td align="left">此光标指示矩形框的边缘可被向上及向右移动（北/东）</td></tr><tr><td align="left">nw-resize</td><td align="left">此光标指示矩形框的边缘可被向上及向左移动（北/西）</td></tr><tr><td align="left">n-resize</td><td align="left">此光标指示矩形框的边缘可被向上（北）移动</td></tr><tr><td align="left">se-resize</td><td align="left">此光标指示矩形框的边缘可被向下及向右移动（南/东）</td></tr><tr><td align="left">sw-resize</td><td align="left">此光标指示矩形框的边缘可被向下及向左移动（南/西）</td></tr><tr><td align="left">s-resize</td><td align="left">此光标指示矩形框的边缘可被向下移动（南）</td></tr><tr><td align="left">w-resize</td><td align="left">此光标指示矩形框的边缘可被向左移动（西）</td></tr><tr><td align="left">text</td><td align="left">此光标指示文本</td></tr><tr><td align="left">wait</td><td align="left">此光标指示程序正忙（通常是一只表或沙漏）</td></tr><tr><td align="left">help</td><td align="left">此光标指示可用的帮助（通常是一个问号或一个气球）</td></tr></tbody></table><h2 id="目录样式"><a href="#目录样式" class="headerlink" title="目录样式"></a>目录样式</h2><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/Mlml1.png" style="zoom:50%;" /><blockquote><ol><li>滚动条去掉</li><li>方块去掉</li></ol></blockquote><p>在主题文件下 <code>source\css\my.css</code> 文件，最下面添加代码</p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*去掉滚动条*/</span><span class="token selector"><span class="token id">#toc-content</span> </span><span class="token punctuation">{</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> visible <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*去掉方块*/</span><span class="token selector"><span class="token id">#toc-content</span> <span class="token class">.is-active-link</span><span class="token pseudo-element">::before</span> </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> transparent <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo  s</code> 在4000端口预览，成功部署即可！！！</p><h2 id="滚动条样式"><a href="#滚动条样式" class="headerlink" title="滚动条样式"></a>滚动条样式</h2><p>在主题文件下 <code>source\css\my.css</code> 文件，最下面添加代码</p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 滚动条 */</span><span class="token comment" spellcheck="true">/*滚动条样式*/</span><span class="token selector"><span class="token pseudo-element">::-webkit-scrollbar-thumb</span> </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#05ffdc</span><span class="token punctuation">;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span><span class="token number">45</span>deg,<span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">64</span>,<span class="token number">64</span>,<span class="token number">64</span>,<span class="token number">.4</span><span class="token punctuation">)</span> <span class="token number">25%</span>,transparent <span class="token number">25%</span>,transparent <span class="token number">50%</span>,<span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">64</span>,<span class="token number">64</span>,<span class="token number">64</span>,<span class="token number">.4</span><span class="token punctuation">)</span> <span class="token number">50%</span>,<span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">64</span>,<span class="token number">64</span>,<span class="token number">64</span>,<span class="token number">.4</span><span class="token punctuation">)</span> <span class="token number">75%</span>,transparent <span class="token number">75%</span>,transparent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 滚动条圆角*/</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">2</span>em<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*鼠标移到的样式*/</span><span class="token selector"><span class="token pseudo-element">::-webkit-scrollbar-thumb</span><span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#05ceae</span><span class="token punctuation">;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span><span class="token number">45</span>deg,<span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">.4</span><span class="token punctuation">)</span> <span class="token number">25%</span>,transparent <span class="token number">25%</span>,transparent <span class="token number">50%</span>,<span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">.4</span><span class="token punctuation">)</span> <span class="token number">50%</span>,<span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">.4</span><span class="token punctuation">)</span> <span class="token number">75%</span>,transparent <span class="token number">75%</span>,transparent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*滚动条背景*/</span><span class="token selector"><span class="token pseudo-element">::-webkit-scrollbar-track</span> </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#3f426f</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*横向时或纵向时的宽高*/</span><span class="token selector"><span class="token pseudo-element">::-webkit-scrollbar</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo  s</code> 在4000端口预览，成功部署即可！！！</p><h1 id="hexo问题解决篇"><a href="#hexo问题解决篇" class="headerlink" title="hexo问题解决篇"></a>hexo问题解决篇</h1><h2 id="文章链接溢出问题"><a href="#文章链接溢出问题" class="headerlink" title="文章链接溢出问题"></a>文章链接溢出问题</h2><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/lj.png" style="zoom:50%;" /><p><strong>解决方案</strong></p><p>在主题文件下<code>source\css\matery.css</code> 文件，查找<code>#artDetail .reprint</code> 位置中添加<code>word-break: break-all;</code>代码。<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo  s</code> 在4000端口预览，成功部署即可！！！<br>以下是例子</p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/lj22.png" style="zoom:50%;" /><p>等待更新····</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hexo个人装饰篇&quot;&gt;&lt;a href=&quot;#Hexo个人装饰篇&quot; class=&quot;headerlink&quot; title=&quot;Hexo个人装饰篇&quot;&gt;&lt;/a&gt;Hexo个人装饰篇&lt;/h1&gt;&lt;h2 id=&quot;颜色更改&quot;&gt;&lt;a href=&quot;#颜色更改&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://Sanscan12.github.io/categories/hexo/"/>
    
    
      <category term="css" scheme="https://Sanscan12.github.io/tags/css/"/>
    
      <category term="分享" scheme="https://Sanscan12.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>结构写作</title>
    <link href="https://sanscan12.github.io/posts/54dc.html"/>
    <id>https://sanscan12.github.io/posts/54dc.html</id>
    <published>2020-04-23T16:00:00.000Z</published>
    <updated>2020-05-25T14:25:43.977Z</updated>
    
    <content type="html"><![CDATA[<h1 id="结构写作训练"><a href="#结构写作训练" class="headerlink" title="结构写作训练"></a>结构写作训练</h1><h2 id="确定写作方向"><a href="#确定写作方向" class="headerlink" title="确定写作方向"></a>确定写作方向</h2><p><font size=2>如何确定写作内容？</font></p><h3 id="分析目标对象"><a href="#分析目标对象" class="headerlink" title="分析目标对象"></a>分析目标对象</h3><p> 通过<strong>提问</strong>、<strong>观察</strong>、<strong>侧面了解</strong>。<br> <strong>第一层次：</strong>对方是否与你所持的立场一致?<br> <strong>第二层次：</strong>对方是否存在客观环境和外部资源的约束？</p><hr><p><font color = #b3d4fc size=5><strong>例子：</strong></font></p><p>　　老板最近发现公司的效率不高，是因为层级太多，导致信息传递很慢。于是，他想通过减少组织层级的方法，来解决这个问题。但是呢，这种方案在实际执行后，会遇到很多阻力，没法一下子什么都不管地进行推进。于是，他布置了一个任务，让部门写一份组织架构调整方案。<br>　　老板是想通过减少组织层级来提高效率的（目的），实际行动时，会遇到很多问题，有客观环境和外部资源的问题（约束），只是苦于没有解决这些问题的方案，所以暂时没办法这么实施行动。</p><hr><h3 id="游说矩形"><a href="#游说矩形" class="headerlink" title="游说矩形"></a>游说矩形</h3><table><thead><tr><th></th><th><strong>与你立场一致</strong></th><th><strong>与你立场不一致</strong></th></tr></thead><tbody><tr><td><strong>不存在约束（资源充足）</strong></td><td>罗列事实:提供给对方需要知道的事实</td><td>说服:强调利益所在，说服对方转换立场</td></tr><tr><td><strong>存在约束</strong></td><td>解决问题:对受约束的问题，提供解决方案</td><td>既要说服，也要解决问题</td></tr></tbody></table><hr><p><font color = #b3d4fc size=5><strong>例子：</strong></font></p><p>　　上司让你写一份策划案，关于举办元旦庆祝晚会的事，预算金<br>额大概是5000元。<br><strong>情况一，立场一致且不存在资源约束问题</strong></p><blockquote><p><font size=2><strong>就可以只简单提供给对方他需要知道的事实</strong>。只需要把这个场所离工作的地点近、菜单品种丰富、要价也在预算之内等信息，传递给你的老板就好了。</font></p></blockquote><p><strong>情况二，立场一致且存在资源约束问题</strong></p><blockquote><p><font size=2><strong>需要侧重于解决问题，受约束的问题，提供你的解决方案</strong>。因此，把事情分析清楚，使他觉得“虽然超支1000元、但是非常物有所值”。或者也可以告诉老板，如果这次能多提供1000元的预算资金，你会在另外一个活动中节约出这1000元的预算开支等。</font></p></blockquote><p><strong>情况三，立场不一致且不存在资源约束问题</strong></p><blockquote><p><font size=2><strong>内容就应该强调你的建议能带来的好处，说服对方转换立场，同意你的建议。</strong>庆祝元旦的方式由聚餐改为去看话剧演出。就应该是强调看元旦话剧演出的好处，想办法说服你的老板，让他转换立场。比如说，看元旦话剧，更能够给员工留下特殊的回忆等等。</font></p></blockquote><p><strong>情况四，立场不一致且存在资源约束问题</strong></p><blockquote><p><font size=2><strong>先说服对方转换立场，再解决相关的约束问题。</strong>如果你想建议用看一场元旦话剧演出代替原来的聚餐，而且演出的整体票价也超过了预算。就应该是先表明看元旦话剧演出的处，让他转换立场，再对预算超了的问题提出解决方案。</font></p></blockquote><hr><h2 id="构思写作框架"><a href="#构思写作框架" class="headerlink" title="构思写作框架"></a>构思写作框架</h2><h3 id="四步法构思写作框架"><a href="#四步法构思写作框架" class="headerlink" title="四步法构思写作框架"></a>四步法构思写作框架</h3><ol><li><p><strong>收集素材：</strong>事实、观点、故事、新闻</p></li><li><p><strong>提炼结构：</strong><br>信息归类、归纳共性、提炼结构、验证结构</p><p>常用结构：简单类、要素类、二维矩形类、流程类</p></li><li><p><strong>补充信息：</strong>除了包括最开始的素材，从最终确定的结构所关联想到的相关素材 ，也需要补充</p></li><li><p><strong>提炼主题：</strong><br>结论法：由下层信息推导出上层信息，适用于做因果关系推论</p></li></ol><hr><p><strong>事实</strong>是已经发生或存在的一种客观状况，它可以被证明真或假。而<strong>观点</strong>则往往表达个人的看法，是你的预测、推断、结论等主观的表达。比如你说今天很冷，但别人不这么认为···。好的<strong>故事</strong>，能够吸引读者看下去，或者调动他们的情感、引发共鸣，又或者让内容更容易被理解。<strong>新闻</strong>素材，有时效性，能作为事实信息来佐证自己的观点。新闻素材可根据场景来定。<br><font color = #b3d4fc size=5><strong>例子：</strong></font></p><p>　　朋友来向你询问职业选择的建议，他拿到了两个offer，技术方面的，销售方面的。你分析了他的特点和相关岗位后。以下是你经过头脑风暴和查阅资料后，收集到的素材:</p><ol><li>他学的专业是工科，有做技术的基本知识</li><li>他的性格外向，更喜欢与人交往，做销售可能更适合他的个性</li><li>销售岗位的晋升可能更容易，晋升会伴随着加薪</li><li>做技术的基本工资可能较高</li><li>销售的奖金更多</li><li>他没有做销售的经验和知识，上手需要–定的时间</li></ol><p><strong>信息归类：</strong>3 , 4 , 5 ；1 , 6  ；2<br><strong>归纳共性：</strong>3 , 4 , 5 归纳为工资待遇，1 , 6 归纳为知识经验和经验储备，2就是有关性格的<br><strong>提炼结构：</strong>以重要性可分类为：工资、性格、知识储备。然后根据MECE原则验证结构。</p><p>把工资、知识经验储备和性格，补充为赚钱、擅长和兴趣的最终结构。赚钱分组下，原来收集的素材中只考虑了基本工资、加薪速度、奖金等，现在还能想到的是，发放的福利也会影响赚钱的多少，所以可以将它补充进去。<strong>补充信息</strong>。</p><p>素材中推导出各个类别的三个子主题是“做销售更有赚大钱的机会”、“朋友更喜欢做销售”、“朋友能够把销售做好”。最后主题为：我应该建议朋友做销！</p><hr><h2 id="填充内容与成文修改"><a href="#填充内容与成文修改" class="headerlink" title="填充内容与成文修改"></a>填充内容与成文修改</h2><p><font size=2>如何丰富内容和修改？</font></p><h3 id="正式写作四个步骤"><a href="#正式写作四个步骤" class="headerlink" title="正式写作四个步骤"></a>正式写作四个步骤</h3><ol><li><p><strong>主题鲜明：</strong></p><ul><li>主题要符合预期</li><li>铺垫要适应</li><li>避免没有思想的主题</li></ul></li><li><p><strong>完善提纲：</strong></p><p>根据提纲补充每个子主题下的支持信息</p></li><li><p><strong>承上启下：</strong></p><p>从上个平主题中，挑选个关键词/短语来总结思想，将用在下个主期的起始句中。</p></li><li><p><strong>结尾升华：</strong></p><p>阐明建议或下一步计划，展望未来。</p></li></ol><h3 id="检查修改文章的五个方面"><a href="#检查修改文章的五个方面" class="headerlink" title="检查修改文章的五个方面"></a>检查修改文章的五个方面</h3><ol><li><p><strong>主题：</strong><br>检查主题和子主题是否明确</p></li><li><p><strong>思路：</strong><br>检查支持主题的子主题是否充分，排布是否符合提纲的结构顺序</p></li><li><p><strong>内容：</strong></p><p>检查子主题内的支持论据是否具体，必要时加数字的证据</p></li><li><p><strong>表述：</strong></p><p>检查你的传达目的是否达到，语言是否尽量口语化。是否需要附注、附件。</p></li><li><p><strong>其他：</strong></p><p>检查语法、标点符号、词语</p></li></ol><h2 id="常见商务文体写作"><a href="#常见商务文体写作" class="headerlink" title="常见商务文体写作"></a>常见商务文体写作</h2><h3 id="商业邮件的六个步骤"><a href="#商业邮件的六个步骤" class="headerlink" title="商业邮件的六个步骤"></a>商业邮件的六个步骤</h3><ol><li>在标题栏写明主题</li><li>开头概括出需要接收者做的事(主题)</li><li>中间内容说明情况，用简单明了的词语、避免长句复杂句，重要的内容特殊标出。</li><li>结尾再次给山明确的行动指令，给出相关的截止时间。</li><li>某一单独部分的内容过多时，可以适当地使用链接和附件。</li><li>发送前，用5W1H来检验所给的信息是否完整。</li></ol><p>工作总结的三个部分</p><ol><li><strong>工作业绩</strong><br>写框架可参考KPI列表，或参考以下四个方面，对收入利润的贡献、对客户/用户的贡献、对管理的贡献和流程的贡献，以及对学习成长的贡献</li><li><strong>个人成长</strong><br>写框架可参考岗位所需的能力项目。客观分析个人的进步和不足，总结经验和教训；通过他人评价、个人真实案例来展现闪光点</li><li><strong>工作计划</strong><br>参考PDCA模型制定计划。P(Plan)计划、 D(Do)执行、 C(Check)检查、A(Action)修正</li></ol><p>未完成···</p><p><strong>学习来源：圈外同学</strong></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;结构写作训练&quot;&gt;&lt;a href=&quot;#结构写作训练&quot; class=&quot;headerlink&quot; title=&quot;结构写作训练&quot;&gt;&lt;/a&gt;结构写作训练&lt;/h1&gt;&lt;h2 id=&quot;确定写作方向&quot;&gt;&lt;a href=&quot;#确定写作方向&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="学习记录" scheme="https://Sanscan12.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="笔记" scheme="https://Sanscan12.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="圈外同学" scheme="https://Sanscan12.github.io/tags/%E5%9C%88%E5%A4%96%E5%90%8C%E5%AD%A6/"/>
    
  </entry>
  
</feed>
