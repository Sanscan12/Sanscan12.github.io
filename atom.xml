<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>柏竹博客</title>
  
  <subtitle>柏竹</subtitle>
  <link href="/Sanscan12.guithub.io/atom.xml" rel="self"/>
  
  <link href="https://sanscan.top/"/>
  <updated>2020-04-24T15:21:02.337Z</updated>
  <id>https://sanscan.top/</id>
  
  <author>
    <name>Sanscan12</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://sanscan.top/2020/04/24/hello-world/"/>
    <id>https://sanscan.top/2020/04/24/hello-world/</id>
    <published>2020-04-24T15:21:02.337Z</published>
    <updated>2020-04-24T15:21:02.337Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="highlight bash">$ hexo new <span class="string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="highlight bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="highlight bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="highlight bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript</title>
    <link href="https://sanscan.top/2020/04/21/JS/"/>
    <id>https://sanscan.top/2020/04/21/JS/</id>
    <published>2020-04-20T16:00:00.000Z</published>
    <updated>2020-04-21T15:00:56.302Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript初识"><a href="#JavaScript初识" class="headerlink" title="JavaScript初识"></a>JavaScript初识</h1><p>JavaScript是Web页面中的一种脚本编程语言，也是一种通用的、跨平台的、基于对象和事件驱动并具有安全性的脚本语言。它不需要进行编译，而是直接嵌入在HTML页面中，把静态页面转变成支持用户交互并响应相应事件的动态页面。</p><h1 id="在HTML中的使用"><a href="#在HTML中的使用" class="headerlink" title="在HTML中的使用"></a>在HTML中的使用</h1><h2 id="1-在页面中直接嵌入JavaScript"><a href="#1-在页面中直接嵌入JavaScript" class="headerlink" title="1.在页面中直接嵌入JavaScript"></a>1.在页面中直接嵌入JavaScript</h2><p>​    在HTML文档中可以使用<script>... </script>标记将JavaScript脚本嵌入到其中。<br>​<strong>script属性：</strong></p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>language</td><td>不常用</td></tr><tr><td>type</td><td>用于指定使用的脚本类型</td></tr><tr><td>src</td><td>指定外部脚本文件路径</td></tr><tr><td>defer</td><td>不常用</td></tr></tbody></table><p><strong>type属性的语法格式：</strong></p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><h2 id="2-链接外部JavaScript文件"><a href="#2-链接外部JavaScript文件" class="headerlink" title="2.链接外部JavaScript文件"></a>2.链接外部JavaScript文件</h2><p>​    语法格式：<em>多了个src属性</em></p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span> <span class="attr">src</span> = <span class="string">"js文件的rul路径"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><p><strong>注意：</strong><br>1.外部JavaScript文件中只能包含JavaScript代码，不能包含HTML和<code>&lt;script&gt;</code>标签。<br>2.在<code>&lt;script&gt;</code>标签内部不要存在其他的JavaScript代码。<br>3.在链接外部JavaScript文件时<code>&lt;/script&gt;</code>结束标签不能省略。</p><h2 id="3-作为标签的属性值使用"><a href="#3-作为标签的属性值使用" class="headerlink" title="3.作为标签的属性值使用"></a>3.作为标签的属性值使用</h2><p>在HTML文档中可以在<code>&lt;a&gt;</code>标签、<code>&lt;input&gt;</code>标签 中使用JavaScript脚本作为它们的属性值。<br>    <strong>通过“JavaScript”调用</strong></p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert('你好JavaScript')"</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></code></pre><p>​    <strong>与实践结合调用</strong></p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"测试"</span> <span class="attr">onclick</span>=<span class="string">"alert('你好JavaScript ')"</span> /&gt;</span></code></pre><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="1-执行顺序"><a href="#1-执行顺序" class="headerlink" title="1.执行顺序"></a>1.执行顺序</h2><p>程序按照在HTML文件中出现的顺序逐行执行。</p><h2 id="2-大小写敏感"><a href="#2-大小写敏感" class="headerlink" title="2.大小写敏感"></a>2.大小写敏感</h2><p>在输入语言的关键字、函数名、变量时，都必须采用正确的大小写形式。</p><h2 id="3-空格与换行"><a href="#3-空格与换行" class="headerlink" title="3.空格与换行"></a>3.空格与换行</h2><p>在JavaScript中会忽略程序中的空格、换行和制表符。</p><h2 id="4-每行结尾的分号可有可无"><a href="#4-每行结尾的分号可有可无" class="headerlink" title="4.每行结尾的分号可有可无"></a>4.每行结尾的分号可有可无</h2><h2 id="5-注释"><a href="#5-注释" class="headerlink" title="5.注释"></a>5.注释</h2><p>注释就是向文件代码中添加的–些说明性的文字，或者对代码进行暂时屏蔽。// ro /**/</p><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h3><table><thead><tr><th>数值类型</th><th>说明</th></tr></thead><tbody><tr><td>十进制</td><td>由0~9组成的数字序列。</td></tr><tr><td>十六进制</td><td>“0X”或“0x”开头数字序列</td></tr><tr><td>八进制</td><td>以0开头</td></tr><tr><td>浮点型数据</td><td>传统计数法、科学计数法 e或E后面的整数表示10的指数次幂</td></tr><tr><td>特殊值Infinity</td><td>超出最大值范围，则输出正值<br />超出最小范围，则输出负数</td></tr><tr><td>特殊值NaN</td><td>非数字</td></tr></tbody></table><h3 id="字符串型"><a href="#字符串型" class="headerlink" title="字符串型"></a>字符串型</h3><p>字符串是由0个或多个字符组成的序列，它可以包含<strong>太小写字母、数字、标点符号或其他字符，也可以包含汉字</strong>。程序中的字符串型数据是包含在<strong>单引号或双引号</strong>中的。<br><em>由单引号定界的字符串中可以含有双引号，由双引号定界的字符串中也可以含有单引号。</em><br><em>空字符串不包含任何字符，也不包含任何空格，用一对引号表示，即 “” 或 ‘ ‘</em><br>转义字符：<br>转义字符是“\”，通过转义字符可以在字符串中添加不可显示的特殊字符(例如\n, \t)，或者防止引号匹配混乱的问题(&#39;、&quot;) 。</p><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><table><thead><tr><th>转义字符</th><th>描述</th></tr></thead><tbody><tr><td>\r</td><td>回车符</td></tr><tr><td>\t</td><td>水平制表符，Tab空 格</td></tr><tr><td>\b</td><td>退格</td></tr><tr><td>\v</td><td>垂直制表符</td></tr><tr><td>\f</td><td>换页</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\ \</td><td>反斜杠</td></tr><tr><td>\OOO</td><td>八进制，范围000~777</td></tr><tr><td>\ ‘</td><td>单引号</td></tr><tr><td>\xHH</td><td>十六进制整数，范围00~FF</td></tr><tr><td>\ “</td><td>双引号</td></tr><tr><td>\uhhhh</td><td>十六进制编码Unicode字符</td></tr></tbody></table><p><em>在document. write()语句中使用转义字符时，只有将其放在格式化文本块中才会起作用，即脚本必须放在<pre></pre>标签内。</em></p><h3 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h3><p>布尔数据类型只有两个值，一 个是true (真)，一个是false (假)，它说明了某个事物是真还是假。<br>特殊数据类型：<br>未定义值就是undefined，表示还没赋值</p><h3 id="空值（null）"><a href="#空值（null）" class="headerlink" title="空值（null）"></a>空值（null）</h3><p>用于定义空的或不存在的引用。</p><h3 id="常量与变量"><a href="#常量与变量" class="headerlink" title="常量与变量"></a>常量与变量</h3><p>常量：固定不变数据<br>变量：存储要用的数据<br>如果只是声明了变量，并未对其赋值，则其值默认为undef ined。可以使用var语句重复声明同一个变量，也可以在重复声明变量时为该变量赋一个新值。<br><em>在JavaScript中的变量必须要先定义后使用，没有定义过的变量不能直接使用。</em></p><h2 id="JavaScript的关键字"><a href="#JavaScript的关键字" class="headerlink" title="JavaScript的关键字"></a>JavaScript的关键字</h2><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>abstract</td><td>continue</td><td>finally</td><td>instanceof</td><td>private</td></tr><tr><td>boolean</td><td>default</td><td>float</td><td>int</td><td>public</td></tr><tr><td>break</td><td>do</td><td>for</td><td>interface</td><td>return</td></tr><tr><td>byte</td><td>double</td><td>function</td><td>long</td><td>short</td></tr><tr><td>case</td><td>else</td><td>goto</td><td>native</td><td>static</td></tr><tr><td>catch</td><td>extends</td><td>implements</td><td>new</td><td>super</td></tr><tr><td>char</td><td>false</td><td>import</td><td>null</td><td>switch</td></tr><tr><td>class</td><td>final</td><td>in</td><td>package</td><td>synchronized</td></tr><tr><td>this</td><td>throw</td><td>typeof</td><td>true</td><td>var</td></tr><tr><td>void</td><td>while</td><td>with</td><td></td><td></td></tr></tbody></table><h1 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h1><p>用于在程序中进行加、减、乘、除等运算。</p><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>对操作数进行比较，然后返回一个布尔值true或faIse.</p><pre><code class="highlight django"><span class="xml"><span class="tag">&lt; , &lt;= <span class="string">,</span> &gt;</span> , &gt;= , == , != , === (绝对等于) , !==(绝对不等于)</span></code></pre><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p><strong>简单赋值运算符</strong>：=<br><strong>符合赋值运算符</strong>：+= , -= , *= , /= , %=</p><h2 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h2><p>用于两个字符串型数据之间的运算符，它的作用是将两个字符串连接起来。<br><em>如果比较字符串，则逐个比较字符的ASCIl码值，ASCII码值大的字符串大。ASCII码值都相等，字符数多的字符串大。</em></p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>用于对一个或多个布尔值进行逻辑运算：&amp;&amp; 与 , || 或 , ! 非 </p><h2 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h2><pre><code class="highlight angelscript">表达式?结果<span class="number">1</span>:结果<span class="number">2</span>结果<span class="number">1</span>为<span class="literal">true</span>结果<span class="number">2</span>为<span class="literal">false</span></code></pre><h2 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h2><p>用于将多个表达式排在一起，整个表达式的值为最后一个表达式的值。<br>例子：</p><pre><code class="highlight javascript"><span class="keyword">var</span> a , b , c , d;a = (b=<span class="number">3</span> , c=<span class="number">4</span> , d=<span class="number">1</span>);<span class="built_in">document</span>.write(<span class="string">"a最终值为"</span>+a);结果为 <span class="number">1</span></code></pre><h2 id="typeof运算符"><a href="#typeof运算符" class="headerlink" title="typeof运算符"></a>typeof运算符</h2><p>用于判断操作数的数据类型。语法格式：</p><pre><code class="highlight javascript"><span class="keyword">typeof</span> 操作数;</code></pre><table><thead><tr><th>数据类型（操作数）</th><th>返回值</th></tr></thead><tbody><tr><td>数值型</td><td>number</td></tr><tr><td>字符串型</td><td>string</td></tr><tr><td>布尔型</td><td>boolean</td></tr><tr><td>undefined</td><td>nudefined</td></tr><tr><td>null</td><td>object</td></tr><tr><td>对象</td><td>object</td></tr><tr><td>函数</td><td>functio</td></tr></tbody></table><h2 id="new运算符"><a href="#new运算符" class="headerlink" title="new运算符"></a>new运算符</h2><p>用来创建一个新的对象实例。语法格式：</p><pre><code class="highlight haxe">格式<span class="number">1</span>：对象实例名称 = <span class="keyword">new</span> <span class="type"></span>对象类型(参数);格式<span class="number">2</span>：对象实例名称 = <span class="keyword">new</span> <span class="type"></span>对象类型<span class="number">2</span>;</code></pre><h2 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h2><table><thead><tr><th>优先级</th><th>结合性</th><th>运算符</th></tr></thead><tbody><tr><td>最高</td><td>向左</td><td>、[]、()</td></tr><tr><td>由高到低依次排列</td><td></td><td>++、–、-、！、delete、new、typeof、void</td></tr><tr><td></td><td>向左</td><td>*、/、%</td></tr><tr><td></td><td>向左</td><td>+、-</td></tr><tr><td></td><td>向左</td><td>&lt;&lt;、&gt;&gt; 、&gt;&gt;</td></tr><tr><td></td><td>向左</td><td>&lt;、&lt;=、&gt;、&gt;=、in、instanceof</td></tr><tr><td></td><td>向左</td><td>=、!=、=== 、 绝对不等于</td></tr><tr><td></td><td>向左</td><td>&amp;</td></tr><tr><td></td><td>向左</td><td>^</td></tr><tr><td></td><td>向左</td><td>|</td></tr><tr><td></td><td>向左</td><td>&amp;&amp;</td></tr><tr><td></td><td>向左</td><td>||</td></tr><tr><td></td><td>向右</td><td>?:</td></tr><tr><td></td><td>向右</td><td>=</td></tr><tr><td></td><td>向右</td><td>=、/=、%=、+=、-=、&lt;&lt;=、&gt;&gt;=、&gt;&gt;&gt;=、&amp;=、^=、|=</td></tr><tr><td>最低</td><td>向右</td><td>,</td></tr></tbody></table><p><strong>结合性</strong><br>左结合：除了赋值、条件和单目运算符<br>右结合：赋值运算符、条件运算符</p><h1 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h1><p>是<strong>运算符</strong>和<strong>操作数</strong>组合而成的式子。运算结果可分为：<strong>算术表达式</strong>、<strong>字符串表达式</strong>、<strong>逻辑表达式</strong><br><em>表达式是一个相对的概念，在表达式中可以含有若千个子表达式，而且表达式中的一个常量或变量都可以看作是一个表达式。</em></p><h2 id="表达式类型转换"><a href="#表达式类型转换" class="headerlink" title="表达式类型转换"></a>表达式类型转换</h2><h3 id="转换为数值型"><a href="#转换为数值型" class="headerlink" title="转换为数值型"></a>转换为数值型</h3><table><thead><tr><th>类型</th><th>转换为数值型</th></tr></thead><tbody><tr><td>undefined</td><td>NaN</td></tr><tr><td>null</td><td>0</td></tr><tr><td>逻辑型</td><td>true,则为 1 ;false,则为 0</td></tr><tr><td>字符串型</td><td>若内容为数字，则相应的数字，否则为NaN</td></tr><tr><td>其他对象</td><td>NaN（非数字）</td></tr></tbody></table><h3 id="转换为布尔型"><a href="#转换为布尔型" class="headerlink" title="转换为布尔型"></a>转换为布尔型</h3><table><thead><tr><th>类型</th><th>转换为布尔型</th></tr></thead><tbody><tr><td>undefined</td><td>false</td></tr><tr><td>null</td><td>false</td></tr><tr><td>数值型</td><td>值为0或NaN,则结果为false,否则为true</td></tr><tr><td>字符串型</td><td>长度为0，则结果为false,否则为true</td></tr><tr><td>其他对象</td><td>true</td></tr></tbody></table><h3 id="转换为字符串型"><a href="#转换为字符串型" class="headerlink" title="转换为字符串型"></a>转换为字符串型</h3><table><thead><tr><th>类型</th><th>转换为字符串型</th></tr></thead><tbody><tr><td>undefined</td><td>“undefined”</td></tr><tr><td>null</td><td>“null”</td></tr><tr><td>数值型</td><td>NaN、0或者与数值相对应的字符串</td></tr><tr><td>逻辑型</td><td>值true,则为”true”,值为false,则结果为”false”</td></tr><tr><td>其他对象</td><td>若存在，结果为toString()方法的值，否则结果为”undefined”</td></tr></tbody></table><h1 id="语句结构"><a href="#语句结构" class="headerlink" title="语句结构"></a>语句结构</h1><h2 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h2><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><p><strong>if语句</strong>，语法格式：</p><pre><code class="highlight javascript"><span class="keyword">if</span>(表达式)&#123;  语句&#125;</code></pre><p><strong>if…else语句</strong>，语法格式：</p><pre><code class="highlight javascript"><span class="keyword">if</span>(表达式)&#123;  语句<span class="number">1</span>&#125;<span class="keyword">else</span>&#123;  语句<span class="number">2</span>&#125;</code></pre><p><strong>if…else if语句</strong>，语法格式：</p><pre><code class="highlight javascript"><span class="keyword">if</span>(表达式<span class="number">1</span>)&#123;  语句<span class="number">1</span>&#125;<span class="keyword">else</span> <span class="keyword">if</span>(表达式<span class="number">2</span>)&#123;    语句<span class="number">2</span>&#125;···<span class="keyword">else</span> <span class="keyword">if</span>(表达式n)&#123;    语句n&#125;<span class="keyword">else</span>&#123;    语句n+<span class="number">1</span>&#125;</code></pre><h3 id="if语句的嵌套"><a href="#if语句的嵌套" class="headerlink" title="if语句的嵌套"></a>if语句的嵌套</h3><p> 套娃格式，if中的if。语法格式：</p><pre><code class="highlight javascript"><span class="keyword">if</span>(表达式<span class="number">1</span>)&#123;    <span class="keyword">if</span>(表达式<span class="number">2</span>)&#123;        语句<span class="number">1</span>    &#125;<span class="keyword">else</span>&#123;        语句<span class="number">2</span>    &#125;&#125;<span class="keyword">else</span>&#123;    <span class="keyword">if</span>(表达式<span class="number">3</span>)&#123;        语句<span class="number">3</span>    &#125;<span class="keyword">else</span>&#123;        语句<span class="number">4</span>    &#125;&#125;</code></pre><h2 id="switch-分支语句"><a href="#switch-分支语句" class="headerlink" title="switch 分支语句"></a>switch 分支语句</h2><p>它根据一个表达式的值，选择不同的分支执行。语法格式：</p><pre><code class="highlight javascript"><span class="keyword">switch</span> (表达式)&#123;    <span class="keyword">case</span> 常量表达式<span class="number">1</span> :        语句<span class="number">1</span>;        ···;        <span class="keyword">break</span>;    <span class="keyword">case</span> 常量表达式<span class="number">2</span> :        语句<span class="number">2</span>;        ···;        <span class="keyword">break</span>;        ···    <span class="keyword">case</span> 常量表达式n :        语句n;        ···;        <span class="keyword">break</span>;    <span class="keyword">default</span>:语句n+<span class="number">1</span>;        <span class="keyword">break</span>;&#125;</code></pre><p><font color = #b3d4fc><strong><em>default语句可以省略。在表达式的值不能与任何一个case语句中的值相匹配的情况下，JavaScript会直接结束switch语句，不进行任何操作。</em></strong></font><br><font color=red><em>case后面常量表达式的数据类型必须与表达式的数据类型相同，否则匹配会全部失败，而去执行default语句中的内容。</em></font><br><font color=red><em>在switch语句中漏写break语句。则会影响其他语句</em></font></p><h2 id="while-循环语句"><a href="#while-循环语句" class="headerlink" title="while 循环语句"></a>while 循环语句</h2><p>也称为前测试循环语句，它是利用一个条件来控制是否要继续重复执行这个语句。语法格式：</p><pre><code class="highlight javascript"><span class="keyword">while</span>(表达式)(   语句（循环体）)</code></pre><p><font color =red><em>在使用while语句时，一定要保证循环可以正常结束，即必须保证条件表达式的值存在为false的情况，否则将形成死循环。</em></font></p><h2 id="do…while-循环语句"><a href="#do…while-循环语句" class="headerlink" title="do…while 循环语句"></a>do…while 循环语句</h2><p>也称为后测试循环语句，它也是利用一个条件来控制是否要继续重复执行这个语句。语法格式：</p><pre><code class="highlight javascript"><span class="keyword">do</span>&#123;   语句&#125;<span class="keyword">while</span>(表达式);</code></pre><h2 id="for-循环语句"><a href="#for-循环语句" class="headerlink" title="for 循环语句"></a>for 循环语句</h2><p>也称为计次循环语句，一般用于循环次数已知的情况。语法格式：</p><pre><code class="highlight javascript"><span class="keyword">if</span>(初始化表达式;条件表达式;迭代表达式)&#123;    语句（循环体）&#125;</code></pre><p><font color = red><em>在使用for语句时，也一定要保证循环可以正常结束，也就是必须保证循环条件的结果存在为false的情况，否则循环体将无休止地执行下去，从而形成死循环。</em></font></p><h2 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h2><h3 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h3><p>用于跳过本次循环，并开始下一次循环。<br><font color = #b3d4fc><em>当使用continue语句跳过本次循环后，如果循环条件的结果为false,则退出<br>循环，否则继续下一次循环。</em></font><br><font color = red><em>continue语句只能应用在while、for、do…while语句中.</em></font></p><h3 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h3><p>在循环语句中，break语句用于跳出循环。</p><p><font color = red><em>continue语句只能应用在while、for、do…while或switch语句中。在嵌套的循环语句中，break语句只能跳出当前这一层的循环语句，而不是跳出所有的循环语句。</em></font></p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><p>函数是<strong>定义一次</strong>，可以<strong>调用或执行多次</strong>的一段JavaScript代码。定义函数的语法格式：</p><pre><code class="highlight javascript"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">[参数<span class="number">1</span>,参数<span class="number">2.</span>..]</span>)</span>&#123;语句[<span class="keyword">return</span>返回值]&#125;</code></pre><h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2><h3 id="函数的简单调用"><a href="#函数的简单调用" class="headerlink" title="函数的简单调用"></a>函数的简单调用</h3><p>调用的语法格式：</p><pre><code class="highlight javascript">函数名(传递给函数的参数<span class="number">1</span>,传递给函数的参数<span class="number">2</span>,....);</code></pre><p><font color = red><strong>函数名有大小写的区分</strong></font></p><h3 id="在事件响应中调用函数"><a href="#在事件响应中调用函数" class="headerlink" title="在事件响应中调用函数"></a>在事件响应中调用函数</h3><p><strong>事件处理流程</strong>：</p><p><font size =5><em>触发事件→调用和执行函数→在页面中产生响应</em></font></p><h3 id="通过链接调用函数"><a href="#通过链接调用函数" class="headerlink" title="通过链接调用函数"></a>通过链接调用函数</h3><p>在 &lt; a &gt; 标签中的href(链接地址)属性中使用“ javascript: 函数名() ”格式来调用函数，当用户单击这个链接时，相关函数将被执行。</p><h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><p>函数的参数分为<strong>形参</strong>和<strong>实参</strong>。<br><strong>形参</strong>：定义函数时指定的参数<br><strong>实参</strong>：调用函数时实际传递的值<br>语法格式：</p><pre><code class="highlight javascript">定义函数参数的语法格式:<span class="function"><span class="keyword">function</span> 函数名(<span class="params">形参<span class="number">1</span>,形参<span class="number">2.</span>..</span>)</span>&#123;函数体&#125;调用函数语法格式:函数名(实参<span class="number">1</span>,实参<span class="number">2.</span>..);</code></pre><p> <font color = red><strong>形参和实参要对应</strong></font></p><h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><p>在函数中，可以使用return语句为函数返回一个值。语法格式：</p><pre><code class="highlight javascript">retutn 表达式;</code></pre><h2 id="嵌套函数"><a href="#嵌套函数" class="headerlink" title="嵌套函数"></a>嵌套函数</h2><h4 id="函数的嵌套定义"><a href="#函数的嵌套定义" class="headerlink" title="函数的嵌套定义"></a>函数的嵌套定义</h4><p>函数的嵌套定义就是在函数内部再定义其他的函数。<br> <font color = \#b3d4fc><em>允许使用函数的嵌套定义，但会使程序的可读性降低。</em></font></p><h4 id="函数的嵌套调用"><a href="#函数的嵌套调用" class="headerlink" title="函数的嵌套调用"></a>函数的嵌套调用</h4><p>允许在一个函数的函数体中对另一个函数进行调用。</p><h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><p>所谓递归函数就是函数在自身的函数体内调用自身，<strong>只在特定的情况下使用</strong>。语法格式：</p><pre><code class="highlight javascript"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">参数<span class="number">1</span></span>)</span>&#123;函数名(参数<span class="number">2</span>);&#125;</code></pre><p><font color = red><strong>注意判断结束条件，否则死循环！！！</strong></font></p><h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><table><thead><tr><th>内置函数</th><th></th></tr></thead><tbody><tr><td>parseInt()</td><td>数值处理 <strong>前四个</strong></td></tr><tr><td>parseFloat()</td><td></td></tr><tr><td>isNaN()</td><td></td></tr><tr><td>isFinite()</td><td></td></tr><tr><td>eval()</td><td>字符串处理函数 <strong>后五个</strong></td></tr><tr><td>escape()</td><td></td></tr><tr><td>unescape()</td><td></td></tr><tr><td>encodeURI()</td><td></td></tr><tr><td>decodeURI()</td><td></td></tr></tbody></table><h2 id="数值处理函数"><a href="#数值处理函数" class="headerlink" title="数值处理函数"></a>数值处理函数</h2><h3 id="parseInt-函数"><a href="#parseInt-函数" class="headerlink" title="parseInt() 函数"></a>parseInt() 函数</h3><p>该函数主要<strong>将首位为数字的字符串转换成数字</strong>，如果字符串不是以数字开头，那么将返回NaN，<strong>前提是默认十进制</strong>。语法格式：(默认十进制)</p><pre><code class="highlight javascript"><span class="built_in">parseInt</span>(<span class="built_in">String</span>,[进制数]) 如: <span class="built_in">parseInt</span>(<span class="string">"e2b"</span>,<span class="number">16</span>)</code></pre><h3 id="parseFloat-函数"><a href="#parseFloat-函数" class="headerlink" title="parseFloat() 函数"></a>parseFloat() 函数</h3><p>该函数主要<strong>将首位为数字的字符串转化成浮点型数字</strong>，如果字符串不是以数字开头，那么将返回NaN。语法格式：</p><pre><code class="highlight javascript"><span class="built_in">parseFloat</span>(<span class="built_in">String</span>)如: <span class="built_in">eval</span>(<span class="string">"5 * 4"</span>)</code></pre><h3 id="isNaN-函数"><a href="#isNaN-函数" class="headerlink" title="isNaN() 函数"></a>isNaN() 函数</h3><p>该函数主要用于<strong>检验某个值是否为NaN</strong>。语法格式：</p><pre><code class="highlight javascript"><span class="built_in">isNaN</span>(num)</code></pre><p><strong>返回值：</strong><br>如果参数 num 为 NaN ,函数返回值为true<br>如果参数 num 不为 NaN ,函数返回值为false</p><h3 id="isFinite-函数"><a href="#isFinite-函数" class="headerlink" title="isFinite() 函数"></a>isFinite() 函数</h3><p>该函数主要用于<strong>检验其参数是否有限</strong>。语法格式：</p><pre><code class="highlight stylus"><span class="function"><span class="title">isFinite</span><span class="params">(num)</span></span></code></pre><p>返回值：<br>如果参数 num 是 <strong>有限数字</strong>，则返回true<br>如果参数 num 是 <strong>NaN或无穷大</strong>，则返回false</p><h2 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h2><h3 id="eval-函数"><a href="#eval-函数" class="headerlink" title="eval() 函数"></a>eval() 函数</h3><p>该函数的功能是<strong>计算字符串表达式的值</strong>并执行。语法格式：</p><pre><code class="highlight javascript"><span class="built_in">eval</span>(<span class="built_in">String</span>)如: <span class="built_in">eval</span>(<span class="string">"5 * 4"</span>)</code></pre><h3 id="escape-函数"><a href="#escape-函数" class="headerlink" title="escape() 函数"></a>escape() 函数</h3><p>该函数用于<strong>将一些特殊字符</strong>(不包括字母和数字字符以及<em>、@、一、_、+、.和/)*</em>进行编码<strong>，它可以将这些特殊字符转换为“</strong>%XX**” 格式的数字。语法格式：</p><pre><code class="highlight javascript"><span class="built_in">escape</span>(<span class="built_in">String</span>)如: <span class="built_in">escape</span>(<span class="string">"You &amp; Me"</span>) →You%<span class="number">20</span>%<span class="number">26</span>%<span class="number">20</span>Me</code></pre><h3 id="unescape-函数"><a href="#unescape-函数" class="headerlink" title="unescape() 函数"></a>unescape() 函数</h3><p>该函数主要用于<strong>对应用escape()函数编码后的字符串进行解码</strong>。它可以将字符串中“<strong>%XX</strong>”格式的数字转换为字符。语法格式：</p><pre><code class="highlight javascript"><span class="built_in">unescape</span>(<span class="built_in">String</span>)如: <span class="built_in">unescape</span>(<span class="string">"You%20%26%20Me"</span>) →You &amp; Me</code></pre><h3 id="encodeURI-函数"><a href="#encodeURI-函数" class="headerlink" title="encodeURI() 函数"></a>encodeURI() 函数</h3><p>该函数主要用于<strong>将URI字符串进行编码</strong>。语法格式：</p><pre><code class="highlight javascript"><span class="built_in">encodeURI</span>(uri)如:<span class="built_in">encodeURI</span>(<span class="string">"https://www.baidu.com/?name=测试"</span>)</code></pre><h3 id="decodeURI-函数"><a href="#decodeURI-函数" class="headerlink" title="decodeURI() (函数)"></a>decodeURI() (函数)</h3><p>该函数主要用于<strong>对已编码的UR I字符串进行解码</strong>。语法格式：</p><pre><code class="highlight javascript"><span class="built_in">decodeURI</span>(uri)如:<span class="built_in">decodeURI</span>(<span class="string">"https://www.baidu.com/?name=%E6%B5%8B%E8%AF%95"</span>)</code></pre><h2 id="定义函数的其他方法"><a href="#定义函数的其他方法" class="headerlink" title="定义函数的其他方法"></a>定义函数的其他方法</h2><h3 id="定义匿名函数"><a href="#定义匿名函数" class="headerlink" title="定义匿名函数"></a>定义匿名函数</h3><p>语法格式：</p><pre><code class="highlight javascript"><span class="keyword">var</span> 变量名 = <span class="function"><span class="keyword">function</span>(<span class="params">参数<span class="number">1</span>，参数<span class="number">2.</span>..</span>)</span>&#123;函数体&#125;;</code></pre><h3 id="Function-构造函数"><a href="#Function-构造函数" class="headerlink" title="Function() 构造函数"></a>Function() 构造函数</h3><p>语法格式：</p><pre><code class="highlight javascript"><span class="keyword">var</span> 变量名 = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"参数1"</span>,<span class="string">"参数2"</span>,...<span class="string">"函数体"</span>);</code></pre><p><font color = red><strong>Function()构造函数中的所有参数和函数体都必须是字符串类型，因此一定要用双引号或单引号引起来。</strong></font></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaScript初识&quot;&gt;&lt;a href=&quot;#JavaScript初识&quot; class=&quot;headerlink&quot; title=&quot;JavaScript初识&quot;&gt;&lt;/a&gt;JavaScript初识&lt;/h1&gt;&lt;p&gt;JavaScript是Web页面中的一种脚本编程语言，也是一
      
    
    </summary>
    
    
      <category term="脚本语言" scheme="https://sanscan.top/categories/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="JavaScript" scheme="https://sanscan.top/tags/JavaScript/"/>
    
      <category term="笔记" scheme="https://sanscan.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>群辉DSM端口</title>
    <link href="https://sanscan.top/2020/04/21/%E7%BE%A4%E6%99%96DSM%E4%BD%BF%E7%94%A8%E7%AB%AF%E5%8F%A3/"/>
    <id>https://sanscan.top/2020/04/21/%E7%BE%A4%E6%99%96DSM%E4%BD%BF%E7%94%A8%E7%AB%AF%E5%8F%A3/</id>
    <published>2020-04-20T16:00:00.000Z</published>
    <updated>2020-04-21T10:05:46.357Z</updated>
    
    <content type="html"><![CDATA[<h1 id="群晖DSM使用端口大全（转载）"><a href="#群晖DSM使用端口大全（转载）" class="headerlink" title="群晖DSM使用端口大全（转载）"></a>群晖DSM使用端口大全（转载）</h1><table><thead><tr><th>设置工具</th><th></th><th></th></tr></thead><tbody><tr><td><strong>类型</strong></td><td><strong>端口号码</strong></td><td><strong>协议</strong></td></tr><tr><td>Synology Assistant</td><td>9999、9998、9997</td><td>UDP</td></tr></tbody></table><table><thead><tr><th>备份</th><th></th><th></th></tr></thead><tbody><tr><td><strong>类型</strong></td><td><strong>端口号码</strong></td><td><strong>协议</strong></td></tr><tr><td>Data Replicator、Data Replicator II、Data Replicator III</td><td>9999、9998、9997、137、138、139、445</td><td>TCP</td></tr><tr><td>网络备份</td><td>873（数据）、3260（iSCSI LUN）</td><td>TCP</td></tr><tr><td>加密的网络备份（远程 Time Backup）</td><td>22</td><td>TCP</td></tr></tbody></table><table><thead><tr><th>下载</th><th></th><th></th></tr></thead><tbody><tr><td><strong>类型</strong></td><td><strong>端口号码</strong></td><td><strong>协议</strong></td></tr><tr><td>eMule</td><td>4662（TCP）、4672（UDP）</td><td>TCP/UDP</td></tr><tr><td>BT</td><td>6890 ~ 6999（用于 DSM 版本早于 v2.0.1-3.0401 的机型）；  16881（用于 DSM 版本 v2.0.1 以上的机型）</td><td>TCP/UDP</td></tr></tbody></table><table><thead><tr><th>网页应用程序</th><th></th><th></th></tr></thead><tbody><tr><td><strong>类型</strong></td><td><strong>端口号码</strong></td><td><strong>协议</strong></td></tr><tr><td>DSM</td><td>5000（HTTP）、5001（HTTPS）</td><td>TCP</td></tr><tr><td>Download Station</td><td>5000</td><td>TCP</td></tr><tr><td>Photo Station、Web Station</td><td>80（可添加另外的端口）、443（HTTPS）</td><td>TCP</td></tr><tr><td>Mail Station</td><td>80（HTTP）、443（HTTPS）</td><td>TCP</td></tr><tr><td>Audio Station</td><td>5000（HTTP，可添加另外的端口）、5001（HTTPS，可添加另外的端口）、5353（Bonjour 服务）、6001-6010（AirPlay 控制/定时）</td><td>TCP/UDP</td></tr><tr><td>File Station</td><td>5000（HTTP，可添加另外的端口）、5001（HTTPS，可添加另外的端口）</td><td>TCP</td></tr><tr><td>Surveillance Station</td><td>9900（HTTP）、9901（HTTPS）</td><td>TCP</td></tr><tr><td>媒体服务器</td><td>1900（UPnP）、50001（内容浏览）、50002（内容串流）</td><td>TCP/UDP</td></tr></tbody></table><table><thead><tr><th>邮件服务器</th><th></th><th></th></tr></thead><tbody><tr><td><strong>类型</strong></td><td><strong>端口号码</strong></td><td><strong>协议</strong></td></tr><tr><td>SMTP</td><td>25</td><td>TCP</td></tr><tr><td>POP3</td><td>110</td><td>TCP</td></tr><tr><td>IMAP</td><td>143</td><td>TCP</td></tr><tr><td>IMAP 含 SSL/TLS</td><td>993</td><td>TCP</td></tr><tr><td>POP3 含 SSL/TLS</td><td>995</td><td>TCP</td></tr></tbody></table><table><thead><tr><th>文件传输</th><th></th><th></th></tr></thead><tbody><tr><td><strong>类型</strong></td><td><strong>端口号码</strong></td><td><strong>协议</strong></td></tr><tr><td>FTP、FTP 含 SSL、FTP 含 TLS</td><td>21（命令）、20（主动模式的数据连接）、55536-55663（被动模式的数据连接）</td><td>TCP</td></tr><tr><td>AFP</td><td>548</td><td>TCP</td></tr><tr><td>CIFS</td><td>smbd：139（netbios-ssn）、445（microsoft-ds）</td><td>TCP/UDP</td></tr><tr><td>Nmbd：137、138</td><td>UDP</td><td></td></tr><tr><td>NFS</td><td>111、892、2049</td><td>TCP/UDP</td></tr><tr><td>WebDAV、CalDAV</td><td>5005、5006（HTTPS）</td><td>TCP</td></tr><tr><td>iSCSI</td><td>3260</td><td>TCP</td></tr><tr><td>TFTP</td><td>69</td><td>UDP</td></tr></tbody></table><table><thead><tr><th>套件</th><th></th><th></th></tr></thead><tbody><tr><td><strong>类型</strong></td><td><strong>端口号码</strong></td><td><strong>协议</strong></td></tr><tr><td>Cloud Station</td><td>6690</td><td>TCP</td></tr><tr><td>VPN Server（OpenVPN）</td><td>1194</td><td>UDP</td></tr><tr><td>VPN Server（PPTP）</td><td>1723</td><td>TCP</td></tr><tr><td>Syslog Server</td><td>514（可添加另外的端口）</td><td>TCP/UDP</td></tr><tr><td>iTunes Server</td><td>3689</td><td>TCP</td></tr><tr><td>Directory Server</td><td>389（LDAP）、636（LDAP 含 SSL）</td><td>TCP</td></tr><tr><td>DHCP Server</td><td>67、68</td><td>UDP</td></tr></tbody></table><table><thead><tr><th>行动应用程序</th><th></th><th></th></tr></thead><tbody><tr><td><strong>类型</strong></td><td><strong>端口号码</strong></td><td><strong>协议</strong></td></tr><tr><td>DS photo+</td><td>80、443（HTTPS）</td><td>TCP</td></tr><tr><td>DS audio</td><td>5000、5001（HTTPS）</td><td>TCP</td></tr><tr><td>DS cam</td><td>5000</td><td>TCP</td></tr><tr><td>DS file</td><td>Android/iOS 设备：5005、5006（HTTPS） Windows Phone：5000</td><td>TCP</td></tr><tr><td>DS finder</td><td>5000（HTTP）、5001（HTTPS）</td><td>TCP</td></tr><tr><td>DS video</td><td>5000（HTTP）、5001（HTTPS）</td><td>TCP</td></tr><tr><td>DS download</td><td>5000（HTTP）、5001（HTTPS）</td><td>TCP</td></tr><tr><td>DS cloud</td><td>6690</td><td>TCP</td></tr></tbody></table><table><thead><tr><th><strong>打印机、UPS 和外围设备</strong></th><th></th><th></th></tr></thead><tbody><tr><td><strong>类型</strong></td><td><strong>端口号码</strong></td><td><strong>协议</strong></td></tr><tr><td>LPR</td><td>515</td><td>UDP</td></tr><tr><td>网络打印机（IPP）/CUPS</td><td>631</td><td>TCP</td></tr><tr><td>Bonjour</td><td>5353</td><td>UDP</td></tr><tr><td>网络 MFP</td><td>3240-3259</td><td>TCP</td></tr><tr><td>UPS</td><td>3493</td><td>TCP</td></tr></tbody></table><table><thead><tr><th><strong>系统</strong></th><th></th><th></th></tr></thead><tbody><tr><td><strong>类型</strong></td><td><strong>端口号码</strong></td><td><strong>协议</strong></td></tr><tr><td>SSH/SFTP</td><td>22</td><td>TCP</td></tr><tr><td>Telnet</td><td>23</td><td>TCP</td></tr><tr><td>资源监视器/SNMP</td><td>161</td><td>TCP/UDP</td></tr><tr><td>MySQL</td><td>3306</td><td>TCP</td></tr><tr><td>LDAP</td><td>389、636（SLAPD）</td><td>TCP</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;群晖DSM使用端口大全（转载）&quot;&gt;&lt;a href=&quot;#群晖DSM使用端口大全（转载）&quot; class=&quot;headerlink&quot; title=&quot;群晖DSM使用端口大全（转载）&quot;&gt;&lt;/a&gt;群晖DSM使用端口大全（转载）&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;

      
    
    </summary>
    
    
      <category term="配置" scheme="https://sanscan.top/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="群辉" scheme="https://sanscan.top/tags/%E7%BE%A4%E8%BE%89/"/>
    
      <category term="端口" scheme="https://sanscan.top/tags/%E7%AB%AF%E5%8F%A3/"/>
    
      <category term="血的教训" scheme="https://sanscan.top/tags/%E8%A1%80%E7%9A%84%E6%95%99%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>css</title>
    <link href="https://sanscan.top/2020/04/16/CSS/"/>
    <id>https://sanscan.top/2020/04/16/CSS/</id>
    <published>2020-04-15T16:00:00.000Z</published>
    <updated>2020-04-24T05:20:15.959Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS初识"><a href="#CSS初识" class="headerlink" title="CSS初识"></a>CSS初识</h2><p>css样式表或层叠样式表（级联样式表），用与设置HTML页面的文本内容（字体，大小，对齐样式）、图片外形等外观。<br>CSS以HTML为基础，提供了丰富的功能，如字体、颜色、背景的控制及整体排版等，而且还可以针对不同的浏览器设置不同的样式。</p><h2 id="css样式表"><a href="#css样式表" class="headerlink" title="css样式表"></a>css样式表</h2><h3 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h3><p>位置在head头部标签中，并且用style标签定义属性，基本语法格式：</p><pre><code class="highlight angelscript">&lt;head&gt;&lt;style type=<span class="string">"text/CSS"</span>&gt;    选择器 &#123;属性<span class="number">1</span>:属性值<span class="number">1</span>; 属性<span class="number">2</span>:属性值<span class="number">2</span>; 属性<span class="number">3</span>:属性值<span class="number">3</span>;&#125;&lt;/style&gt;&lt;/head&gt;</code></pre><p>选择器：选择标签加属性。</p><hr><h3 id="行内式（内联样式表）"><a href="#行内式（内联样式表）" class="headerlink" title="行内式（内联样式表）"></a>行内式（内联样式表）</h3><p>内联样式，又称行内样式、行间样式、内嵌样式。是通过标签的style属性来设置元素的样式，基本语法格式：</p><pre><code class="highlight xml"><span class="tag">&lt;<span class="name">标签名</span> <span class="attr">style</span>=<span class="string">"属性1:属性值1; 属性2:属性值2; 属性3:属性值3;"</span>&gt;</span> 内容 <span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></code></pre><p>语法中style是标签的属性。属性和值的书写规范与CSS样式规则相同，行内式只对其所在的标签及嵌套在其中的子标签起作用。</p><hr><h3 id="外部样式表（外链式）"><a href="#外部样式表（外链式）" class="headerlink" title="外部样式表（外链式）"></a>外部样式表（外链式）</h3><p>链入式是将所有的样式放在一个或多个以CSS为扩展名的文件中，通过link标签将文件链接，基本语法格式如下：</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"CSS文件的路径"</span>  <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></code></pre><p><strong>link 必要属性</strong></p><p><font color =8BE9FD>link</font> 是个单标签，link标签需要放在head头部标签中，并且必须指定link标签的三个属性：<br><font color =8BE9FD>href</font>：URL地址，可以是相对路径或绝对路径。<br><font color =8BE9FD>type</font>t：所链接文档的类型，在这里需要指定为“text/CSS”，表示链接的外部文件为CSS样式表。<br><font color =8BE9FD>rel</font>：当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet”，表示被链接的文档是一个样式表文件。</p><h3 id="CSS样式规则"><a href="#CSS样式规则" class="headerlink" title="CSS样式规则"></a>CSS样式规则</h3><p>选择器{属性:属性值 ; 属性2:属性值2 ; ···}<br>CSS样式规则中:<br>1.选择器用于指定CSS样式作用的HTML对象，花括号内是对该对象设置的具体样式。<br>2.属性和属性值以“键值对”的形式出现。<br>3.属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等。<br>4.属性和属性值之间用英文“:”连接。<br>5.多个“键值对”之间用英文“;”进行区分。<br>可以用段落和表格的对齐的演示。</p><h3 id="样式表总结"><a href="#样式表总结" class="headerlink" title="样式表总结"></a>样式表总结</h3><table><thead><tr><th>样式表</th><th>优点</th><th>缺点</th><th>使用情况</th><th>控制范围</th></tr></thead><tbody><tr><td>行内样式表</td><td>书写方便，权重高</td><td>没有实现样式和结构相分离</td><td>较少</td><td>控制一个标签（少）</td></tr><tr><td>内部样式表</td><td>部分结构和样式相分离</td><td>没有彻底分离</td><td>较多</td><td>控制一个页面（中）</td></tr><tr><td>外部样式表</td><td>完全实现结构和样式相分离</td><td>需要引入</td><td>最多，强烈推荐</td><td>控制整个站点（多）</td></tr></tbody></table><h2 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h2><h3 id="标签选择器（元素选择器）"><a href="#标签选择器（元素选择器）" class="headerlink" title="标签选择器（元素选择器）"></a>标签选择器（元素选择器）</h3><p>标签选择器可对标签或元素指定的对象作用。<br>按标签名称和元素名分类，语法格式如下：</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">style</span>&gt;</span>标签名 | 元素名&#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; ···&#125;<span class="tag">&lt;/<span class="name">style</span>&gt;</span></code></pre><hr><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><p>类选择器可对指定的对象起作用。<br>用“.”做前缀进行标识，后面紧跟类名，在style标签中，基本语法格式如下：</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">style</span>&gt;</span>.类名&#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;<span class="tag">&lt;/<span class="name">style</span>&gt;</span></code></pre><p>标签调用样式时用“class”属性，值为类名，<strong>无需加“.”做前缀进行标识！</strong><br>下面例子：</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span> = <span class="string">"类名"</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></code></pre><p><strong>小技巧：</strong></p><ol><li>长名称或词组可以使用中横线来为选择器命名。</li><li>不建议使用“_”下划线来命名CSS选择器。</li><li>不要纯数字、中文等命名， 尽量使用英文字母来表示。</li></ol><hr><h3 id="多类名选择器"><a href="#多类名选择器" class="headerlink" title="多类名选择器"></a>多类名选择器</h3><p>多类名选择器可给标签指定多个类名，从而达到更多选择的目的。<br><strong>注意：</strong></p><ol><li>样式显示效果跟HTML元素中的类名先后顺序没有关系,受CSS样式书写的上下顺序有关。</li><li>各个类名中间用空格隔开。</li></ol><p>多类名选择器的使用，前提先定义了类：<em>（类名之间用空格隔开）</em></p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"类名1 类名2 ···"</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></code></pre><hr><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><p>id选择器只对一个对象起作用。<br>用“#”做前缀进行标识，后面紧跟id名，id选择器只能对一个标签使用。<em>（可多个食用，建议不要多个使用）</em><br>基本语法格式如下： <em>（语法结构基本和类选择器相同。）</em></p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">style</span>&gt;</span>#id名&#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;<span class="tag">&lt;/<span class="name">style</span>&gt;</span></code></pre><hr><p><strong>id选择器和类选择器区别</strong></p><p><strong><em>id选择器和类选择器最大的不同在于 使用次数上。</em></strong></p><hr><h3 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h3><p>通配符选择器用“ * ”号表示，是所有选择器中作用范围最广的，能匹配页面中所有的元素。<em>（ 星号代表所有的意思）</em><br>基本语法格式如下：</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">style</span>&gt;</span>*&#123; 属性1:属性值1; 属性2:属性值2; ···&#125;<span class="tag">&lt;/<span class="name">style</span>&gt;</span></code></pre><h3 id="选择器总结"><a href="#选择器总结" class="headerlink" title="选择器总结"></a>选择器总结</h3><table><thead><tr><th>选择器</th><th>优点</th><th>缺点</th><th>使用范围</th></tr></thead><tbody><tr><td>标签选择器</td><td>快速在同一类型的标签添加样式</td><td>不能在同一标签设置不同样式</td><td>限制于设置的标签</td></tr><tr><td>类选择器</td><td>可为对象单独定义样式，也可多标签</td><td></td><td>广泛</td></tr><tr><td>id选择器</td><td>可为对象单独定义样式</td><td>不能多标签共用</td><td>一个标签的范围</td></tr><tr><td>通配符选择器</td><td>能匹配页面中所有的元素</td><td>不能单独定义样式</td><td>范围最广</td></tr></tbody></table><h2 id="CSS字体样式属性"><a href="#CSS字体样式属性" class="headerlink" title="CSS字体样式属性"></a>CSS字体样式属性</h2><h3 id="font-size（字号大小）"><a href="#font-size（字号大小）" class="headerlink" title="font-size（字号大小）"></a>font-size（字号大小）</h3><p>font-size属性用于设置字号大小。<br>属性值设置相对长度单位，也设置绝对长度单位，详细：</p><table><thead><tr><th>属性值的相对长度单位</th><th>说明</th></tr></thead><tbody><tr><td>em</td><td>相对于当前对象内文本的字体尺寸</td></tr><tr><td>px</td><td>像素<em>（常用，建议使用）</em></td></tr></tbody></table><table><thead><tr><th>属性值的绝对长度单位</th><th>说明</th></tr></thead><tbody><tr><td>in</td><td>英尺</td></tr><tr><td>cm</td><td>厘米</td></tr><tr><td>mm</td><td>毫米</td></tr><tr><td>pt</td><td>点</td></tr></tbody></table><hr><h3 id="font-family-（字体类型）"><a href="#font-family-（字体类型）" class="headerlink" title="font-family （字体类型）"></a>font-family （字体类型）</h3><p>font-family属性用于设置字体。<br>可同时指定多个字体，中间以逗号隔开，如果浏览器不支持第一个字体，则会尝试下一个，直到找到合适的字体。</p><p><strong>常用技巧：</strong></p><ol><li>现在网页中普遍使用14px+。</li><li>尽量使用偶数的数字字号大小。ie6等老式浏览器支持奇数会有bug。</li><li>各种字体之间必须使用英文状态下的逗号隔开。</li><li>中文字体需要加英文状态下的引号，英文字体一般不需要加引号。当需要设置英文字体时，英文字体名必须位于中文字体名之前。</li><li>如果字体名中包含空格、#、$等符号，则该字体必须加英文状态下的单引号或双引号，例如font-family: “Times New Roman”;。</li><li>尽量使用系统默认字体，保证在任何用户的浏览器中都能正确显示。</li></ol><hr><h4 id="CSS-Unicode（字体编码）"><a href="#CSS-Unicode（字体编码）" class="headerlink" title="CSS Unicode（字体编码）"></a>CSS Unicode（字体编码）</h4><p>在 CSS 中设置字体名称，直接写中文是可以的。但是在文件编码（GB2312、UTF-8 等）不匹配时会产生乱码的错误。xp 系统不支持类似微软雅黑的中文。<em>(尽量只使用宋体和微软雅黑中文字体)</em><br><strong>提高兼容性的解决方案：</strong></p><ol><li>用英文来替代字体名称</li><li>直接使用 Unicode 编码来写字体名称可以避免这些错误</li></ol><table><thead><tr><th>字体名称</th><th>英文名称</th><th>Unicode 编码</th></tr></thead><tbody><tr><td>宋体</td><td>SimSun</td><td>\5B8B\4F53</td></tr><tr><td>新宋体</td><td>NSimSun</td><td>\65B0\5B8B\4F53</td></tr><tr><td>黑体</td><td>SimHei</td><td>\9ED1\4F53</td></tr><tr><td>微软雅黑</td><td>Microsoft YaHei</td><td>\5FAE\8F6F\96C5\9ED1</td></tr><tr><td>楷体_GB2312</td><td>KaiTi_GB2312</td><td>\6977\4F53_GB2312</td></tr><tr><td>隶书</td><td>LiSu</td><td>\96B6\4E66</td></tr><tr><td>幼园</td><td>YouYuan</td><td>\5E7C\5706</td></tr><tr><td>华文细黑</td><td>STXihei</td><td>\534E\6587\7EC6\9ED1</td></tr><tr><td>细明体</td><td>MingLiU</td><td>\7EC6\660E\4F53</td></tr><tr><td>新细明体</td><td>PMingLiU</td><td>\65B0\7EC6\660E\4F53</td></tr></tbody></table><hr><h3 id="font-weight（字体粗细）"><a href="#font-weight（字体粗细）" class="headerlink" title="font-weight（字体粗细）"></a>font-weight（字体粗细）</h3><p>font-weight属性用于设置字体粗细。<br>字体加粗除了用 b(粗体)和 strong(语气更强的强调)标签之外，也用CSS来实现，但是CSS 是没有语义的。<em>（尽量用数值代表细粗）</em><br>font-weight的属性值：</p><table><thead><tr><th>font-weight 属性值</th><th>说明</th></tr></thead><tbody><tr><td>normal  （默认值） == 400</td><td>正常字体</td></tr><tr><td>bold      == 700</td><td>粗体</td></tr><tr><td>bolder</td><td>特粗体</td></tr><tr><td>lighter</td><td>细体</td></tr><tr><td>100 ~ 900</td><td>100的整倍数</td></tr></tbody></table><hr><h3 id="font-style（倾斜字体）"><a href="#font-style（倾斜字体）" class="headerlink" title="font-style（倾斜字体）"></a>font-style（倾斜字体）</h3><p>font-style属性用倾斜字体。<br>字体倾斜除了用 i(倾斜)和 em(强调)标签之外可用CSS 来实现，但是CSS 是没有语义的。</p><table><thead><tr><th>font-style 属性值</th><th>说明</th></tr></thead><tbody><tr><td>normal（默认值）</td><td>标准的字体样式</td></tr><tr><td>italic</td><td>斜体的字体样式</td></tr><tr><td>oblique</td><td>倾斜的字体样式</td></tr></tbody></table><hr><h3 id="font-字体连写样式-（重点）"><a href="#font-字体连写样式-（重点）" class="headerlink" title="font 字体连写样式 （重点）"></a>font 字体连写样式 （重点）</h3><p>font属性用于对字体样式进行综合设置。<br>基本语法格式如下：</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css">    选择器&#123;<span class="attribute">font</span>: <span class="built_in">font-style</span>(倾斜字体)  <span class="built_in">font-weight</span>(字体粗细)  <span class="built_in">font-size</span>(字体大小)/<span class="built_in">line-height</span>(字体行高)  <span class="built_in">font-family</span>(字体类型);&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></code></pre><p>or：</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css">选择器&#123;<span class="attribute">font</span>: normal  <span class="number">400</span>  <span class="number">100px</span>  <span class="string">"微软雅黑"</span>;&#125;</span><span class="css">    选择器&#123;<span class="attribute">font</span>: 斜体 粗细 大小 类型;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></code></pre><p><strong>要点：</strong></p><ol><li>使用font属性时，必须按上面语法格式中的顺序书写，不能更换顺序，各个属性以空格隔开。</li><li>不需要设置的属性可以省略属性值（取默认值），但必须保留font-size(字体大小)和font-family(字体类型)属性，否则font属性将不起作用。</li></ol><h2 id="CSS外观样式属性"><a href="#CSS外观样式属性" class="headerlink" title="CSS外观样式属性"></a>CSS外观样式属性</h2><h3 id="color（文本颜色）"><a href="#color（文本颜色）" class="headerlink" title="color（文本颜色）"></a>color（文本颜色）</h3><p>color属性用于定义文本的颜色。</p><table><thead><tr><th>color 属性类型</th><th>属性值</th></tr></thead><tbody><tr><td>预定义的颜色值</td><td>red，green，blue</td></tr><tr><td>十六进制</td><td>#FF0000，#FF6600，#29D794</td></tr><tr><td>RGB代码</td><td>rgb(255,0,0)，rgb(100%,0%,0%)</td></tr></tbody></table><p><em>注意:如果使用RGB代码的百分比颜色值，取值为0时也不能省略百分号，必须写为0%。</em></p><hr><h3 id="line-height-（行间距）"><a href="#line-height-（行间距）" class="headerlink" title="line-height （行间距）"></a>line-height （行间距）</h3><p>ine-height属性用于设置字符的高距。<br>行与行之间的距离，一般称为行高。<br>字体顶与最顶行的距离=(设置值 - 字体)/2（单位：px）<br>line-height常用的属性值单位有三种：</p><table><thead><tr><th>line-height 属性单位</th><th>说明</th></tr></thead><tbody><tr><td>(int)px    <em>（常用）</em></td><td>像素</td></tr><tr><td>(int)em</td><td>字体个数</td></tr><tr><td>(0~100)百分比%</td><td>正常字体的百分比</td></tr></tbody></table><hr><h3 id="letter-spacing（水平间距）"><a href="#letter-spacing（水平间距）" class="headerlink" title="letter-spacing（水平间距）"></a>letter-spacing（水平间距）</h3><p>letter-spacing属性用于设置字符的水平间距。<br>字符与字符之间的距离，一般称为水平间距</p><table><thead><tr><th>letter-spacing 属性单位</th><th>说明</th></tr></thead><tbody><tr><td>(int)px    <em>（常用）</em></td><td>像素</td></tr><tr><td>(int)em</td><td>字体个数</td></tr><tr><td>(0~100)百分比%</td><td>正常字体的百分比</td></tr></tbody></table><hr><h3 id="text-align（水平对齐方式）"><a href="#text-align（水平对齐方式）" class="headerlink" title="text-align（水平对齐方式）"></a>text-align（水平对齐方式）</h3><p>text-align属性用于设置指定字体水平对齐方式。<br>是让盒子里面的内容水平居中，而不是让盒子居中对齐</p><table><thead><tr><th>text-align 属性值</th><th>说明</th></tr></thead><tbody><tr><td>left <em>（默认值）</em></td><td>左对齐</td></tr><tr><td>right</td><td>右对齐</td></tr><tr><td>center</td><td>居中对齐</td></tr></tbody></table><hr><h3 id="text-indent（首行缩进）"><a href="#text-indent（首行缩进）" class="headerlink" title="text-indent（首行缩进）"></a>text-indent（首行缩进）</h3><p>text-indent属性用于设置首行文本的缩进。</p><table><thead><tr><th>text-indent 属性单位</th><th>说明</th></tr></thead><tbody><tr><td>(int)px</td><td>像素</td></tr><tr><td>(int)em<em>（常用）</em></td><td>字体个数</td></tr><tr><td>(0~100)百分比%</td><td>浏览器窗口宽度的百分比</td></tr></tbody></table><p><em>一般情况汉字的段落， 2em 就是两个汉字的宽度</em></p><hr><h3 id="text-decoration（文本装饰）"><a href="#text-decoration（文本装饰）" class="headerlink" title="text-decoration（文本装饰）"></a>text-decoration（文本装饰）</h3><p>text-decoration属性用于给链接修改装饰效果。</p><table><thead><tr><th>text-decoration 属性值</th><th>说明</th></tr></thead><tbody><tr><td>none<em>（默认值）</em></td><td>无装饰（无效果）*</td></tr><tr><td>underline</td><td>文本下的一条线（下划线）</td></tr><tr><td>overline</td><td>文本上的一条线（上划线）</td></tr><tr><td>line-through</td><td>贯穿文本的一条线（删除线）</td></tr></tbody></table><h2 id="开发者工具（chrome）"><a href="#开发者工具（chrome）" class="headerlink" title="开发者工具（chrome）"></a>开发者工具（chrome）</h2><p>此工具是我们的必备工具，以后代码出了问题，首先第一反应就是：<br>“按F12”或者是 “shift+ctrl+i”   打开 开发者工具。</p><p><strong>小技巧：</strong></p><ol><li>ctrl+滚轮 可以 放大开发者工具代码大小。</li><li>左边是HTML元素结构   右边是CSS样式。</li><li>右边CSS样式可以改动数值和颜色查看更改后效果。</li></ol><h2 id="CSS复合选择器"><a href="#CSS复合选择器" class="headerlink" title="CSS复合选择器"></a>CSS复合选择器</h2><h3 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h3><p>交集选择器可指定标签添加样式。<br>交集选择器由两个选择器构成，第一个为标签选择器，第二个为class选择器，两个选择器之间不能有空格<br>基本语法格式：</p><pre><code class="highlight css">h3.class &#123;属性:属性值; ····&#125;</code></pre><p><strong>记忆技巧：</strong><br>交集选择器 是并且的意思。  即…又…的意思</p><pre><code class="highlight html">比如： p.one   选择的是： 类名为 .one 的段落标签。  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"><span class="selector-tag">p</span><span class="selector-class">.class</span>&#123;<span class="attribute">color</span>:red; <span class="attribute">font-size</span>:<span class="number">20px</span>&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">stley</span>&gt;</span></span></code></pre><hr><h3 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h3><p>并集选择器可叠加各种选择器和标签等，添加样式。<br>各个选择器通过逗号连接而成的，任何形式的选择器（包括标签选择器、class类选择器id选择器等），都可以作为并集选择器的一部分。<br>基本语法格式：</p><pre><code class="highlight css">.class , h3 &#123;属性:属性值; ····&#125;</code></pre><p><strong>记忆技巧：</strong><br>并集选择器选择器和选择器的意思，只要逗号隔开的，所有选择器都会执行后面样式。</p><p>比如  .one, p , #test {color: #F00;}  表示   .one 和 p  和 #test 这三个选择器都会执行颜色为红色。  通常用于集体声明。</p><hr><h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><p>后代选择器又称<strong>包含选择器</strong>，用来选择元素或元素组的后代。<br><strong>写法：外层标签写在前面，内层标签写在后面，中间用空格分隔</strong>。<em>当标签发生嵌套时，内层标签就成为外层标签的后代。</em><br>基本语法格式：</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">style</span>&gt;</span>类名选择器 标记选择器&#123;属性1，属性值1；属性2，属性值2,···&#125;<span class="tag">&lt;/<span class="name">style</span>&gt;</span></code></pre><p>or：</p><pre><code class="highlight css">&lt;<span class="selector-tag">style</span>&gt;<span class="selector-class">.class</span> <span class="selector-tag">h3</span>&#123;<span class="attribute">color</span>:red; <span class="attribute">font-size</span>:<span class="number">20px</span>&#125;    <span class="selector-tag">div</span> <span class="selector-tag">p</span>&#123;<span class="attribute">color</span>:red; <span class="attribute">font-size</span>:<span class="number">20px</span>&#125;&lt;/stley&gt;&gt;</code></pre><hr><h3 id="子代选择器"><a href="#子代选择器" class="headerlink" title="子代选择器"></a>子代选择器</h3><p>子代选择器又称<strong>子元素选择器</strong>，只能选择作为某元素子元素的元素。<br>写法：父级标签写在前面，子级标签写在后面，中间跟一个 &gt; 进行连接。 <em>注意，符号左右两侧各保留一个空格。</em><br>基本语法：</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">style</span>&gt;</span>    类别选择器 &gt; 标记选择器&#123;属性1，属性值1；属性2，属性值2,···&#125;<span class="tag">&lt;/<span class="name">style</span>&gt;</span></code></pre><p>or：</p><pre><code class="highlight css">&lt;<span class="selector-tag">style</span>&gt;    <span class="selector-class">.class</span> &gt; <span class="selector-tag">h3</span>&#123;<span class="attribute">color</span>:red; <span class="attribute">font-size</span>:<span class="number">20px</span>&#125;     <span class="selector-tag">div</span> &gt; <span class="selector-tag">p</span>&#123;<span class="attribute">color</span>:red; <span class="attribute">font-size</span>:<span class="number">20px</span>&#125;&lt;/style&gt;</code></pre><hr><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><p>伪类选择器用于向某些选择器添加特殊的效果。<br>用“:”做前缀进行标识，后面紧跟伪类名，在style标签中，基本语法格式如下：</p><pre><code class="highlight css">&lt;<span class="selector-tag">style</span>&gt;:伪类选择器&#123;属性1:属性值1; 属性2:属性值2; ··· &#125;&lt;/style&gt;</code></pre><h4 id="链接伪类选择器"><a href="#链接伪类选择器" class="headerlink" title="链接伪类选择器"></a>链接伪类选择器</h4><table><thead><tr><th>选择器</th><th>链接显示情况</th></tr></thead><tbody><tr><td><font color =8BE9FD>link</font></td><td>未访问的链接</td></tr><tr><td><font color =8BE9FD>visited</font></td><td>已访问的链接</td></tr><tr><td><font color =8BE9FD>hover</font></td><td>鼠标移动到链接上</td></tr><tr><td><font color =8BE9FD>active</font></td><td>选定的链接</td></tr></tbody></table><p>注意写的时候，他们的顺序，<strong>尽量不要颠倒</strong>，按照  lvha的顺序。</p><pre><code class="highlight css"><span class="selector-tag">a</span> &#123;   <span class="comment">/* a是标签选择器  所有的链接 */</span><span class="attribute">font-weight</span>: <span class="number">700</span>;<span class="attribute">font-size</span>: <span class="number">16px</span>;<span class="attribute">color</span>: gray;&#125;<span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;   <span class="comment">/* :hover 是鼠标经过时*/</span><span class="attribute">color</span>: red; <span class="comment">/*  鼠标经过的时候，由原来的灰色变成了红色 */</span>&#125;</code></pre><h3 id="快捷方式"><a href="#快捷方式" class="headerlink" title="快捷方式"></a>快捷方式</h3><ol><li><p>生成标签 直接输入标签名 按tab键即可   比如  div   然后tab 键， 就可以生成 <div></div></p></li><li><p>如果想要生成多个相同标签  加上 * 就可以了 比如   div*3  就可以快速生成3个div</p></li><li><p>如果有父子级关系的标签，可以用 &gt;  比如   ul &gt; li就可以了</p></li><li><p>如果有兄弟关系的标签，用  +  就可以了 比如 div+p  </p></li><li><p>如果生成带有类名或者id名字的，  直接写  .demo  或者  #two   tab 键就可以了</p></li></ol><h2 id="display（标签显示模式）"><a href="#display（标签显示模式）" class="headerlink" title="display（标签显示模式）"></a>display（标签显示模式）</h2><h3 id="block-level（块级元素）"><a href="#block-level（块级元素）" class="headerlink" title="block-level（块级元素）"></a>block-level（块级元素）</h3><p>块元素通常都会独自占据一整行或多整行。<br>块级元素可以设置宽度、高度、对齐等··属性，常用于网页布局和网页结构的搭建。</p><p>常见的块元素有<code>&lt;h1&gt;</code>~<code>&lt;h6&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;div&gt;</code>、<code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;li&gt;</code>等，其中<code>&lt;div&gt;</code>标签是最典型的块元素。</p><p> <strong>块级元素的特点：</strong></p><ol><li>总是从新行开始</li><li>高度，行高、外边距以及内边距都可以控制。</li><li>宽度默认是100%    </li><li>可以容纳内联元素和其他块元素。</li></ol><hr><h3 id="inline-level（行内元素）"><a href="#inline-level（行内元素）" class="headerlink" title="inline-level（行内元素）"></a>inline-level（行内元素）</h3><p>行内元素又称内联元素，单纯字体空间。<br>自身的字体大小和图像尺寸来支撑结构，<strong>一般不可以设置宽度、高度、对齐等属性，常用于控制页面中文本的样式。</strong></p><p>常见的行内元素有<code>&lt;a&gt;</code>、<code>&lt;strong&gt;</code>、<code>&lt;b&gt;</code>、<code>&lt;em&gt;</code>、<code>&lt;i&gt;</code>、<code>&lt;del&gt;</code>、<code>&lt;s&gt;</code>、<code>&lt;ins&gt;</code>、<code>&lt;u&gt;</code>、<code>&lt;span&gt;</code>等，其中<code>&lt;span&gt;</code>标签最典型的行内元素。</p><p><strong>行内元素的特点：</strong></p><ol><li>和相邻行内元素在一行上。</li><li>高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效。</li><li>行内元素只能容纳文本或则其他行内元素。（a特殊）</li><li>注意：只有文字才能组成段落 因此 p  里面不能放块级元素。链接里面不能再放链接。*</li></ol><hr><h3 id="inline-block（行内块元素）"><a href="#inline-block（行内块元素）" class="headerlink" title="inline-block（行内块元素）"></a>inline-block（行内块元素）</h3><p><strong>行内块元素的特点：</strong></p><ol><li>和相邻行内元素（行内块）在一行上,但是之间会有空白缝隙。</li><li>默认宽度就是它本身内容的宽度。</li><li>高度，行高、外边距以及内边距都可以控制。</li></ol><h3 id="display（显示模式转换）"><a href="#display（显示模式转换）" class="headerlink" title="display（显示模式转换）"></a>display（显示模式转换）</h3><p>块级元素 转 行内元素：display : inline;<br>行内元素 转 块级元素：display : block;<br>块、行内元素 转 行内块元素： display : inline-block;</p><h3 id="标签显示总结"><a href="#标签显示总结" class="headerlink" title="标签显示总结"></a>标签显示总结</h3><table><thead><tr><th>元素</th><th>特点</th></tr></thead><tbody><tr><td>行内元素</td><td>总是从新行开始<br/>高度，行高、外边距以及内边距都可以控制。<br/>宽度默认是容器的100%<br/>可以容纳内联元素和其他块元素。</td></tr><tr><td>块级元素</td><td>和相邻行内元素在一行上。<br/>高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效。<br/>默认宽度就是它本身内容的宽度。<br/>行内元素只能容纳文本或则其他行内元素。</td></tr><tr><td>行内块元素</td><td>和相邻行内元素（行内块）在一行上,但是之间会有空白缝隙。<br/>默认宽度就是它本身内容的宽度。<br/>高度，行高、外边距以及内边距都可以控制。</td></tr></tbody></table><h2 id="CSS书写规范"><a href="#CSS书写规范" class="headerlink" title="CSS书写规范"></a>CSS书写规范</h2><h3 id="空格规范"><a href="#空格规范" class="headerlink" title="空格规范"></a>空格规范</h3><p>【强制】 选择器 与 { 之间必须包含空格。</p><pre><code class="highlight css"><span class="selector-class">.selector</span> &#123; &#125;</code></pre><p>【强制】 属性名 与之后的 : 之间不允许包含空格， : 与 属性值 之间必须包含空格。</p><pre><code class="highlight css"><span class="selector-tag">font-size</span>: 12<span class="selector-tag">px</span>;</code></pre><h3 id="选择器规范"><a href="#选择器规范" class="headerlink" title="选择器规范"></a>选择器规范</h3><p>【强制】 当一个样式包含多个选择器时，每个选择器声明必须独占一行。</p><pre><code class="highlight css"><span class="comment">/*好习惯*/</span><span class="selector-class">.post</span>,<span class="selector-class">.page</span>,<span class="selector-class">.comment</span> &#123;    <span class="attribute">line-height</span>: <span class="number">1.5</span>;&#125;<span class="comment">/*坏习惯*/</span><span class="selector-class">.post</span>, <span class="selector-class">.page</span>, <span class="selector-class">.comment</span> &#123;    <span class="attribute">line-height</span>: <span class="number">1.5</span>;&#125;</code></pre><p>选择器的嵌套层级不大于 3 级，位置靠后的限定条件应尽可能精确。</p><pre><code class="highlight css"><span class="comment">/* 好习惯 */</span><span class="selector-id">#username</span> <span class="selector-tag">input</span> &#123;&#125;<span class="selector-class">.comment</span> <span class="selector-class">.avatar</span> &#123;&#125;<span class="comment">/* 坏习惯 */</span><span class="selector-class">.page</span> <span class="selector-class">.header</span> <span class="selector-class">.login</span> <span class="selector-id">#username</span> <span class="selector-tag">input</span> &#123;&#125;<span class="selector-class">.comment</span> <span class="selector-tag">div</span> * &#123;&#125;</code></pre><h3 id="属性规范"><a href="#属性规范" class="headerlink" title="属性规范"></a>属性规范</h3><p>【强制】 属性定义必须另起一行。<br>【强制】 属性定义后必须以分号结尾。</p><pre><code class="highlight css"><span class="comment">/* 好习惯 */</span><span class="selector-class">.selector</span> &#123;    <span class="attribute">margin</span>: <span class="number">0</span>;    <span class="attribute">padding</span>: <span class="number">0</span>;&#125;<span class="comment">/* 坏习惯 */</span><span class="selector-class">.selector</span> &#123; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; &#125;</code></pre><h3 id="高度格式"><a href="#高度格式" class="headerlink" title="高度格式"></a>高度格式</h3><p>顶线(字体最高)，中线(字体中间)，基线(字体底部)，底线(最底部)<br>基线与基线的距离为行高。<br>字体上距离=(设置值 - 字体) / 2（单位：px）</p><h2 id="CSS-三大特性"><a href="#CSS-三大特性" class="headerlink" title="CSS 三大特性"></a>CSS 三大特性</h2><h3 id="CSS层叠性"><a href="#CSS层叠性" class="headerlink" title="CSS层叠性"></a>CSS层叠性</h3><p>指多种CSS样式的叠加。201,225,67</p><p>一般情况下，如果出现样式冲突，则会按照CSS书写的顺序，以最后的样式为准。</p><ol><li>样式冲突，遵循的原则是就近原则。 那个样式离着结构近，就执行那个样式。</li><li>样式不冲突，不会层叠</li></ol><h3 id="CSS继承性"><a href="#CSS继承性" class="headerlink" title="CSS继承性"></a>CSS继承性</h3><p>子标签会继承父标签的某些样式。想要设置一个可继承的属性，只需将它应用于父元素即可。<br><em>恰当地使用继承可以简化代码，降低CSS样式的复杂性。子元素可以继承父元素的样式</em></p><h3 id="CSS优先级"><a href="#CSS优先级" class="headerlink" title="CSS优先级"></a>CSS优先级</h3><p>出现两个或更多规则应用在同一元素上，这时就会出现优先级的问题。注意的特殊情况：</p><ol><li>继承样式的权重为0！！！</li><li>行内样式优先。</li><li>权重相同时，CSS遵循就近原则。</li><li>CSS定义了一个!important命令，该命令被赋予最大的优先级。</li></ol><h4 id="CSS特殊性"><a href="#CSS特殊性" class="headerlink" title="CSS特殊性"></a>CSS特殊性</h4><p>关于CSS权重，需要一套计算公式来去计算，这个就是 CSS Specificity，是衡量CSS值优先级的一个标准。<br>specificity用一个四位的数字串(CSS2是三位)来表示，更像四个级别，值从左到右，左面的最大，一级大于一级，数位之间没有进制，级别之间不可超越。 </p><table><thead><tr><th>继承的贡献值（权重）</th><th>0,0,0,0</th></tr></thead><tbody><tr><td>* 全部</td><td>0,0,0,0</td></tr><tr><td>每个元素（标签）</td><td>0,0,0,1</td></tr><tr><td>每个类，伪类</td><td>0,0,1,0</td></tr><tr><td>每个ID</td><td>0,1,0,0</td></tr><tr><td>每个行内样式</td><td>1,0,0,0</td></tr><tr><td>每个!important（重要的）</td><td>∞ 无穷大</td></tr></tbody></table><p>权重是可以叠加的<br>比如的例子：</p><pre><code class="highlight angelscript">div ul  li   ------&gt;      <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>.nav ul li   ------&gt;      <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>a:hover      -----—&gt;      <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>.nav a       ------&gt;      <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>   #nav p       -----&gt;       <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span></code></pre><p><strong>数位之间没有进制</strong>。比如说： 0,0,0,5 + 0,0,0,5 =0,0,0,10 而不是 0,0, 1, 0， 所以不会存在10个div能赶上一个类选择器的情况。</p><h4 id="权重总结"><a href="#权重总结" class="headerlink" title="权重总结"></a>权重总结</h4><ol><li>使用了!important声明的规则。</li><li>内嵌在HTML元素的style属性里面的声明。</li><li>使用了ID 选择器的规则。</li><li>使用了类选择器、属性选择器、伪元素和伪类选择器的规则。</li><li>使用了元素选择器的规则。</li><li>只包含一个通用选择器的规则。</li><li>同一类选择器则遵循就近原则。</li></ol><p><strong><em>权重是优先级的算法，层叠是优先级的表现</em></strong></p><h2 id="背景-background"><a href="#背景-background" class="headerlink" title="背景 (background)"></a>背景 (background)</h2><p>可以添加背景颜色和背景图片，以及来进行图片设置</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><font color =8BE9FD>background-color</font></td><td>背景颜色</td></tr><tr><td><font color =8BE9FD>background-image</font></td><td>背景图片地址</td></tr><tr><td><font color =8BE9FD>background-repeat</font></td><td>是否平铺</td></tr><tr><td><font color =8BE9FD>background-position</font></td><td>背景位置</td></tr><tr><td><font color =8BE9FD>background-attachment</font></td><td>背景固定还是滚动</td></tr><tr><td>背景的合写（复合属性）</td><td></td></tr><tr><td><font color =8BE9FD>background</font>:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置</td><td></td></tr></tbody></table><h3 id="背景图片-image"><a href="#背景图片-image" class="headerlink" title="背景图片 (image)"></a>背景图片 (image)</h3><p>background-image属性允许指定一个图片展示在背景中，可以和background-color连用。如果图片不重复地话，图片覆盖不到地地方都会被背景色填充。 如果有背景图片平铺，则会覆盖背景颜色。<br>语法格式：</p><pre><code class="highlight css">background-image : none | url;</code></pre><p>none : 　无背景图（默认的）<br>url : 　使用绝对或相对地址指定背景图像<br><em>背景图片后面的地址，url不要加引号</em></p><hr><h3 id="背景平铺-repeat"><a href="#背景平铺-repeat" class="headerlink" title="背景平铺 (repeat)"></a>背景平铺 (repeat)</h3><p>语法格式：</p><pre><code class="highlight css">background-repeat : repeat | no-repeat | repeat-x | repeat-y</code></pre><table><thead><tr><th>repeat 属性值</th><th>说明</th></tr></thead><tbody><tr><td>repeat （默认的）</td><td>图像在纵向和横向上平铺</td></tr><tr><td>no-repeat</td><td>图像不平铺</td></tr><tr><td>repeat-x</td><td>图像在横向上平铺</td></tr><tr><td>repeat-y</td><td>背景图像在纵向平铺</td></tr></tbody></table><p><em>设置背景图片时，默认把图片在水平和垂直方向平铺以铺满整个元素</em></p><hr><h3 id="背景位置-position"><a href="#背景位置-position" class="headerlink" title="背景位置 (position)"></a>背景位置 (position)</h3><p>语法格式：</p><pre><code class="highlight css">background-position : (length | position) (length | position);</code></pre><table><thead><tr><th>position 属性值</th><th>说明</th></tr></thead><tbody><tr><td>length(精确位置)</td><td>百分数、浮点数字、单位标识符组成的长度值</td></tr><tr><td>position(方位名词)</td><td>top (上)、center (中心)、bottom (底)、left (左)、right (右)</td></tr></tbody></table><p>length属性值，如果只指定了一个值，该值将用于横坐标。纵坐标将默认为50%。第二个值将用于纵坐标。<br>注意：</p><ol><li>position 后面是x坐标和y坐标。 可以使用方位名词或者精确单位。</li><li>如果和精确单位和方位名字混合使用，则必须是x坐标在前，y坐标后面。<br>比如background-position: 15px top;   则 15px 一定是  x坐标   top是 y坐标。</li></ol><p><em>实际工作用的最多的，就是背景图片居中对齐了</em></p><hr><h3 id="背景附着-attachment"><a href="#背景附着-attachment" class="headerlink" title="背景附着 (attachment)"></a>背景附着 (attachment)</h3><p>语法格式：</p><pre><code class="highlight css">background-attachment : scroll | fixed</code></pre><p><font color =8BE9FD>scroll </font>: 　背景图像是随对象内容滚动（默认）<br> <font color =8BE9FD>fixed</font>: 　背景图像固定 0<br><em>设置或检索背景图像是随对象内容滚动还是固定的</em></p><hr><h3 id="背景连写"><a href="#背景连写" class="headerlink" title="背景连写"></a>背景连写</h3><p>background属性的值的书写顺序没有强制标准的。语法格式：</p><pre><code class="highlight css"><span class="selector-tag">background</span>: <span class="selector-tag">transparent</span> <span class="selector-tag">url</span>(路径) <span class="selector-tag">repeat-y</span>  <span class="selector-tag">scroll</span> 50% 0 ;<span class="selector-tag">background</span>:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置;</code></pre><hr><h3 id="背景透明"><a href="#背景透明" class="headerlink" title="背景透明"></a>背景透明</h3><p>CSS3支持背景半透明的写法语法格式是 :</p><pre><code class="highlight css"><span class="selector-tag">background</span>: <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.3</span>);</code></pre><p>最后一个参数是透明度  取值范围 0~1之间<br><em>背景半透明是指盒子背景半透明， 盒子里面的内容不受影响</em></p><h3 id="插入图片和背景图片的区别"><a href="#插入图片和背景图片的区别" class="headerlink" title="插入图片和背景图片的区别"></a>插入图片和背景图片的区别</h3><p><strong>插入图片</strong>我们用的最多。比如产品展示类<br><strong>背景图片</strong>一般用于小图标<strong>背景</strong>或者<strong>超大背景图片</strong></p><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><p>盒子模型就是把HTML页面中的元素看作是一个矩形的盒子，也就是一个盛装内容的容器。每个矩形都由元素的内容、内边距（padding）、边框（border）和外边距（margin）组成。</p><h3 id="盒子模型（Box-Model）"><a href="#盒子模型（Box-Model）" class="headerlink" title="盒子模型（Box Model）"></a>盒子模型（Box Model）</h3><p>元素框（element box），它描述了一个文档元素再网页布局汇总所占的位置大小。因此，<strong style="color: #f00;">每个盒子除了有自己大小和位置外，还影响着其他盒子的大小和位置。</strong></p><hr><h3 id="盒子边框（border）"><a href="#盒子边框（border）" class="headerlink" title="盒子边框（border）"></a>盒子边框（border）</h3><p>盒子的外边框，语法格式：</p><pre><code class="highlight css">border-width: (int) ||border-style: 样式 || <span class="selector-tag">border-color</span>: 颜色</code></pre><table><thead><tr><th>border 属性</th><th>说明</th></tr></thead><tbody><tr><td>border-width</td><td>边框的粗细</td></tr><tr><td>border-style</td><td>边框的样式(虚线，实线··)</td></tr><tr><td>border-color</td><td>边框的颜色</td></tr></tbody></table><p>border-style默认无边框（none），它有的样式：hidden（隐藏边框）、solid（实线边框）、dashed（虚线）、dotted（点线）、double（双实线）。<br><strong style="color: #f00;">如果border：0则清除所有边框！！！</strong><br><strong>连写：</strong></p><pre><code class="highlight css"><span class="selector-tag">border</span> : 边框的粗细 边框的样式 边框的颜色;</code></pre><p><font color = #b3d4fc>顺序无要求！</font></p><h3 id="盒子边框写法总结表"><a href="#盒子边框写法总结表" class="headerlink" title="盒子边框写法总结表"></a>盒子边框写法总结表</h3><table><thead><tr><th>设置内容</th><th>样式属性</th><th>常用属性值</th></tr></thead><tbody><tr><td>上边框</td><td>border-top-style:样式; border-top-width:宽度;border-top-color:颜色;border-top:宽度 样式 颜色;</td><td></td></tr><tr><td>下边框</td><td>border-bottom-style:样式;border- bottom-width:宽度;border- bottom-color:颜色;border-bottom:宽度 样式 颜色;</td><td></td></tr><tr><td>左边框</td><td>border-left-style:样式; border-left-width:宽度;border-left-color:颜色;border-left:宽度 样式 颜色;</td><td></td></tr><tr><td>右边框</td><td>border-right-style:样式;border-right-width:宽度;border-right-color:颜色;border-right:宽度 样式 颜色;</td><td></td></tr><tr><td>样式综合设置</td><td>border-style:上边 [右边 下边 左边];</td><td>none无（默认）、solid单实线、dashed虚线、dotted点线、double双实线</td></tr><tr><td>宽度综合设置</td><td>border-width:上边 [右边 下边 左边];</td><td>像素值</td></tr><tr><td>颜色综合设置</td><td>border-color:上边 [右边 下边 左边];</td><td>颜色值、#十六进制、rgb(r,g,b)、rgb(r%,g%,b%)</td></tr><tr><td>边框综合设置</td><td>border:四边宽度 四边样式 四边颜色;</td><td></td></tr></tbody></table><hr><h3 id="表格的细线边框（collapse）"><a href="#表格的细线边框（collapse）" class="headerlink" title="表格的细线边框（collapse）"></a>表格的细线边框（collapse）</h3><p>table表格标签 ，表示相邻边框合并在一起的css语句：</p><pre><code class="highlight css"><span class="selector-tag">border-collapse</span><span class="selector-pseudo">:collapse</span>;</code></pre><hr><h3 id="圆角边框（radius）"><a href="#圆角边框（radius）" class="headerlink" title="圆角边框（radius）"></a>圆角边框（radius）</h3><p>border-radius使边角变圆角，radius 半径（距离）。语法格式：</p><pre><code class="highlight css"><span class="selector-tag">border-radius</span>: 左上角  右上角  右下角  左下角;<span class="selector-tag">ro</span>:<span class="selector-tag">border-radius</span>: 50%</code></pre><hr><h3 id="内边距（padding）"><a href="#内边距（padding）" class="headerlink" title="内边距（padding）"></a>内边距（padding）</h3><p>padding属性用于设置内边距。  指边框与内容之间的距离。</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><font color =8BE9FD>padding-top</font></td><td>上内边距</td></tr><tr><td><font color =8BE9FD>padding-right</font></td><td>右内边距</td></tr><tr><td><font color =8BE9FD>padding-bottom</font></td><td>下内边距</td></tr><tr><td><font color =8BE9FD>padding-left</font></td><td>左内边距</td></tr></tbody></table><p><font color=#f00>padding属性参数如果是多个这由一下表格说明：</font></p><table><thead><tr><th>参数值的个数</th><th>表达意思</th></tr></thead><tbody><tr><td>1个值</td><td>padding:上下左右边距 比如padding: 3px;</td></tr><tr><td>2个值</td><td>padding:上下边距 左右边距 比如 padding: 3px 5px;</td></tr><tr><td>3个值</td><td>padding:上边距 左右边距 下边距 比如 padding: 3px 5px 10px;</td></tr><tr><td>4个值</td><td>padding:上内边距 右内边距 下内边距 左内边距 比如: padding: 3px 5px 10px 15px;</td></tr></tbody></table><p><font color=#f00><strong>注意：padding属性会撑破盒子原有的大小，适当食用。</strong></font></p><hr><h3 id="外边距（margin）"><a href="#外边距（margin）" class="headerlink" title="外边距（margin）"></a>外边距（margin）</h3><p>用于设置外边距。  设置外边距会在元素之间创建“空白”， 这段空白通常不能放置其他内容。</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><font color =8BE9FD>margin-top</font></td><td>上内边距</td></tr><tr><td><font color =8BE9FD>margin-right</font></td><td>右内边距</td></tr><tr><td><font color =8BE9FD>margin-bottom</font></td><td>下内边距</td></tr><tr><td><font color =8BE9FD>margin-left</font></td><td>左内边距</td></tr><tr><td><font color =8BE9FD>margin</font></td><td>上 右 下 左</td></tr></tbody></table><p><font color=#f00>margin属性参数如果是多个使用方式和padding属性相同</font></p><h3 id="外边距实现盒子居中"><a href="#外边距实现盒子居中" class="headerlink" title="外边距实现盒子居中"></a>外边距实现盒子居中</h3><p>可以让一个盒子实现水平居中，需要满足一下两个条件：</p><ol><li>必须是块级元素。     </li><li>盒子必须指定了宽度（width）</li></ol><p>然后就给<strong>左右的外边距都设置为auto</strong>，就可使块级元素水平居中。例子：</p><pre><code class="highlight css"><span class="selector-class">.header</span>&#123; <span class="attribute">width</span>:<span class="number">960px</span>; <span class="attribute">margin</span>:<span class="number">0</span> auto;&#125;</code></pre><h3 id="文字和盒子的居中"><a href="#文字和盒子的居中" class="headerlink" title="文字和盒子的居中"></a>文字和盒子的居中</h3><p>文字水平居中是 text-align: center<br>盒子水平居中 左右margin 改为 auto </p><h3 id="清除元素的默认内外边距"><a href="#清除元素的默认内外边距" class="headerlink" title="清除元素的默认内外边距"></a>清除元素的默认内外边距</h3><p>为了更方便地控制网页中的元素，制作网页时，可使用如下代码清除元素的默认内外边距： </p><pre><code class="highlight css">* &#123;   <span class="attribute">padding</span>:<span class="number">0</span>;         <span class="comment">/* 清除内边距 */</span>   <span class="attribute">margin</span>:<span class="number">0</span>;          <span class="comment">/* 清除外边距 */</span>&#125;</code></pre><p><font color=red>行内元素是只有左右外边距的，是没有上下外边距的，尽量不要给行内元素指定上下的内外边距就好了</font></p><h2 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a>外边距合并</h2><p>使用margin定义块元素的垂直外边距时，可能会出现外边距的合并。</p><h3 id="相邻块元素垂直外边距的合并"><a href="#相邻块元素垂直外边距的合并" class="headerlink" title="相邻块元素垂直外边距的合并"></a>相邻块元素垂直外边距的合并</h3><p>当上下相邻的两个块元素相遇时，如果上块元素有下外边距，下块元素有上外边距，则他们之间的垂直间距不是margin-bottom(下外边距)与margin-top(上外边距)之和，而是两者中的较大者。该现象被称为<strong>相邻块元素垂直外边距的合并</strong>（也称<strong>外边距塌陷</strong>）。<strong><font color=red><em>遇见该问题经量避免</em></font></strong></p><pre><code class="highlight css"><span class="selector-class">.no1</span> &#123;    <span class="attribute">width</span>: <span class="number">100px</span>;    <span class="attribute">height</span>: <span class="number">100px</span>;    <span class="attribute">background-color</span>: <span class="number">#b3d4fc</span>;    <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;&#125;<span class="selector-class">.no2</span> &#123;    <span class="attribute">width</span>: <span class="number">100px</span>;    <span class="attribute">height</span>: <span class="number">100px</span>;    <span class="attribute">background-color</span>: hotpink;    <span class="attribute">margin-top</span>: <span class="number">30px</span>;&#125;他们之间的距离为30<span class="selector-tag">px</span></code></pre><h3 id="嵌套块元素垂直外边距的合并"><a href="#嵌套块元素垂直外边距的合并" class="headerlink" title="嵌套块元素垂直外边距的合并"></a>嵌套块元素垂直外边距的合并</h3><p>对于两个嵌套关系的块元素，如果父块元素没有<strong>上内边距、边框</strong>，则父块元素的上外边距会与子块元素的上外边距发生合并，合并后的外边距为两者中的较大者，即使父元素的上外边距为0，也会发生合并。</p><pre><code class="highlight css"> <span class="selector-class">.no1</span> &#123;     <span class="attribute">width</span>: <span class="number">100px</span>;     <span class="attribute">height</span>: <span class="number">100px</span>;     <span class="attribute">background-color</span>: <span class="number">#b3d4fc</span>;&#125;<span class="selector-class">.no2</span> &#123;    <span class="attribute">width</span>: <span class="number">100px</span>;    <span class="attribute">height</span>: <span class="number">100px</span>;    <span class="attribute">background-color</span>: hotpink;    <span class="attribute">margin-top</span>: <span class="number">30px</span>;&#125;子块级元素的外边距控制父块级元素的外边距，子父外边距合并。</code></pre><p>解决方案：</p><ol><li>可以为父元素定义1像素的上边框或上内边距。</li><li>可以为父元素添加 overflow:hidden。</li></ol><h3 id="content宽度和高度"><a href="#content宽度和高度" class="headerlink" title="content宽度和高度"></a>content宽度和高度</h3><p>盒子的大小进行控制。盒子模型的总宽度和总高度的计算原则是：</p><pre><code class="highlight maxima"><span class="comment">/*外盒尺寸计算（元素空间尺寸）*/</span>Element空间高度 = <span class="built_in">content</span> <span class="built_in">height</span> + padding + <span class="built_in">border</span> + marginElement 空间宽度 = <span class="built_in">content</span> <span class="built_in">width</span> + padding + <span class="built_in">border</span> + margin<span class="comment">/*内盒尺寸计算（元素实际大小）*/</span>Element Height = <span class="built_in">content</span> <span class="built_in">height</span> + padding + <span class="built_in">border</span> （Height为内容高度）Element Width = <span class="built_in">content</span> <span class="built_in">width</span> + padding + <span class="built_in">border</span> （Width为内容宽度）</code></pre><ol><li>width和height仅适用于块级元素，对行内元素无效(img标签和input除外)</li><li>计算盒子模型的总高度时，还应考虑上下两个盒子垂直外边距合并</li><li><strong>如果一个盒子没有给定宽高，则会和父盒子一样；</strong></li><li><strong>如果此盒子没有给定宽度则padding不会影响本盒子大小</strong></li></ol><h3 id="盒子模型布局稳定性"><a href="#盒子模型布局稳定性" class="headerlink" title="盒子模型布局稳定性"></a>盒子模型布局稳定性</h3><p>按照优先使用  <strong>宽度</strong> （width）  其次使用<strong>内边距</strong>（padding）再次<strong>外边距</strong>（margin）。<br>$$<br>width &gt;  padding  &gt;   margin<br>$$<br><strong>原因：</strong></p><ol><li>margin会有外边距合并还有下面margin加倍的bug所以最后使用。</li><li>padding 会影响盒子大小，需要进行加减计算</li><li>width没有问题，经常使用宽度剩余法 高度剩余法来做。</li></ol><h3 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h3><pre><code class="highlight css">box-shadow: 水平阴影 垂直阴影 模糊距离 阴影尺寸 阴影颜色  内/外阴影；</code></pre><table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td>h-shadow</td><td>必须。水平阴影位置（正右负左）</td></tr><tr><td>v-shadow</td><td>必须。垂直阴影位置（正下负上）</td></tr><tr><td>blur</td><td>模糊距离</td></tr><tr><td>spread</td><td>阴影尺寸</td></tr><tr><td>color</td><td>阴影颜色</td></tr><tr><td>inset</td><td>将外阴影（默认）改为内阴影</td></tr></tbody></table><h2 id="浮动-float"><a href="#浮动-float" class="headerlink" title="浮动 (float)"></a>浮动 (float)</h2><p>CSS的定位机制有3种：普通流（标准流）、浮动和定位。</p><p>float属性来定义浮动，语法格式：</p><pre><code class="highlight css">选择器&#123;<span class="attribute">float</span>: 属性值;&#125;</code></pre><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>left</td><td>向右浮动</td></tr><tr><td>right</td><td>向左浮动</td></tr><tr><td>none（默认）</td><td>不浮动</td></tr></tbody></table><h3 id="浮动特性"><a href="#浮动特性" class="headerlink" title="浮动特性"></a>浮动特性</h3><p>浮动脱离标准流，不占位置，会影响标准流。浮动只有左右浮动。</p><ol><li>如果在一个父类盒子内浮动的子类盒子，浮动的子类盒子不会超出浮动范围</li><li>一个父盒子里面的子盒子，如果其中一个子级有浮动的，则其他子级都需要浮动。这样才能一行对齐显示</li><li>元素添加浮动后，元素会具有行内块元素的特性</li></ol><p><strong>浮动目的</strong></p><p>浮动的目的就是为了让多个块级元素同一行上显示。</p><p><strong>float      浮 漏 特</strong> </p><p>浮：    加了浮动的元素盒子是浮起来的，漂浮在其他的标准流盒子上面。<br>漏：    加了浮动的盒子，不占位置的，它浮起来了，它原来的位置漏 给了标准流的盒子。<br>特：    特别注意，首先浮动的盒子需要和标准流的父级搭配使用， 其次 特别的注意浮动可以使元素显示模式体现为行内块特性。</p><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><p>清除浮动主要为了解决父级元素因为子级浮动引起内部高度为 0 的问题。就是把浮动的盒子圈到里面，让父盒子闭合出口和入口不让他们出来影响其他元素。<br><strong>清除浮动：</strong></p><pre><code class="highlight css"><span class="selector-tag">clear</span>: 属性值;</code></pre><table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td>left</td><td>不允许左侧有浮动元素（清除左侧浮动的影响）</td></tr><tr><td>right</td><td>不允许右侧有浮动元素（清除右侧浮动的影响）</td></tr><tr><td>both</td><td>同时清除左右两侧浮动的影响</td></tr></tbody></table><hr><h4 id="额外标签法"><a href="#额外标签法" class="headerlink" title="额外标签法"></a>额外标签法</h4><p>通过在浮动元素末尾添加一个空的标签！<br><font color=red    >注意：是最后一个空的子标签</font></p><pre><code class="highlight css">&lt;div style=”clear:both”&gt;&lt;/div&gt;</code></pre><p><strong>优点：</strong> 通俗易懂，书写方便</p><p><strong>缺点：</strong> 添加许多无意义的标签，结构化较差</p><hr><h4 id="父级添加overflow属性方法"><a href="#父级添加overflow属性方法" class="headerlink" title="父级添加overflow属性方法"></a>父级添加overflow属性方法</h4><p>可以通过触发 BFC 的方式，可以实现清除浮动效果。<strong><font color=red><em>给父盒子添加！！！</em></font></strong></p><pre><code class="highlight css">overflow: hidden|auto|scroll;</code></pre><p><strong>优点：</strong>  代码简洁</p><p><strong>缺点：</strong>  内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素</p><hr><h4 id="after伪元素清除浮动"><a href="#after伪元素清除浮动" class="headerlink" title="after伪元素清除浮动"></a>after伪元素清除浮动</h4><p><strong>:after 方式为空元素的升级版，好处是不用单独加标签了</strong> </p><pre><code class="highlight css"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;      <span class="attribute">content</span>: <span class="string">""</span>;     <span class="attribute">display</span>: block;     <span class="attribute">height</span>: <span class="number">0</span>;     <span class="attribute">clear</span>: both;     <span class="attribute">visibility</span>: hidden; &#125; <span class="selector-class">.clearfix</span> &#123;    *zoom: 1;&#125; <span class="comment">/*zoom 1就是ie6清除浮动方式 * ie7以下的版本所识别* /</span></code></pre><p>父盒子调用 <font color =8BE9FD>clearfix</font> 类使用即可</p><p><strong>优点：</strong> 符合闭合浮动思想  结构语义化正确</p><p><strong>缺点：</strong>低版本不支持</p><p><font color=#f00><strong>注意： content:”” ，尽量不要带点</strong></font></p><hr><h4 id="使用before和after双伪元素清除浮动"><a href="#使用before和after双伪元素清除浮动" class="headerlink" title="使用before和after双伪元素清除浮动"></a>使用before和after双伪元素清除浮动</h4><pre><code class="highlight css"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>, <span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;   <span class="attribute">content</span>:<span class="string">""</span>;  <span class="attribute">display</span>:table;  <span class="comment">/* 这句话可以出发BFC BFC可以清除浮动,BFC我们后面讲 */</span>&#125;<span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;  <span class="attribute">clear</span>:both;&#125;<span class="selector-class">.clearfix</span> &#123;  *zoom:1;&#125;</code></pre><p>父盒子调用 <font color =8BE9FD>clearfix</font> 类使用即可<br><strong>优点：</strong>  代码更简洁</p><p><strong>缺点：</strong> 低版本不支持</p><hr><h2 id="版心和布局流程"><a href="#版心和布局流程" class="headerlink" title="版心和布局流程"></a>版心和布局流程</h2><h3 id="版心"><a href="#版心" class="headerlink" title="版心"></a>版心</h3><p>是指网页中主体内容所在的区域。一般在浏览器窗口中水平居中显示，常见的宽度值为960px、980px、1000px、1200px等。</p><h3 id="布局流程"><a href="#布局流程" class="headerlink" title="布局流程"></a>布局流程</h3><p>布局时通常需要遵守一定的布局流程，具体如下：</p><ol><li>确定页面的版心（可视区）</li><li>分析页面中的行模块，以及每个行模块中的列模块</li><li>制作HTML结构 </li><li>CSS初始化，然后开始运用盒子模型的原理，通过DIV+CSS布局来控制网页的各个模块。</li></ol><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>定位可以实现<code>标准流</code>和<code>浮动</code>难以实现的结果简单化。</p><h3 id="元素的定位属性"><a href="#元素的定位属性" class="headerlink" title="元素的定位属性"></a>元素的定位属性</h3><p>元素的定位属性主要包括定<code>位模式</code>和<code>边偏移</code>两部分。</p><p><strong>1、边偏移</strong></p><table><thead><tr><th>边偏移属性</th><th>说明</th></tr></thead><tbody><tr><td>top</td><td>顶端，定义元素相对于其父元素上边线的距离</td></tr><tr><td>bottom</td><td>底部，定义元素相对于其父元素下边线的距离</td></tr><tr><td>left</td><td>左侧，定义元素相对于其父元素左边线的距离</td></tr><tr><td>right</td><td>右侧，定义元素相对于其父元素右边线的距离</td></tr></tbody></table><p><strong>2、定位模式(定位的分类)</strong></p><p>在CSS中，<font color =8BE9FD>position</font> 属性用于定义元素的 定位模式 ，语法格式如下：</p><pre><code class="highlight css">选择器&#123;<span class="attribute">position</span>: 属性值;&#125;</code></pre><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>static</td><td>静态定位（默认）</td></tr><tr><td>relative</td><td>相对定位，相对于其原文档流的位置进行定位</td></tr><tr><td>absolute</td><td>绝对定位，相对于其上一个已经定位的父元素进行定位</td></tr><tr><td>fixed</td><td>固定定位，相对于浏览器窗口进行定位</td></tr></tbody></table><hr><h3 id="静态定位-static"><a href="#静态定位-static" class="headerlink" title="静态定位 (static)"></a>静态定位 (static)</h3><p>可以将元素定位于静态位置。 所谓静态位置就是各个元素在HTML文档流中默认的位置。<strong>在静态定位状态下，无法通过边偏移属性（top、bottom、left或right）来改变元素的位置。唯一用途是取消定位</strong></p><hr><h3 id="相对定位-relative"><a href="#相对定位-relative" class="headerlink" title="相对定位 (relative)"></a>相对定位 (relative)</h3><p>对元素设置相对定位后，可以通过边偏移属性改变元素的位置，但是它在文档流中的位置仍然保留</p><p><font color=#f00><strong>注意：</strong></font></p><ol><li>可以通过边偏移移动位置，原来的所占的位置继续占有。</li><li>每次移动的位置，是以自己的左上角为基点移动</li></ol><hr><h3 id="绝对定位-absolute"><a href="#绝对定位-absolute" class="headerlink" title="绝对定位 (absolute)"></a>绝对定位 (absolute)</h3><p>对元素的定位模式设置为 绝对定位后，它可以通过边偏移移动位置，但是它完全脱标，完全不占位置。</p><p><font color=#f00><strong>注意：</strong></font></p><ol><li>可以通过边偏移移动位置，原来的所占的位置不占有。</li><li>无父级定位，以浏览器的左上角为基点移动</li><li>有父级定位，以父级的左上角为基点移动</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CSS初识&quot;&gt;&lt;a href=&quot;#CSS初识&quot; class=&quot;headerlink&quot; title=&quot;CSS初识&quot;&gt;&lt;/a&gt;CSS初识&lt;/h2&gt;&lt;p&gt;css样式表或层叠样式表（级联样式表），用与设置HTML页面的文本内容（字体，大小，对齐样式）、图片外形等外观。&lt;b
      
    
    </summary>
    
    
      <category term="前端" scheme="https://sanscan.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="笔记" scheme="https://sanscan.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="css" scheme="https://sanscan.top/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>MySQL</title>
    <link href="https://sanscan.top/2020/04/16/MySQL/"/>
    <id>https://sanscan.top/2020/04/16/MySQL/</id>
    <published>2020-04-15T16:00:00.000Z</published>
    <updated>2020-04-24T00:29:35.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h1><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><pre><code class="highlight mysql">CREATE DATABASE [IF NOT EXISTS] 数据库名 [编码集设置];编码集设置:CHARACTER SET 字符集名 [校对规则]校对规则:COLLATE 校对名</code></pre><p>IF NOT EXISTS：检查是否已存在的状态<br>CHARACTER SET：编码集设置<br>COLLATE：校对规则 <em>（在字符集内用于比较字符的一套规则）</em></p><h2 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h2><pre><code class="highlight mysql">显示数据库:SHOW DATABASES;显示数据库创建语句:SHOW CREATE DATABASE 数据库名;查看当前所选的数据库：SELECT DATABASE();</code></pre><h2 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h2><pre><code class="highlight mysql">ALTER DATABASE [IF NOT EXISTS] 数据库名 [编码集设置];编码集设置:CHARACTER SET 字符集名 [校对规则]校对规则:COLLATE 校对名</code></pre><h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><pre><code class="highlight MYSQL">DROP DATABASE [IF EXISTS]  数据库名;</code></pre><h2 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h2><pre><code class="highlight MYSQL">USE 数据库名;</code></pre><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="整型数据"><a href="#整型数据" class="headerlink" title="整型数据"></a>整型数据</h2><table><thead><tr><th>整型数据</th><th>字节数</th><th>无符号的取值范围</th><th>有符号的取值范围</th></tr></thead><tbody><tr><td>TINYINT</td><td>1</td><td>0~225</td><td>-125~127</td></tr><tr><td>SMALLINT</td><td>2</td><td>0-65535</td><td>-32768~32768</td></tr><tr><td>MEDIUMINT</td><td>3</td><td>0~16777215</td><td>···</td></tr><tr><td>INT</td><td>4</td><td>0-4294967295</td><td>···</td></tr><tr><td>BIGINT</td><td>8</td><td>0~18446744073709551615</td><td></td></tr></tbody></table><h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><table><thead><tr><th>浮点型数据</th><th>字节数</th></tr></thead><tbody><tr><td>FLOAT</td><td>4</td></tr><tr><td>DOUBLE</td><td>8</td></tr><tr><td><strong>定点数型数据</strong></td><td></td></tr><tr><td>DECIMAL(（）M , 2)</td><td>M+2</td></tr></tbody></table><h2 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h2><table><thead><tr><th>数据类型</th><th>字节数</th><th>取值范围</th><th>日期格式</th><th>零值</th></tr></thead><tbody><tr><td>YEAR</td><td>1</td><td>1901~2155</td><td>YYYY</td><td>0000</td></tr><tr><td>DATE</td><td>4</td><td>1000-01-01-9999-12-3</td><td>YYYY-MM-DD</td><td>0000-00-00</td></tr><tr><td>TIME</td><td>3</td><td>-838:59:59-838:59:59</td><td>HH:MM:SS</td><td>00:00:00</td></tr><tr><td>DATETIME</td><td>8</td><td>11</td><td>YYYY-MM-DD、HH:MM:SS</td><td>0000-00-00 00:00:00</td></tr><tr><td>TIMESTAMP</td><td>4</td><td>1970-01-01 00:00:01~2038-01-19 03:14:07</td><td>YYYY-MM-DD、HH:MM:SS</td><td>0000-00-00 00:00:00</td></tr></tbody></table><h2 id="字符串型"><a href="#字符串型" class="headerlink" title="字符串型"></a>字符串型</h2><table><thead><tr><th>字符串类型(单位：字节)</th><th>字节状态</th><th>优点</th></tr></thead><tbody><tr><td>CHAR((int)Max)</td><td>固定</td><td>查询快</td></tr><tr><td>VARCHAR((int)Max)</td><td>动态</td><td>省空间</td></tr></tbody></table><h2 id="二进制数据类型"><a href="#二进制数据类型" class="headerlink" title="二进制数据类型"></a>二进制数据类型</h2><table><thead><tr><th>二进制数据类型(单位：长度)</th><th>长度状态</th></tr></thead><tbody><tr><td>BINARY((int)Max)</td><td>固定</td></tr><tr><td>VARBINARY((int)Max)</td><td>动态</td></tr></tbody></table><p><em>BINARY类型的长度是固定的，如果长度不足最大长度,后面用“0”对齐，直到指定长度。</em></p><h2 id="大文本数据类型"><a href="#大文本数据类型" class="headerlink" title="大文本数据类型"></a>大文本数据类型</h2><table><thead><tr><th>大文本数据类型</th><th>存储范围（单位：字节）</th></tr></thead><tbody><tr><td>TINYTEXT</td><td>0~255字节</td></tr><tr><td>TEXT</td><td>0~65535字节</td></tr><tr><td>MEDIUMTEXT</td><td>0~16777215字节</td></tr><tr><td>LONGTEXT</td><td>0~4294967295字节</td></tr></tbody></table><h2 id="大数据二进制类型"><a href="#大数据二进制类型" class="headerlink" title="大数据二进制类型"></a>大数据二进制类型</h2><table><thead><tr><th>特殊二进制类型</th><th>存储范围（单位：字节）</th></tr></thead><tbody><tr><td>TINYBLOB</td><td>0~255字节</td></tr><tr><td>BLOB</td><td>0-65535字节</td></tr><tr><td>MEDIUMBLOB</td><td>0~16777215字节</td></tr><tr><td>LONGBLOB</td><td>0-4294967295字节</td></tr></tbody></table><h2 id="枚举型"><a href="#枚举型" class="headerlink" title="枚举型"></a>枚举型</h2><p>ENUM类型数据格式：</p><pre><code class="highlight mysql">ENUM(&#39;值1&#39;,&#39;值2&#39;···&#39;值n&#39;)</code></pre><h1 id="操作表"><a href="#操作表" class="headerlink" title="操作表"></a>操作表</h1><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><pre><code class="highlight mysql">CREATE TABLE 表名(   字段名1 数据类型 [完整性约束条件],   字段名2 数据类型 [完整性约束条件],   ·······   字段名n 数据类型 [完整性约束条件],   [完整性约束条件](字段1,字段2,·····,字段n))[编码集设置];编码集设置:CHARACTER SET 字符集名 [校对规则]校对规则:COLLATE 校对名</code></pre><p><em>建议不要在数据库中设置太多字符集名和校对规则</em></p><h2 id="查看表"><a href="#查看表" class="headerlink" title="查看表"></a>查看表</h2><pre><code class="highlight mysql">查看表结构：DESC 表名;查看所有表:SHOW TABLES;查看表的详细结构：SHOW CREATE TABLE 表名;</code></pre><h2 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h2><h3 id="增加字段"><a href="#增加字段" class="headerlink" title="增加字段"></a>增加字段</h3><pre><code class="highlight mysql">ALTER TABLE 表名 ADD 字段名 数据类型;</code></pre><h3 id="修改字段与顺序"><a href="#修改字段与顺序" class="headerlink" title="修改字段与顺序"></a>修改字段与顺序</h3><pre><code class="highlight mysql">ALTER TABLE 表名 MODIFY 字段名1 数据类型 [更改字段循序 | 完整性约束条件];更改字段循序:FIRST | (AFTER 字段名2)</code></pre><p><strong>FIRST</strong>：将字段1更改为表的第一个字段<br><strong>AFTER</strong>：将字段1插入字段2的后面</p><h3 id="修改字段名"><a href="#修改字段名" class="headerlink" title="修改字段名"></a>修改字段名</h3><pre><code class="highlight mysql">ALTER TABLE 表名 CHANGE 字段名 新字段名 字段类型;</code></pre><h3 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h3><pre><code class="highlight mysql">RENAME TABLE 表名 to 新表名;</code></pre><h3 id="修改表字符集"><a href="#修改表字符集" class="headerlink" title="修改表字符集"></a>修改表字符集</h3><pre><code class="highlight mysql">ALTER TABLE 表名 CHARACTER SET 字符集类型;</code></pre><h3 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h3><pre><code class="highlight mysql">ALTER TABLE 表名 DROP 字段名;</code></pre><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><pre><code class="highlight mysql">DROP TABLE 表名;</code></pre><h3 id="表的约束"><a href="#表的约束" class="headerlink" title="表的约束"></a>表的约束</h3><p>为了防止数据表中插入错误的数据。</p><table><thead><tr><th>约束条件</th><th>说明</th></tr></thead><tbody><tr><td>PRIMARY KEY</td><td>主键约束，用于唯一标识对应的记录</td></tr><tr><td>FOREIGN KEY</td><td>外键约束</td></tr><tr><td>NOT NULL</td><td>非空约束</td></tr><tr><td>UNIQUE</td><td>唯一性约束</td></tr><tr><td>DEFAULT</td><td>默认值约束，用于设置字段的默认值</td></tr><tr><td>CHECK</td><td>约束取值范围</td></tr><tr><td>UNSIGNED</td><td>无符号约束</td></tr></tbody></table><p><strong>无符号约束：</strong></p><pre><code class="highlight mysql">字段名 数据类型 UNSIGNED</code></pre><p><strong>约束范围：</strong></p><pre><code class="highlight mysql">字段名 数据类型 CHECK (字段值&gt;0 and 字段值&lt;&#x3D;100)</code></pre><h6 id="单字段主键："><a href="#单字段主键：" class="headerlink" title="单字段主键："></a><strong>单字段主键：</strong></h6><p>是由一个字段构成的主键，语法格式:</p><pre><code class="highlight mysql">字段名 数据类型 PRIMARY KEY</code></pre><p><strong>多字段主键：</strong><br>是多个字段组合而成的主键，语法格式:</p><pre><code class="highlight mysql">PRIMARY KEY &#123;字段名1，字段名2，···字段名n&#125;</code></pre><p><em>每个数据表中最多只能有一个主键约束，定义为PRIMARY KEY的字段不能有重复值也不能为NULL值。</em><br><strong>非空约束：</strong><br>是字段的值不能为NULL（空），语法格式:</p><pre><code class="highlight mysql">字段名 数据类型 NOT NULL</code></pre><p><strong>唯一约束：</strong><br>用于保证数据表中字段的<strong>唯一性</strong>,使表中字段的值不能重复出现。语法格式:</p><pre><code class="highlight mysql">字段名 数据类型 UNIQUE</code></pre><p> <strong>默认约束：</strong><br>用于给数据表中的字段指定默认值，当在表中插入新记录时，如果字段没有赋值，系统会自动为字段插入默认值。语法格式:</p><pre><code class="highlight mysql">字段名 数据类型 DEFAULT 默认值</code></pre><h2 id="字段自动增加"><a href="#字段自动增加" class="headerlink" title="字段自动增加"></a>字段自动增加</h2><p>在数据表中，若想为表中插入的新记录自动生成<strong>唯一的 ID</strong>,可以使用自增约束来实现。AUTO_ INCREMENT约束的字段可以是任何整数类型。默认情况下，该字段的值是从1开始自增的。使用AUTO_ INCREMENT设置表字段值自动增加的基本语法格式:      <em>该字段是唯一性类型</em></p><pre><code class="highlight mysql">字段名 数据类型 AUTO_INCREMENT</code></pre><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><h2 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h2><p>INDEX。可以创建在任何数据类型中，值是否唯一和非空没有固定的要求。</p><pre><code class="highlight mysql">INDEX(字段名)</code></pre><pre><code class="highlight mysql">CREATE INDEX 索引名 ON 表名 (字段名);</code></pre><pre><code class="highlight mysql">ALTER TABLE 表名 ADD INDEX 索引名 (字段名);</code></pre><h2 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h2><p>UNIQUE。该索引所在字段的值必须是唯一的。</p><pre><code class="highlight mysql">UNIQUE INDEX 索引名 (字段名 (ASC | DESC))</code></pre><pre><code class="highlight mysql">CREATE UNIQUE INDEX 索引名 ON 表名 (字段名);</code></pre><pre><code class="highlight mysql">ALTER TABLE 表名 ADD UNIQUE INDEX 索引名 (字段名);</code></pre><h2 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h2><p>FULLTEXT。它只能创建在CHAR、VARCHAR或TEXT类型的字段上，现在只有<strong>MyISAM存储引擎</strong>支持全文索引。</p><pre><code class="highlight mysql">FULLTEXT INDEX 索引名 (字段名)</code></pre><pre><code class="highlight mysql">CREATE FULLTEXT INDEX 索引名 ON 表名 (字段名);</code></pre><pre><code class="highlight mysql">ALTER TABLE 表名 ADD FULLTEXT INDEX 索引名 (字段名);</code></pre><p><strong><em>PS:后面需存储引擎(ENGINE =MyISAM)</em></strong></p><h2 id="单列索引"><a href="#单列索引" class="headerlink" title="单列索引"></a>单列索引</h2><p>在表中单个字段上创建索引，它可以是普通索引、唯一索引或者全文素引， 只要保证该索引只对应表中一个字段即可。</p><pre><code class="highlight mysql">INDEX 索引名 (字段名)</code></pre><pre><code class="highlight mysql">CREATE INDEX 索引名 ON 表名 (字段名);</code></pre><pre><code class="highlight mysql">ALTER TABLE 表名 ADD INDEX 索引名 (字段名);</code></pre><h2 id="多列索引"><a href="#多列索引" class="headerlink" title="多列索引"></a>多列索引</h2><p>多列索引指的是在表中多个字段上创建索引，只有在查询条件中使用了这些字段中的第一个字段时,该索引才会被使用。</p><pre><code class="highlight mysql">INDEX 索引名 (字段名1,字段名2,···字段名n)</code></pre><pre><code class="highlight mysql">CREATE INDEX 索引名 ON 表名 (字段名1,字段名2,···字段名n);</code></pre><pre><code class="highlight mysql">ALTER TABLE 表名 ADD INDEX 索引名  (字段名1,字段名2,···字段名n);</code></pre><h2 id="空间索引"><a href="#空间索引" class="headerlink" title="空间索引"></a>空间索引</h2><p>SPATIAL。它只能创建在空间数据类型的字段上。MySQL中的空间数据类型有4种,分别是<strong>LGEOMETRY、POINT、 LINESTRING和POLYGON</strong>，空间索引只能在存储引擎为<strong>MyISAM</strong>的表中创建。</p><pre><code class="highlight mysql">SPATIAL INDEX 索引名 (字段名)</code></pre><pre><code class="highlight mysql">CREATE SPATIAL INDEX 索引名 ON 表名 (字段名);</code></pre><pre><code class="highlight mysql">ALTER TABLE 表名 ADD SPATIAL INDEX 索引名 (字段名);</code></pre><p><strong><em>PS:后面需存储引擎(ENGINE =MyISAM)</em></strong></p><h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><p><strong>建表时创建索引：</strong></p><pre><code class="highlight mysql">CREATE TABLE 表名(字段名1 数据类型 [完整性约束条件]，字段名2 数据类型 [完整性约束条件]，     ·····字段名n 数据类型[UNIQUE | FULLTEXT | SPATIAL] INDEX | KEY[索引名] (字段名1 [(长度)]) [ASC | DESC]))[存储引擎];</code></pre><p><strong>已经创建表后创建索引：</strong><br>使用<strong>CREATE INDEX</strong>语句，语法格式:</p><pre><code class="highlight mysql">CREATE [UNIQUE | FULLTEXT | SPATIAL] INDEX 索引名 ON 表名 (字段名[(长度)] [ASC | DESC])[存储引擎];</code></pre><p>使用<strong>ALTER TABLE</strong>语句，语法格式:</p><pre><code class="highlight mysql">ALTER TABLE 表名 ADD [UNIQUE | FULLTEXT | SPATIAL] INDEX 索引名 (字段名[(长度)] [ASC | DESC])</code></pre><p>UNIQUE： 可选参数，表示唯一性约束<br>FULLTEXT：可选参数，表示全文约束<br>SPATIAL： 可选参数，表示空间约束<br>INDEX和KEY：用来表示字段的索引，二者选一即可<br>索引名：可选参数，表示创建的索引的名称<br>字段名1：指定索引对应字段的名称<br>长度：可选参数，用于表示索引的长度<br>ASC和DESC：可选参数，其中，ASC表示升序排列，DESC表示降序排列</p><h2 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h2><p>使用<strong>ALTER TABLE</strong>语句删除索引，语法格式:</p><pre><code class="highlight mysql">ALTER TABLE 表名 DROP INDEX 索引名;</code></pre><p>使用<strong>DROP INDEX</strong>删除索引，语法格式:</p><pre><code class="highlight mysql">DROP INDEX 索引名 ON 表名;</code></pre><h1 id="数据添加"><a href="#数据添加" class="headerlink" title="数据添加"></a>数据添加</h1><h2 id="新增数据"><a href="#新增数据" class="headerlink" title="新增数据"></a>新增数据</h2><p>使用INSERT语句向表插入数据</p><pre><code class="highlight mysql">INSERT INTO 表名 [(字段名1 [，字段名2. . .])] VALUES(值1 [,值2. . .]);</code></pre><p><em>插入的数据应与字段的数据类型相同。</em><br><em>数据的大小应在字段的数据类型规定范围内。</em><br><strong><em>在VALUES中列出的数据位置必须与被加入的字段的排列位置相对应。</em></strong><br><em>字符和日期型数据应包含在<strong>单引号</strong>中。</em><br><em>插入空值:不指定或 INSERT INTO 表名 VALUES(NULL)；</em><br><em>如果要插入所有字段可以省写字段，直接按表中字段顺序写值。</em></p><h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><p>使用UPDATE语句修改表中的数据</p><pre><code class="highlight mysql">UPDATE 表名 SET 字段名1 &#x3D; 值1 [,字段名2 &#x3D; 值2..][WHERE 条件表达式];</code></pre><p>条件表达式:<br>指定字段行的数据更改，如 id = 112 、name = ‘刘邦’<br>UPDATE：可以用新值更新原有表行中的各列<br>SET：指示要修改哪些列和要给予哪些值。<br>WHERE：指定更新哪些行。没有WHERE子句，<strong><em>则更新所有的行</em></strong>。</p><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p>使用DELETE语句删除表中数据</p><pre><code class="highlight mysql">DELETE FROM 表名 [WHERE 条件表达式];</code></pre><p><strong><em>如果不使用where子句，将删除表中所有数据。</em></strong><br>DELETE语句不能删除某一列的值 ( 可使用update)<br>使用DELETE语句仅删除记录，不删除表本身<br>从一个表中删除记录将引起其它表的参照完整性<br><strong><em>外键约束</em></strong><br>删除表中数据也可使用TRUNCATE语句，它和delete有所<br>不同，格式化数据！！！</p><pre><code class="highlight mysql">TRUNCATE 表名;</code></pre><h1 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h1><p><strong>SELECT的语法结构：</strong></p><pre><code class="highlight MYSQL">SELECT [DISTINCT] (* | &#123;字段名1 [别名][,字段名2[别名]····,字段名n[别名]]&#125; ) FROM 表名 [可选参数];可选参数:[WHERE 条件表达式];高级查询的语句:[GROUP BY 字段名 [HAVING 条件表达式2]] ;[ORDER BY 字段名 [ASC | DESC]] ;[LIMIT [OFFSET] (int)记录数];</code></pre><p><strong>SELECT</strong>：指定查询那个字段数据<br><strong>*：</strong>查询所有字段(列)的意思<br><strong>{字段1,字段2,字段3..}:</strong> 指定查询字段<br>    字段里可进行运算，前提类型符合 ，但底层数据不会被修改！！！<br><strong>别名</strong>：代替字段名<br> <strong>FROM</strong>：指定查询的表<br>可选参数：<br><strong>DISTINCT：</strong>过滤表字段中重复的值（数据），如果指定是多个字段，而且指定的字段值相同，则过滤重复的值！！！<br><strong>WHERE：</strong>指定查询条件<br><strong>GROUP BY：</strong>将查询结果按指定字段进行分组<br>    <strong>HAVING：</strong>对分组后的结果进行过滤<br><strong>ORDER BY：</strong>将查询结果按指定字段进行排序，排列方式有参数ASC（升序）、DESC（降序）控制，默认为ASC（升序）<br><strong>LIMIT：</strong>限制查询结果的数量，后面有可有两个参数，<br>    <strong>OFFSET：</strong>表示偏移量，如果偏移量为0则从第一条开始,。不指定参数1，其默认值为0。<br>    <strong>记录数：</strong>表示返回查询记录的条数</p><table><thead><tr><th>运算符</th><th>展示</th><th>说明</th></tr></thead><tbody><tr><td>比较运算符</td><td>&gt;,&lt;,&lt;=,&gt;=,=,&lt;&gt;</td><td>···</td></tr><tr><td></td><td>字段 BETWEEN(int)值AND(int)值</td><td>显示某个区域的值</td></tr><tr><td></td><td>字段 IN(值1,值2,···)</td><td>显示在字段里的值</td></tr><tr><td></td><td>字段 LIKE ’张%’</td><td>模糊查询%_</td></tr><tr><td></td><td>字段 IS NULL</td><td>判断是否为空</td></tr><tr><td>逻辑运算符</td><td>AND</td><td>多个条件同时成立</td></tr><tr><td></td><td>OR</td><td>多个条件任一个成立</td></tr><tr><td></td><td>NOT</td><td>不成立， 例如：where not(salary&gt;100);</td></tr></tbody></table><h2 id="普通查询"><a href="#普通查询" class="headerlink" title="普通查询"></a>普通查询</h2><h3 id="条件查询WHERE语句"><a href="#条件查询WHERE语句" class="headerlink" title="条件查询WHERE语句"></a>条件查询WHERE语句</h3><p>SELECT的语法里的可选参数，满足条件的查询，基本语法：</p><pre><code class="highlight mysql">可选参数:··· WHERE (条件表达式);如:··· WHERE Engilsh &gt; 80;</code></pre><h3 id="IN-指定值"><a href="#IN-指定值" class="headerlink" title="IN 指定值"></a>IN 指定值</h3><p>用于查指定的数值，语法格式：</p><pre><code class="highlight mysql">SELECT * | &#123;字段1,字段2...字段n&#125;FROM 表名 WHERE 字段名 [NOT] IN (值1，值2，···);</code></pre><h3 id="BETWEEN-AND-范围"><a href="#BETWEEN-AND-范围" class="headerlink" title="BETWEEN AND 范围"></a>BETWEEN AND 范围</h3><p>用于查询指定范围值，语法格式：</p><pre><code class="highlight mysql">SELECT * | &#123;字段1,字段2...字段n&#125;FROM 表名 WHERE 字段名 [NOT] BETWEEN (int)值1 AND (int)值2;</code></pre><p><em>查询字段名的值1和值2的范围，前提*</em>2值必须大于1值***</p><h3 id="NULL-空值查询"><a href="#NULL-空值查询" class="headerlink" title="NULL 空值查询"></a>NULL 空值查询</h3><p>空值查询一判断某些列是否有NULL值。语法格式：</p><pre><code class="highlight mysql">SELECT * | &#123;字段1,字段2...字段n&#125;FROM 表名 WHERE 字段名 IS [NOT] NULL;</code></pre><h3 id="DISTINCT-过滤查询"><a href="#DISTINCT-过滤查询" class="headerlink" title="DISTINCT 过滤查询"></a>DISTINCT 过滤查询</h3><p>去除重复的字段值。语法格式：</p><pre><code class="highlight mysql">SELECT DISTINCT * | &#123;字段1,字段2...字段n&#125; FROM 表名 [···];</code></pre><h3 id="LIKE-模糊查询"><a href="#LIKE-模糊查询" class="headerlink" title="LIKE  模糊查询"></a>LIKE  模糊查询</h3><p>寻找匹配的字符串。语法格式：</p><pre><code class="highlight mysql">SELECT * | &#123;字段1,字段2...字段n&#125;FROM 表名 WHERE 字段名 [NOT] LIKE &#39;匹配字符串%_&#39;;</code></pre><p><strong>注意：</strong><font color = red>Like语句中，‘ % ’代表零个或多个任意字符，‘ _ ’代表一个字符，通配符前缀需右斜线‘ \ ’进行转义，“%”为‘ % ’。</font></p><pre><code class="highlight mysql">例子：字段名 LIKE&#39;_a%\%&#39;;</code></pre><h3 id="AND-多条件查询"><a href="#AND-多条件查询" class="headerlink" title="AND 多条件查询"></a>AND 多条件查询</h3><p>（交集）连接两个或者多个查询条件。语法格式：</p><pre><code class="highlight mysql">SELECT * | &#123;字段1,字段2...字段n&#125;FROM 表名 WHERE 条件表达式1 [AND 条件表达式2 [··· AND 条件表达式n]];</code></pre><h3 id="OR-多条件查询"><a href="#OR-多条件查询" class="headerlink" title="OR 多条件查询"></a>OR 多条件查询</h3><p>（并集）记录满足任意一个条件即被查出。语法格式：</p><pre><code class="highlight mysql">SELECT * | &#123;字段1,字段2...字段n&#125;FROM 表名 WHERE 条件表达式1 [OR 条件表达式2 [··· OR 条件表达式n]];</code></pre><p><strong>OR和AND一起用的情况：</strong><br><font color = #b3d4fc>AND的优先级高于OR，因此当两者在一起使用时，应该先运算AND两边的条件表达式，再运算OR两边的条件表达式。</font></p><h2 id="高级查询"><a href="#高级查询" class="headerlink" title="高级查询"></a>高级查询</h2><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><h4 id="COUNT-记数函数"><a href="#COUNT-记数函数" class="headerlink" title="COUNT() 记数函数"></a>COUNT() 记数函数</h4><p>用来统计记录的条数，语法格式:</p><pre><code class="highlight mysql">SELECT COUNT((*) | (字段名)) FROM 表名 [WHERE 条件表达式];</code></pre><h4 id="SUM-求和函数"><a href="#SUM-求和函数" class="headerlink" title="SUM() 求和函数"></a>SUM() 求和函数</h4><p>用于求出表中某个字段所有值的总和，语法格式:</p><pre><code class="highlight mysql">SELECT SUM(字段名1)[,SUM(字段名2)...,SUM(字段名n)] FROM 表名[WHERE 条件表达式];</code></pre><p><font color = #b3d4fc>SUM里面的字段可进行运算，前提类型符合 ，但底层数据不会被修改！！！</font></p><h4 id="AVG-平均值函数"><a href="#AVG-平均值函数" class="headerlink" title="AVG() 平均值函数"></a>AVG() 平均值函数</h4><p>用于求出某个字段所有值的平均值，语法格式:</p><pre><code class="highlight mysql">SELECT AVG(字段名1)[,AVG(字段名2)...,AVG(字段名n)] FROM 表名 [WHERE 条件表达式];</code></pre><p><font color = #b3d4fc>AVG里面的字段可进行运算，前提类型符合 ，但底层数据不会被修改！！！</font></p><h4 id="MAX-最大值函数"><a href="#MAX-最大值函数" class="headerlink" title="MAX() 最大值函数"></a>MAX() 最大值函数</h4><p>用于求出某个字段的最大值，语法格式:</p><pre><code class="highlight mysql">SELECT MAX(字段名1)[,MAX(字段名2)...,MAX(字段名n)] FROM 表名 [WHERE 条件表达式];</code></pre><p><font color = #b3d4fc>MAX里面的字段可进行运算，前提类型符合 ，但底层数据不会被修改！！！</font></p><h4 id="MIN-最小值函数"><a href="#MIN-最小值函数" class="headerlink" title="MIN() 最小值函数"></a>MIN() 最小值函数</h4><p>用于求出某个字段的最小值，语法格式:</p><pre><code class="highlight mysql">SELECT MIN(字段名1)[,MIN(字段名2)...,MIN(字段名n)] FROM 表名 [WHERE 条件表达式];</code></pre><p><font color = #b3d4fc>MAX里面的字段可进行运算，前提类型符合 ，但底层数据不会被修改！！！</font><br><font color = red> 函数后面的字段和所有要有小号包括，否则无法识别要记录的数</font></p><h3 id="ORDER-BY-顺序查询"><a href="#ORDER-BY-顺序查询" class="headerlink" title="ORDER BY (顺序查询)"></a>ORDER BY (顺序查询)</h3><p>对查询结果进行排序，语法格式:</p><pre><code class="highlight mysql">SELECT 字段名1[,字段2...,字段n]FROM 表名 ORDER BY 字段名1 [ASC | DESC][,字段名2 [ASC| DESC]...,字段名n [ASC | DESC]];</code></pre><p>ORDER BY：指定字段进行排序<br>SELECT：指定查询的字段<br>ASC升序（默认）、DESC降序<br><font color = red>ORDER BY子句应位于SELECT语句的结尾。</font><br><font color = #b3d4fc>指定字段升序排列时，如果某条字段值为NULL,则这条记录会在第一条显示，这是因为NULL值可以被认为是最小值</font></p><h3 id="GROUP-BY-分组查询"><a href="#GROUP-BY-分组查询" class="headerlink" title="GROUP BY (分组查询)"></a>GROUP BY (分组查询)</h3><p>对字段值进行<strong>分组查询</strong>，语法格式:</p><pre><code class="highlight mysql">SELECT 字段名1 | 聚合函数[,字段2 | 聚合函数...,字段n|聚合函数]FROM 表名GROUP BY 字段名1,字段2,···[HAVING 条件表达式];</code></pre><p>SELECT 后面的字段是要查询的字段。<br>GROUP BY 后面的字段为要分组的字段<br>使用方式：</p><ol><li><p><strong>单独使用GROUP BY</strong></p><p>查询的是每个分组中的一条记录。</p></li><li><p><strong>GROUP BY和聚合函数一起使用</strong><br>可以统计出某个或者某些字段在一个分组中的最大值、最小值、平均值等。</p></li><li><p><strong>GROUP BY和HAVING一起使用</strong><br>HAVING和WHERE都用于设置条件对查询结果进行过滤。</p></li></ol><p><font color=red><strong><em>WHERE语句可以进行过滤,他是分组之前进行过滤, WHERE语句中是不允许使用聚合函数的，如果想在分组之后进行过滤必须使用HAVING语句来进行, HAVING语句中是可以使用聚合函数的</em></strong></font></p><h3 id="LIMIT-限制查询"><a href="#LIMIT-限制查询" class="headerlink" title="LIMIT (限制查询)"></a>LIMIT (限制查询)</h3><p>限制查询结果的数量，语法格式:</p><pre><code class="highlight mysql">SELECT 字段名1[,字段名2,...字段n] FROM 表名LIMIT [(int)OFFSET，](int)记录数;</code></pre><p><strong>OFFSET</strong>：偏移量(从哪里开始的意思)，如果偏移量为0则从查询结果的第一条记录开始一以此类推，如果不指定默认值为0 “记录数”表示返回查询记录的条数。</p><h3 id="为表和字段取别名"><a href="#为表和字段取别名" class="headerlink" title="为表和字段取别名"></a>为表和字段取别名</h3><p>在查询数据时，可以为表和字段取别名，这个别名可以代替其指定的表和字段。</p><h4 id="表别名"><a href="#表别名" class="headerlink" title="表别名"></a>表别名</h4><p>可以为表取一个别名,用这个别名来代替表的名称。别名格式: </p><pre><code class="highlight mysql">SELECT (* | 字段) FROM 表名 别名 [...];</code></pre><p>AS:用于指定表名的别名,它可以省略不写。</p><h4 id="字段取别名"><a href="#字段取别名" class="headerlink" title="字段取别名"></a>字段取别名</h4><p>为字段取一个别名,用这个别名来代替表的名称。别名格式: </p><pre><code class="highlight mysql">SELECT (* | 字段名1 [别名][,字段名2[别名]····,字段名n[别名]]) FROM 表名 [...];</code></pre><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h2><table><thead><tr><th>函数名称</th><th>作用</th></tr></thead><tbody><tr><td>ABS(x)</td><td>返回x的绝对值</td></tr><tr><td>SQRT(x)</td><td>返回x的非负2次方根</td></tr><tr><td>MOD(x , y)</td><td>返回x被y除后的余数</td></tr><tr><td>CEILING(x)</td><td>返回不小于x的最小整数</td></tr><tr><td>FLOOR(x)</td><td>返回不大于x的最大整数</td></tr><tr><td>ROUND(x , y)</td><td>对x进行四舍五入操作，小数点后保留y位</td></tr><tr><td>TRUNCATE(x)</td><td>舍去x中小数点y位后面的的数</td></tr><tr><td>SIGN(x)</td><td>返回x的符号，-1、0或者1</td></tr></tbody></table><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><table><thead><tr><th>函数名称</th><th>作用</th></tr></thead><tbody><tr><td>LENGTH(str)</td><td>返回字符串str的长度</td></tr><tr><td>CONCAT(s1 , s2 , …..)</td><td>返回一个或者多个字符串连接产生的新的字符串</td></tr><tr><td>TRIM(str)</td><td>删除字符串两侧的空格</td></tr><tr><td>REPLACE(str , s1 , s2)</td><td>使用字符串s2替换字符串str中所有的字符串s1</td></tr><tr><td>SUBSTRING(tr , n , len)</td><td>返回字符串st的子串，起始位置为n,长度为len</td></tr><tr><td>REVERSE(str)</td><td>返回字符串反转后的结果</td></tr><tr><td>LOCATE(s1 , str)</td><td>返回子串s1在字符串str中的起始位置</td></tr></tbody></table><h2 id="日期与时间的函数"><a href="#日期与时间的函数" class="headerlink" title="日期与时间的函数"></a>日期与时间的函数</h2><table><thead><tr><th>函数名称</th><th>作用</th></tr></thead><tbody><tr><td>CURDATE()</td><td>获取系统当前日期</td></tr><tr><td>CURTIME()</td><td>获取系统当前时间</td></tr><tr><td>SYSDATE()</td><td>获取当前系统日期和时间</td></tr><tr><td>TIME_ _TO_SEC()</td><td>返回将时间转换成秒的结果</td></tr><tr><td>ADDDATE()</td><td>执行日期的加运算</td></tr><tr><td>SBUDATE()</td><td>执行日期的减运算</td></tr><tr><td>DATE_ FORMAT()</td><td>格式化输出日期和时间值</td></tr></tbody></table><h2 id="条件判断函数"><a href="#条件判断函数" class="headerlink" title="条件判断函数"></a>条件判断函数</h2><table><thead><tr><th>函数名称</th><th>作用</th></tr></thead><tbody><tr><td>IF(expr , v1 , v2)</td><td>如果expr表达式为true返回v1,否则返回v2</td></tr><tr><td>IFNULL(v1 , v2)</td><td>如果v1不为NULL返回v1,否则返回v2</td></tr><tr><td>CASE expr WHEN v1 THEN r1 [WHEN v2 THEN r2……] [ELSE m] END</td><td>如果expr值等于v1、v2等,则返回对应位置THEN后面的结果，否则返回ELSE后的结果m</td></tr></tbody></table><h2 id="加密函数"><a href="#加密函数" class="headerlink" title="加密函数"></a>加密函数</h2><table><thead><tr><th>函数名称</th><th>作用</th></tr></thead><tbody><tr><td>MD5(str)</td><td>对字符串 str 进行MD5加密</td></tr><tr><td>ENCODE(str , pwd stu)</td><td>使用pwd作为密码加密字符串str</td></tr><tr><td>DECODE(str , pwd str)</td><td>使用pwd作为密码解密字符串str</td></tr></tbody></table><h1 id="多表操作"><a href="#多表操作" class="headerlink" title="多表操作"></a>多表操作</h1><h2 id="添加外键"><a href="#添加外键" class="headerlink" title="添加外键"></a>添加外键</h2><p>外键是指<strong>引用另一个表中的一个字段或多个字段</strong>。建立、加强两个表数据之间的链接。</p><ol><li>主表是被外键引用的字段，应具有主键约束或唯一性约束</li><li>被引用是<strong>主表</strong>，引用外键的表是<strong>从表</strong>，两表是主从关系</li><li>引入外键后，从表 外键字段只能插入主表被引用字段的值必须存在，如果 从表 的外键字段引用 到主表被引用的字段，则主表被引用字段无法删除，保证数据的完整性</li></ol><p><strong>创建表时定义外键的语法结构：</strong></p><pre><code class="highlight mysql">CREATE TABLE 表名(   字段名1 数据类型 [完整性约束条件],   字段名2 数据类型 [完整性约束条件],   ·······   FOREIGN KEY (外键字段名) REFERENCES 外表表名(主键或唯一字段名));</code></pre><p><strong>创建表后定义外键的语法结构：</strong></p><pre><code class="highlight mysql">ALTER  TABLE 表名 ADD CONSTRAINT 外键名 FOREIGN KEY (外键字段名) REFERENCES 外表表名(主键或唯一字段名);[ON DELETE &#123; CASCADE | SET NULL | NO ACTION | RESTRICT &#125;][NO UPDATE &#123; CASCADE | SET NULL | NO ACTION | RESTRICT &#125;]</code></pre><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>CASCADE</td><td>删除包含与删除键值的所有记录</td></tr><tr><td>SET NULL</td><td>修改包含与已删除键值有的所有记录，使用NULL值替换(不能用于已标记为NOT NULL的字段)</td></tr><tr><td>NO ACTION</td><td>不进行任何操作中</td></tr><tr><td>RESTRICT</td><td>拒绝主表删除或修改外键关联字段。(在不定义ON DELETE和ON UPDATE子句时，这是默认设置，也是最安全的设置)</td></tr></tbody></table><p>注意事项：<br><font color=red>    1.建立外键的表必须是InnoDB型不能是临时表。因为MySQL中只有InnoDB型的表才支持外键。</font><br><font color=red>    2.定义外键名时，不能加引号。如: constraint ‘FK_ ID’ 或constraint” FK_ID “都是错误的。</font></p><h2 id="删除外键"><a href="#删除外键" class="headerlink" title="删除外键"></a>删除外键</h2><p>根据逻辑的需求，需要解除两个表之间的关联关系时，就需要删除外键约束。语法格式：</p><pre><code class="highlight mysql">ALTER TABLE 表名 DROP FOREIGN KEY 外键名;</code></pre><h2 id="关联表添加数据"><a href="#关联表添加数据" class="headerlink" title="关联表添加数据"></a>关联表添加数据</h2><h3 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h3><p>在多对一的表关系中，应将外键建在多的一方。</p><h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><p>为了实现数据表多对多的关系，需要定义一张<strong>第三方中间表</strong>，该表保存两个关系表的外键。</p><h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><p>一对一的对应关系中，<strong>需要分清主从关系</strong>，通常在从表中建立外键。</p><p><font color=red>在从表添加数据时，外键字段的值与外表引用字段的值相同且存在的前提下添加数据，否则受约束！</font> </p><h2 id="删除关联表数据"><a href="#删除关联表数据" class="headerlink" title="删除关联表数据"></a>删除关联表数据</h2><p><strong><font color=red>删除也如此，先删除从表有关联的数据，在删除主表数据</font></strong> </p><h2 id="交叉连接"><a href="#交叉连接" class="headerlink" title="交叉连接"></a>交叉连接</h2><p>交叉连接又称“笛卡尔积”，返回结果的是<strong>被连接的两个表中所有数据行的乘积</strong>。语法格式：</p><pre><code class="highlight mysql">SELECT * FROM 表1 CROSS JOIN 表2 [WHERE 条件表达式];or:SELECT * FROM 表1,表2 [WHERE 条件表达式];;</code></pre><h2 id="INNER-JOIN-内连接"><a href="#INNER-JOIN-内连接" class="headerlink" title="INNER JOIN (内连接)"></a>INNER JOIN (内连接)</h2><p>内连接(INNER JOIN)又称 简单连接 或 自然连接 ，内连接使用 比较运算符 对两个表中的数据进行比较，列出与连接条件匹配的数据行，组合成新的记录。语法格式：(INNER有无误差)</p><pre><code class="highlight mysql">SELECT &#123;* | 查询字段&#125; FROM 表1 [INNER] JOIN 表2 ON 表1.关系字段 &#x3D; 表2.关系字段 [WHERE 条件表达式];</code></pre><h2 id="OUTER-JOIN-外连接"><a href="#OUTER-JOIN-外连接" class="headerlink" title="OUTER JOIN (外连接)"></a>OUTER JOIN (外连接)</h2><p>(OUTER有无误差)</p><pre><code class="highlight mysql">SELECT &#123;* | 查询字段&#125; FROM 表1 &#123; LEFT|RIGHT&#125; [OUTER] JOIN 表2 ON 表1.关系字段 &#x3D; 表2.关系字段 [WHERE 条件表达式];</code></pre><h3 id="LEFT-JOIN-左连接"><a href="#LEFT-JOIN-左连接" class="headerlink" title="LEFT JOIN (左连接)"></a>LEFT JOIN (左连接)</h3><p>指定左表的所有记录,和所有满足连接条件的记录。如果左表的某条记录在右表中不存在,则在右表中显示为空值。</p><h3 id="RIGHT-JOIN-右连接"><a href="#RIGHT-JOIN-右连接" class="headerlink" title="RIGHT JOIN (右连接)"></a>RIGHT JOIN (右连接)</h3><p>右连接与左连接正好相反，返回右表中所有指定的记录和所有满足连接条件的记录。如果右表的某条记录在左表中没有匹配，则左表将返回空值。</p><h2 id="UNION-复合条件连接"><a href="#UNION-复合条件连接" class="headerlink" title="UNION (复合条件连接)"></a>UNION (复合条件连接)</h2><p>复合条件连接又称<strong>全外连接</strong>，就是在连接查询的过程中，通过添加过滤条件来限制查询结果，使查询结果更加精确。</p><pre><code class="highlight mysql">SELECT &#123;* | 查询字段&#125; FROM 表1 LEFT JOIN 表2 ON 表1.关系字段 &#x3D; 表2.关系字段 unionSELECT &#123;* | 查询字段&#125; FROM 表1 RIGHT JOIN 表2 ON 表1.关系字段 &#x3D; 表2.关系字段;</code></pre><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p><strong>子查询是指一个查询语句嵌套在另一个查询语句内部的查询</strong>。在执行查询语句时，首先会执行子查询中的语句，然后将返回的结果作为外层查询的过滤条件。<br><font color=red><strong>NOT：反向查询！！！</strong></font></p><h3 id="IN"><a href="#IN" class="headerlink" title="IN"></a>IN</h3><p>IN关键字进行子查询时，内层查询语句仅仅返回一个数据字段，这个数据字段中的值将供外层查询语句进行比较操作。</p><pre><code class="highlight mysql">SELECT &#123;* | 查询字段&#125; FROM 表名1 WHERE 字段 [NOT] IN(SELECT 字段 FROM 表名2 WHERE 条件表达式);</code></pre><p><font color=red>查询前提：in后面子查询返回结果要和in前的字段匹配</font></p><h3 id="EXISTS"><a href="#EXISTS" class="headerlink" title="EXISTS"></a>EXISTS</h3><p>EXISTS关键字后面的参数可以是任意一个子查询， 这个子查询的作用相当于<strong>测试</strong>，它不产生任何数据，只返回 TRUE 或 FALSE ,返回值 TRUE 时外层查询才会执行。</p><pre><code class="highlight mysql">SELECT &#123;* | 查询字段&#125; FROM 表名1 WHERE [NOT] EXISTS (SELECT 字段 FROM 表名2 WHERE 条件表达式);</code></pre><h3 id="ANY"><a href="#ANY" class="headerlink" title="ANY"></a>ANY</h3><p>ANY关键字表示满足任意一个条件 ,它允许创建一个表达式对子查询的返回值列表进行比较，只要满足内层子查询中的任意一个比较条件,就返回一个结果作为外层查询条件。</p><pre><code class="highlight MYSQL">SELECT * FROM 表名 WHERE [NOT] 字段 &#123;比较运算符&#125; ANY(SELECT 字段 FROM 表名)</code></pre><p><font color=red>查询前提：any后面子查询返回结果要和any前的字段匹配</font></p><h3 id="ALL"><a href="#ALL" class="headerlink" title="ALL"></a>ALL</h3><p>ALL关键字与ANY有点类似，只不过带ALL关键字的子查询返回的结果需同时满足<strong>所有内层查询条件</strong>。</p><pre><code class="highlight mysql">SELECT * FROM 表名 WHERE [NOT] 字段 &#123;比较运算符&#125; ALL(SELECT 字段 FROM 表名)</code></pre><p><font color=red>查询前提：all后面子查询返回结果要和all前的字段匹配</font></p><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>ANY 和 ALL 都用到比较运算符，但还可以使用其他运算符</p><pre><code class="highlight mysql">SELECT * FROM 表名 WHERE [NOT] 字段 &#123;比较运算符&#125; (SELECT 字段 FROM 表名)</code></pre><p><font color=red>查询前提：子查询返回结果要和字段匹配</font></p><h1 id="事务与存储过程"><a href="#事务与存储过程" class="headerlink" title="事务与存储过程"></a>事务与存储过程</h1><p>事务指逻辑上的一组操作，组成这组操作的各个单元，要不全部成功，要不全部不成功，<strong>同一个事务的操作具备同步优点</strong>。</p><pre><code class="highlight mysql">START TRANSACTION;·······COMMIT; ROLLBACK;</code></pre><p>START TRANSACTION：开启事务*<font color = #b3d4fc>（执行该语句后处于事务中，不会影响数据库数据）</font>*<br>COMMIT ： 事务提交*<font color = #b3d4fc>（事务生效后会立即影响数据库数据）</font>*<br>ROLLBACK：回滚事务*<font color = #b3d4fc>（取消事务，不会影响数据库数据）</font>*</p><h2 id="事务的特性（ACID）"><a href="#事务的特性（ACID）" class="headerlink" title="事务的特性（ACID）"></a>事务的特性（ACID）</h2><p><strong>原子性(Atomicity)</strong><br>指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</p><p><strong>一致性(Consistency)</strong><br>事务前后数据的完整性必须保持一致。*<font color = #b3d4fc>(数据库的完整性:如果数据库在某个时间点下，所有的数据都符合所有的约束，则称数据库为符合完整性的状态)</font>*</p><p><strong>持久性(Durability)</strong><br>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是<br>永久性的，接下来即使数据库发生故障也不应该对其有任何影响。</p><hr><p><font color=red><strong>隔离性(Isolation)</strong></font><br>事务的隔离性是指多个用户并发访问数据库时，一个用户的事务不能被其它用户的事务所干扰，多个并发事务之间数据要相互隔离。</p><p><strong>隔离安全问题</strong></p><p><strong><font size=5px>脏读：</font></strong>一个事务读取到另一个事务未提交的数据。</p><p><strong><font size=5px>不可重复读：</font></strong>一个事务多次读取同一条记录,读取的结果不相同(过程数据有更改)。*<font color = #b3d4fc>(一个事务读取到另一个事务已经提交的数据)</font>*</p><p><font size=5px>虚读(幻读)：</font>一个事务多次查询整表的数据，由于其他事务新增或删除记录造成多次查询出的记录条数不同*<font color = #b3d4fc>(一个事务读取到另一个事务已经提交的数据)</font>*</p><hr><h3 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h3><p>防止不同隔离性的问题</p><table><thead><tr><th>隔离类型</th><th>说明</th></tr></thead><tbody><tr><td>READ UNCOMMITTED</td><td>不做隔离，有脏读、不可重复读、虚读问题</td></tr><tr><td>READ COMMITTED</td><td>防脏读，不能防不可重复读、虚读问题</td></tr><tr><td>REPEATABLE READ (默认)</td><td>防脏读、不可重复读，不能防虚读问题</td></tr><tr><td>SERIALIZABLE</td><td>没问题，单线程，性能最低</td></tr></tbody></table><p>从安全性考虑：<br>$$<br>SERIALIZABLE&gt;REPEATABLE READ&gt;READ COMMITTED&gt;READ UNCOMMITTED<br>$$<br>从性能上考虑：<br>$$<br>READ UNCOMMITTED&gt;READ COMMITTED&gt;REPEATABLE READ&gt;SERIALIZABLE<br>$$<br><strong>修改当前数据库隔离级别：</strong></p><pre><code class="highlight mysql">SET [SESSION &#x2F; GLOBAL] TRANSACTION ISOLATION LEVEL 隔离类型;</code></pre><p><strong>查询当前数据库的隔离级别：</strong></p><pre><code class="highlight mysql">SELECT @@TX_ISOLATION;</code></pre><h3 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h3><h3 id="存储过程中变量的使用"><a href="#存储过程中变量的使用" class="headerlink" title="存储过程中变量的使用"></a>存储过程中变量的使用</h3><h3 id="存储过程中定义条件和处理程序"><a href="#存储过程中定义条件和处理程序" class="headerlink" title="存储过程中定义条件和处理程序"></a>存储过程中定义条件和处理程序</h3><h3 id="存储过程中光标的使用"><a href="#存储过程中光标的使用" class="headerlink" title="存储过程中光标的使用"></a>存储过程中光标的使用</h3><h3 id="存储过程中流程控制的使用"><a href="#存储过程中流程控制的使用" class="headerlink" title="存储过程中流程控制的使用"></a>存储过程中流程控制的使用</h3><h3 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h3><h3 id="查看存储过程"><a href="#查看存储过程" class="headerlink" title="查看存储过程"></a>查看存储过程</h3><h3 id="修改存储过程"><a href="#修改存储过程" class="headerlink" title="修改存储过程"></a>修改存储过程</h3><h3 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h3><p>更新中···</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据库操作&quot;&gt;&lt;a href=&quot;#数据库操作&quot; class=&quot;headerlink&quot; title=&quot;数据库操作&quot;&gt;&lt;/a&gt;数据库操作&lt;/h1&gt;&lt;h2 id=&quot;创建数据库&quot;&gt;&lt;a href=&quot;#创建数据库&quot; class=&quot;headerlink&quot; title=&quot;创建数
      
    
    </summary>
    
    
      <category term="后端" scheme="https://sanscan.top/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="笔记" scheme="https://sanscan.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="数据库" scheme="https://sanscan.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
</feed>
