<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>柏竹博客</title>
  
  <subtitle>柏竹</subtitle>
  <link href="/Sanscan12.github.io/atom.xml" rel="self"/>
  
  <link href="https://sanscan12.github.io/"/>
  <updated>2020-07-02T15:22:22.280Z</updated>
  <id>https://sanscan12.github.io/</id>
  
  <author>
    <name>Sanscan12</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java 学习笔记</title>
    <link href="https://sanscan12.github.io/posts/e780.html"/>
    <id>https://sanscan12.github.io/posts/e780.html</id>
    <published>2020-05-31T16:00:00.000Z</published>
    <updated>2020-07-02T15:22:22.280Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p><strong>字符串方法</strong></p><table><thead><tr><th>修饰符、类型</th><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>int</td><td><font color = #05ffdc>length（） </font></td><td>测长度 ，返回字符串长度</td></tr><tr><td>int</td><td><font color = #05ffdc>indxOf(String s） </font></td><td>找参数的位置，返回参数字符串在字符串首个字符索引位置</td></tr><tr><td>int</td><td><font color = #05ffdc>lastIndexOf（String s）</font></td><td>找参数最后出现的位置，返回指定参数的字符串最后一个出现的索引位置</td></tr><tr><td>char</td><td><font color = #05ffdc>charAt（int i） </font></td><td>查找索引下标，返回指定索引处的字符</td></tr><tr><td>String</td><td><font color = #05ffdc>substring（int i） </font></td><td>查找索引下标开始到结尾，返回指定位置开始到结尾的字符串</td></tr><tr><td>String</td><td><font color = #05ffdc>substring（int i , int j）</font></td><td>获取指定范围字符串，返回指定位置范围的字符串</td></tr><tr><td>String</td><td><font color = #05ffdc>trim（） </font></td><td>去除多余空格，返回字符串副本，消除多余空格的</td></tr><tr><td>String</td><td><font color = #05ffdc>replace（char str1,char str2） </font></td><td>字符串/字符替换，返回字符串副本，指定 字符 / 字符串 替换新的 字符 / 字符串</td></tr><tr><td>boolean</td><td><font color = #05ffdc>startsWith（String p）</font></td><td>匹配前缀字符串，判定字符串前缀是否匹配参数字符串</td></tr><tr><td>boolean</td><td><font color = #05ffdc>endsWith（String p） </font></td><td>匹配后缀字符串，判断字符串后缀是否匹配参数字符串</td></tr><tr><td>boolean</td><td><font color = #05ffdc>equals（String str2） </font></td><td>判断是否相同，判断字符串与参数字符串的字符和长度是否相同</td></tr><tr><td>boolean</td><td><font color = #05ffdc>equalsIgnoreCase（String str2） </font></td><td>判断是否相同，比较两个字符串的对象</td></tr><tr><td>int</td><td><font color = #05ffdc>compareTo（String o）</font></td><td>比较顺序，按字典顺序比较两个字符串，参数位置前正，后负，等于0</td></tr><tr><td>String</td><td><font color = #05ffdc>toLowerCase（） </font></td><td>转换小写，字符串全部转换为小写</td></tr><tr><td>String</td><td><font color = #05ffdc>toUpperCase（） </font></td><td>转换大写，字符串全部转换为大写</td></tr><tr><td>String[]</td><td><font color = #05ffdc>split（String sign） </font></td><td>分割字符串，指定分割符对字符串进行拆分<br />sign为分割的字符串，也可以是正则表达式</td></tr><tr><td>String[]</td><td><font color = #05ffdc>split（String sign , int i） </font></td><td>分割字符串指定数量，指定分割符对字符串进行拆分，并限制拆分数</td></tr><tr><td>Appendable</td><td><font color = #05ffdc>append（content） </font></td><td>添加数据，字符串后面追加内容，频繁操作时引用，限于StringBuilder对象的使用（16字节）<br />content可以是任何数据类型或其他对象</td></tr><tr><td></td><td><font color = #05ffdc>insert（int i , String str2） </font></td><td>插入数据，参数索引的后一位插入字符串数据</td></tr><tr><td></td><td><font color = #05ffdc>delete（int i , int j） </font></td><td>删除字符串</td></tr></tbody></table><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"I love Java  20.06.05   !!! , or not love Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str："</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        String str2 <span class="token operator">=</span> <span class="token string">"Sanscan"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str2："</span><span class="token operator">+</span>str2<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str3 <span class="token operator">=</span> <span class="token string">"192.168.0.1"</span><span class="token punctuation">;</span>        StringBuilder str4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"Sanscan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> no1 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//length() 测长度</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str.length() 测长度："</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//inexOf(String s)找字符串位置</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str.inexOf(String s)找Java字符串位置："</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//lastIndexOf(String s)找参数最后出现的位置</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str.lastIndexOf(String s)找参数最后出现的位置："</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//charAt(int i)查找索引下标</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str.charAt(int i)查找索引下标："</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//substring(int i) 查找索引下标开始到结尾</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str.ubstring(int i) 查找索引下标开始到结尾："</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//substring(int i , int j) 获取指定范围字符串</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str.substring(int i , int j)获取指定范围字符串: "</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//trim() 去除多余空格</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str.trim() 去除多余空格："</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//replace(char str1,char str2) 字符串/字符替换</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str.replace(char str1,char str2) 字符串/字符替换(javas)："</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">,</span><span class="token string">"javas"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//startsWith(String p) 匹配字符</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str.startsWith(String p) 匹配字符(java)："</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//endsWith(String p) 匹配后缀字符串</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str.endsWith(String p) 匹配后缀字符串(java): "</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//equals(String str2) 判断是否相同</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str2.equals(String str2) 判断是否相同(Sanscan) :"</span><span class="token operator">+</span>str2<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Sanscan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//equalsIgnoreCase(String str2) 判断是否相同</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str2.equalsIgnoreCase(String str2)判断是否相同(Sanscan)："</span><span class="token operator">+</span>str2<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"Sanscan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//compareTo(String o) 比较顺序</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str2.compareTo(String o)  比较顺序(sans)："</span><span class="token operator">+</span>str2<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token string">"sans"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//toLowerCase() 转换小写</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str.toLowerCase() 转换小写："</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//toUpperCase() 转换大写</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str.toUpperCase() 转换大写： "</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//split(String sign) 分割字符串</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str.split(String sign) 分割字符串192.168.0.1："</span><span class="token operator">+</span> str3<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//split(String sign ,int i) 分割字符串指定数量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str.split(String sign) 分割字符串192.168.0.1："</span><span class="token operator">+</span> str3<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\."</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//append（content）添加数据</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str4.append（content）添加数据(Java)："</span><span class="token operator">+</span>str4<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//insert（int i , String str2） 插入数据</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str4.insert（int i , String str2） 插入数据(Java)："</span><span class="token operator">+</span>str4<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//delete（int i , int j） 删除字符串</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str4.delete（int i , int j） 删除字符串："</span><span class="token operator">+</span>str4<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> no2 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代码运行了："</span><span class="token operator">+</span><span class="token punctuation">(</span>no2<span class="token operator">-</span>no1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">str：I love Java  20.06.05   !!! , or not love Javastr2：Sanscanstr.length() 测长度：46str.inexOf(String s)找Java字符串位置：7str.lastIndexOf(String s)找参数最后出现的位置：42str.charAt(int i)查找索引下标：Jstr.ubstring(int i) 查找索引下标开始到结尾：e Java  20.06.05   !!! , or not love Javastr.substring(int i , int j)获取指定范围字符串: ovestr.trim() 去除多余空格：I love Java  20.06.05   !!! , or not love Javastr.replace(char str1,char str2) 字符串/字符替换(javas)：I love javas  20.06.05   !!! , or not love javasstr.startsWith(String p) 匹配字符(java)：falsestr.endsWith(String p) 匹配后缀字符串(java): falsestr2.equals(String str2) 判断是否相同(Sanscan) :truestr2.equalsIgnoreCase(String str2)判断是否相同(Sanscan)：truestr2.compareTo(String o)  比较顺序(sans)：-32str.toLowerCase() 转换小写：i love java  20.06.05   !!! , or not love javastr.toUpperCase() 转换大写： I LOVE JAVA  20.06.05   !!! , OR NOT LOVE JAVAstr.split(String sign) 分割字符串192.168.0.1：[Ljava.lang.String;@cc34f4dstr.split(String sign) 分割字符串192.168.0.1：[Ljava.lang.String;@17a7cec2str4.append（content）添加数据(Java)：SanscanJavastr4.insert（int i , String str2） 插入数据(Java)：SaJavanscanJavastr4.delete（int i , int j） 删除字符串：SanscanJava代码运行了：5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p><strong>数组方法</strong></p><p>调用到Arrays类</p><p><font color = #05ffdc>Arrays.fill（Object[] a , int value） </font> 填充数组，参数 数组 填充 int 值，无返回</p><p><font color = #05ffdc>Arrays.fill（Object[] a , int i  , int j , int value） </font> 限定范围填充数组，限定范围 i 为开始 j 为结尾，无返回</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//调用到的包 要用Arrays类调用</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"no1:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> tmp <span class="token operator">:</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>tmp<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n no2:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> tmp <span class="token operator">:</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>tmp<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">no1:2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2  no2:2 2 8 8 8 8 2 2 2 2 2 2 2 2 2 2 2 2 2 2 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><font color = #05ffdc>Array.ssort（Object[] a） </font> 数组排序，a为数组，无返回</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//调用到的包 要用Arrays类调用</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> tmp <span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>tmp<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">23 25 54 99 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font color = #05ffdc>Arrays.copyOf（Object[] a,int i）</font> 复制数组，复制参数数组索引0开始的个数，返回数组</p><p><font color = #05ffdc>Arrays.copyOfRange（Object[] a,int i）</font> 复制数组，复制参数数组索引0开始的个数，返回数组</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//调用到的包 要用Arrays类调用</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> tmp <span class="token operator">:</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>tmp<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>arr <span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> tmp <span class="token operator">:</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>tmp<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">99 23 54 54 25 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><font color = #05ffdc>Arrays.binarySearch（Object[] a , Object key） </font> 数组查询，查询参数数组中的 key值 ，返回查找值的索引位置</p><p><font color = #05ffdc>Arrays.binarySearch（Object[] a , int i , int j , Object key） </font> 数组查询，查询参数数组中的 key值 , 限定范围 i 为开始 j 为结尾，返回查找值的索引位置</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//调用到的包 要用Arrays类调用</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排列后的位置为（99）："</span><span class="token operator">+</span>Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"索引范围1 - 2 排列后的位置为（25）："</span><span class="token operator">+</span>Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">排列后的位置为（99）：3索引范围1 - 2 排列后的位置为（25）：1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><h2 id="面向对象概述"><a href="#面向对象概述" class="headerlink" title="面向对象概述"></a>面向对象概述</h2><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>对象 就是通过java类所产生的实体<br>如：动物百科的记载中有兔子类（java封装的类），根据百科中所呈现出来且真实存在的 实体 被为对象，相当于得到了兔子的 对象</p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>类 是封装 对象 的 行为 和 属性 的载体。反过来，具有 相同属性 和 行为 的一类实体被称为类<br>如：兔子类（所有物种的兔子）封装有兔子的 共同属性 和 行为</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>封装是将类的某些信息隐藏在类的内部，不许外部直接访问<br>通过类提供的方法实现对 隐藏信息 的 访问 和 操作<br>如：QQ聊天的界面，聊天的内容位置是已经提供方法，可 访问 和 操作 的，可避免其他操作影响的不良后果</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承 是类与类之间同样具有关系，则为两类的关联<br>如：学生类 与 教师类 关联关系</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>多态 是父类对象应用于子类的特征</p><h2 id="类-1"><a href="#类-1" class="headerlink" title="类"></a>类</h2><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><p>成员变量是java类中的属性</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">tuzi</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String eat<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//吃</span>        String hair<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//毛</span>        String jump<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//跳</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h3><p>成员方法是java中的行为</p><pre class="line-numbers language-java"><code class="language-java">权限修饰符 返回值类型 方法名<span class="token punctuation">(</span>参数类型 参数名<span class="token punctuation">[</span><span class="token punctuation">,</span>···<span class="token punctuation">)</span><span class="token punctuation">{</span>    ····        <span class="token comment" spellcheck="true">//方法体</span>    <span class="token keyword">return</span> 返回的值<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//例子</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果方法返回类型为void（空），则无返回（retrun）</p></blockquote><h3 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h3><p>权限修饰符控制 类 、类的成员变量 、成员方法 的访问</p><table><thead><tr><th>类修饰符</th><th>本类</th><th>同包其他类 / 子类</th><th>其他包的类 / 子类</th></tr></thead><tbody><tr><td>private</td><td>可见</td><td>不可见</td><td>不可见</td></tr><tr><td>protected</td><td>可见</td><td>可见</td><td>不可见</td></tr><tr><td>public</td><td>可见</td><td>可见</td><td>可见</td></tr></tbody></table><blockquote><p>当声明类时不使用修饰符设置权限 ，则这个类预设为包存取范围，前提是只有一个包中的类可以调用类的成员方法 、成员变量</p></blockquote><p>使用默认修饰符的例子</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//AnyClass类为默认访问权限</span><span class="token keyword">class</span> <span class="token class-name">AnyClass</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//doString()方法访问权限为public</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ····    <span class="token comment" spellcheck="true">//方法体</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>成员方法内定义的变量，则该变量是局部变量</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">jububianliang</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token keyword">private</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//成员方法。max变量限于该方法的范围</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//局部变量max</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>            max <span class="token operator">=</span> a<span class="token punctuation">;</span>            <span class="token keyword">return</span> max<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            max <span class="token operator">=</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>方法内的局部变量，外部是无法调用方法内的局部变量，因外部并没有声明变量</p></blockquote><h3 id="this关键子"><a href="#this关键子" class="headerlink" title="this关键子"></a>this关键子</h3><p>this关键字用于引用对象的成员变量和方法 ，将方法的参数值赋予类本身的成员变量</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">thsiches</span> <span class="token punctuation">{</span>    String  str <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">no1</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//打印 str形参</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"no1："</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//打印 thsiches类 中的str成员变量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"no2："</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String str2 <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">thsiches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">no1</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类的构造方法"><a href="#类的构造方法" class="headerlink" title="类的构造方法"></a>类的构造方法</h2><p>构造方法是创建对象过程中运行的方法，也是初始化方法，与类同名，对象创建是通过构造方法完成的</p><blockquote><p>构造方法</p><ul><li>没有返回值，也不需void（空）修饰</li><li>名称要与本类的名称相同</li><li>没有定义构造方法，编译器会自动创建无参数构造方法</li><li>实例化对象，类都会自动调用构造方法</li><li>在无参调用 this 有参构造方法，则该语句必须为第一个</li><li>实例化对象是有参构造方法，参数类型必须对应相应的值，否则会报错</li></ul></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//实例化对象</span>    no1 a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">no1</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//实例化对象</span>    no1 b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">no1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//无参构造方法</span><span class="token keyword">public</span> <span class="token function">no1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//使用this调用有参构造方法</span>    <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">"this 调用1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无参构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//有参构造方法</span><span class="token keyword">public</span> <span class="token function">no1</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">no1</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this 调用2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">1this 调用21232this 调用2this 调用1无参构造方法3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="私有构造方法"><a href="#私有构造方法" class="headerlink" title="私有构造方法"></a>私有构造方法</h2><p><strong>书本类</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token function">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ···    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//静态公开方法，图书馆借书</span>    <span class="token keyword">static</span> <span class="token keyword">public</span> Book <span class="token function">libraryBorrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>借书人类</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mytext</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> viod <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建一个书的对象，不是new实例化的，而是通过方法从图书馆借来的</span>        Book book <span class="token operator">=</span> Book<span class="token punctuation">.</span><span class="token function">libaryBorrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//错误方法    Book book = new Book();</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="static-静态"><a href="#static-静态" class="headerlink" title="static 静态"></a>static 静态</h2><p>静态修饰的代码，整个程序运行结束之后才会释放</p><p>静态区的数据是共享的，其他类调用本类的静态方法和静态变量时，无需实例化调用</p><pre class="line-numbers language-text"><code class="language-text">类名.静态类成员<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h3><p>静态变量的共享，在不同类对同一变量可以进行操作</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">no1</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//静态变量</span>    <span class="token keyword">static</span> <span class="token keyword">public</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">>=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            i <span class="token operator">-=</span><span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        i<span class="token operator">+=</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        no1 out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">no1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        no1 in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">no1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        in<span class="token punctuation">.</span><span class="token function">inlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"in："</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"out："</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"out："</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        no11 n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">no11</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//外部类调用静态变量</span><span class="token keyword">class</span> <span class="token class-name">no11</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">no11</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用no1类的方法</span>        <span class="token keyword">new</span> <span class="token class-name">no1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"no11(in) :  "</span><span class="token operator">+</span>no1<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text"> 0in：4out：1out：0no11(in) :  4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>同一个类的不同实例对象， 共用同一静态变量，如果一个对象将其更改，另一个对象的静态变量也会更改</p></blockquote><h3 id="静态常量"><a href="#静态常量" class="headerlink" title="静态常量"></a>静态常量</h3><p>静态常量用 final static 修饰成员变量 </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">no2</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//静态常量</span>    <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">double</span> P <span class="token operator">=</span> <span class="token number">3.1415</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Circular c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circular</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//计算圆类</span><span class="token keyword">class</span> <span class="token class-name">Circular</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> r<span class="token punctuation">;</span>    <span class="token keyword">double</span> a<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Circular</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span> r<span class="token punctuation">;</span>        a <span class="token operator">=</span> no2<span class="token punctuation">.</span>P <span class="token operator">*</span> r <span class="token operator">*</span> r<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"圆半径r为："</span><span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"圆面积a为: "</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">圆半径r为：2.0圆面积a为: 12.566<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>静态方法无需创建类的对象</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">no3</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//静态方法</span>    <span class="token keyword">static</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"以调用静态方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        no3<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>在静态方法中不可以使用 this关键字</li><li>在静态方法中不可以直接调用非静态方法</li></ul></blockquote><h2 id="类的主方法"><a href="#类的主方法" class="headerlink" title="类的主方法"></a>类的主方法</h2><p>主方法是类的入口点，也是程序运行的开始</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ul><li>主方法是静态的，主方法调用其他方法也必须是静态</li><li>主方法无返回值</li><li>主方法的形参为数组，args数组代表里面的参数个数，也可用args.length 获取参数个数</li></ul></blockquote><h2 id="对象-1"><a href="#对象-1" class="headerlink" title="对象"></a>对象</h2><h3 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h3><pre class="line-numbers language-java"><code class="language-java">Text text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Text text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>Text：类名<br>text：创建Text类引用对象<br>new：创建对象操作符<br>“ a ”：构造方法的参数</p></blockquote><h3 id="对象属性与行为"><a href="#对象属性与行为" class="headerlink" title="对象属性与行为"></a>对象属性与行为</h3><p>使用new操作符创建对象后，可以使用 <code>对象.类成员</code> 获取对象的 属性 或 行为 </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">no1</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用no1类的max方法(no1.max)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"max = a"</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"max = b"</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//对象的创建</span>        no1 t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">no1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        no1 t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">no1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取对象的属性（变量）</span>        t2<span class="token punctuation">.</span>i <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t2对象i："</span><span class="token operator">+</span>t2<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t1对象i："</span><span class="token operator">+</span>t1<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t1对象i："</span><span class="token operator">+</span>t1<span class="token punctuation">.</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用t1对象max方法</span>        t1<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用t2对象max方法</span>        t2<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">t2对象i：60t1对象i：50t1对象i：50调用no1类的max方法(no1.max)max = b23调用no1类的max方法(no1.max)max = b33<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对象引用"><a href="#对象引用" class="headerlink" title="对象引用"></a>对象引用</h3><pre class="line-numbers language-java"><code class="language-java">Text t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Text：类<br>t：引用<br>new Book（）：对象</p></blockquote><h2 id="扫描器"><a href="#扫描器" class="headerlink" title="扫描器"></a>扫描器</h2><p>扫描器用来获取用户输入的内容</p><p>使用方式</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//实例化</span>Sanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取变量调用的方法</span><span class="token keyword">double</span> d <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>···<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="时间记录"><a href="#时间记录" class="headerlink" title="时间记录"></a>时间记录</h2><p>记录开始运行到运行以下代码的时间段</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">long</span> i <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h1><h2 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h2><p><strong>Integer构造方法</strong></p><ol><li>new Integer（int number）</li><li>new Integer（String str）</li></ol><p>以上有两种方式获取 Integer对象</p><p><strong>Integer常量</strong></p><p><font color = #05ffdc>Integer.MAX_VALUE </font> 返回int型的最大值</p><p><font color = #05ffdc>Integer.MIN_VALUE  </font> 返回int型的最小值</p><p><font color = #05ffdc>Integer.SIZE </font> 用二进制补码形式表示 int位数</p><p><font color = #05ffdc>Integer.TYPE </font> 基本类型int</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"int最大值（max）："</span><span class="token operator">+</span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"int最小值（min）："</span><span class="token operator">+</span>Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"max："</span><span class="token operator">+</span>Integer<span class="token punctuation">.</span>SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"max："</span><span class="token operator">+</span>Integer<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">int最大值（max）：2147483647int最小值（min）：-2147483648max：32max：int<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Integer方法</strong></p><p><font color = #05ffdc>Integer.byteValue（） </font> 以 byte类型 返回</p><p><font color = #05ffdc>Integer.compareTo（Integer i） </font> 比较是否相同，两值相同则返回 0，对象小于 参数i 返回负值，否则为正值</p><p><font color = #05ffdc>Integer.intValue（） </font> 以 int类型 返回</p><p><font color = #05ffdc>Integer.shortValue（） </font> 以 short类型 返回</p><p><font color = #05ffdc>Integer.toString（） </font> 返回 Integer值 的 String对象，返回String</p><p><font color = #05ffdc>Integer.valueOf（String str） </font> 返回保存参数的 Integer对象</p><p><font color = #05ffdc>Integer.parseInt（String str） </font> 返回参数中的数值</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">no1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Integer n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"byteValue（） 以 byte类型 返回(12)："</span><span class="token operator">+</span>n<span class="token punctuation">.</span><span class="token function">byteValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"compareTo（Integer i）比较是否相同(12 v 10)："</span><span class="token operator">+</span>n<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"intValue（）以 int类型 返回："</span><span class="token operator">+</span>n<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"shortValue（）以 short类型 返回："</span><span class="token operator">+</span>n<span class="token punctuation">.</span><span class="token function">shortValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toString（）返回 Integer值 的 String对象："</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"valueOf（String str） 返回保存参数的 Integer对象((String)123) : "</span><span class="token operator">+</span>n<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"parseInt（String str） 返回参数中的数值((String)123)："</span><span class="token operator">+</span>n<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">byteValue（） 以 byte类型 返回(12)：12compareTo（Integer i）比较是否相同(12 v 10)：1intValue（）以 int类型 返回：12shortValue（）以 short类型 返回：12toString（）返回 Integer值 的 String对象：123valueOf（String str） 返回保存参数的 Integer对象((String)123) : 123parseInt（String str） 返回参数中的数值((String)123)：123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h2><p><strong>Boolean构造方法</strong></p><ol><li>new Boolean（boolean value）</li><li>new Boolean（String str）</li></ol><p>以上有两种方式获取 Boolean对象 </p><p><strong>Boolean常量</strong></p><p><font color = #05ffdc>Boolean.TRUE </font> 对应基于true的 Boolean对象</p><p><font color = #05ffdc>Boolean.FALSE</font> 对应基于false的 Boolean对象</p><p><font color = #05ffdc>Boolean.TYPE </font> 基本类型Boolean</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Boolean.TRUE："</span><span class="token operator">+</span>Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Boolean.FALSE："</span><span class="token operator">+</span>Boolean<span class="token punctuation">.</span>FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Boolean.TYPE："</span><span class="token operator">+</span>Boolean<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-text"><code class="language-text">Boolean.TRUE：trueBoolean.FALSE：falseBoolean.TYPE：boolean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Boolean方法</strong></p><p><font color = #05ffdc>Boolean.BooleanValue（） </font> 将Boolean对象的值对应返回 Boolean值 </p><p><font color = #05ffdc>Boolean.equsla（Object obj） </font> 对象相同返回true，否则false</p><p><font color = #05ffdc>Boolean.parseBoolean（String s） </font> 参数字符串解析为 Boolean值</p><p><font color = #05ffdc>Boolean.toString() </font> 返回boolean值的String对象，返回String</p><p><font color = #05ffdc>Boolean.valueOf（String s） </font> 返回参数Boolean值</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Boolean b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//默认false</span>    Boolean b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BooleanValue(b1) : "</span><span class="token operator">+</span>b1<span class="token punctuation">.</span><span class="token function">booleanValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BooleanValue(b2) : "</span><span class="token operator">+</span>b2<span class="token punctuation">.</span><span class="token function">booleanValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b1.equsla(b2)："</span><span class="token operator">+</span>b1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"valueOf（b1）："</span><span class="token operator">+</span>Boolean<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"valueOf（b2）："</span><span class="token operator">+</span>Boolean<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//String.valueOf(b1)：把b1引用的对象字符串化</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"parseBoolean（b1）："</span><span class="token operator">+</span>Boolean<span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//String.valueOf(b1)：把b2引用的对象字符串化</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"parseBoolean（b2）："</span><span class="token operator">+</span>Boolean<span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">BooleanValue(b1) : trueBooleanValue(b2) : falseb1.equsla(b2)：falsevalueOf（String s）：truevalueOf（String s）：falseparseBoolean（String s）：trueparseBoolean（String s）：false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Byte"><a href="#Byte" class="headerlink" title="Byte"></a>Byte</h2><p><strong>Byte构造方法</strong></p><ol><li>new Byte（byte value）</li><li>new Byte（String str）</li></ol><p>以上有两种方式获取 Byte对象 </p><p><strong>Byte常量</strong></p><p><font color = #05ffdc>Byte.MAX_VALUE </font> 返回byte型的最大值</p><p><font color = #05ffdc>Byte.MIN_VALUE  </font> 返回byte型的最小值</p><p><font color = #05ffdc>Byte.SIZE </font> 用二进制补码形式表示 byte位数</p><p><font color = #05ffdc>Byte.TYPE </font> 基本类型byte</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Byte.MAX："</span><span class="token operator">+</span>Byte<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Byte.MIN："</span><span class="token operator">+</span>Byte<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Byte.SIZE："</span><span class="token operator">+</span>Byte<span class="token punctuation">.</span>SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Byte.TYPE："</span><span class="token operator">+</span>Byte<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">Byte.MAX：127Byte.MIN：-128Byte.SIZE：8Byte.TYPE：byte<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Byte方法</strong></p><p><font color = #05ffdc>Byte.parseByte（String str） </font> 参数String以byte值返回</p><p><font color = #05ffdc>Byte.valueOf（String str） </font> 参数String以byte对象返回</p><p><font color = #05ffdc>Byte.equals（Object obj） </font> 两个Byte对象判断是否相同</p><p><font color = #05ffdc>Byte.byteValue（） </font> 返回此对象的byte值</p><p><font color = #05ffdc>Byte.intValue（） </font>  返回此对象的int值</p><p><font color = #05ffdc>Byte.doubleValue（） </font>  返回此对象的double值</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        Byte be = new Byte(12);  过时了</span><span class="token comment" spellcheck="true">//        实例化对象的例子需要调用valueOf方法</span>        Byte b <span class="token operator">=</span> Byte<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        或者</span>        Byte b2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token number">12</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"parseByte（String str）参数String以byte值返回："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">parseByte</span><span class="token punctuation">(</span><span class="token string">"23"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"valueOf（String str）参数String以byte对象返回："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"22"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"equals（Object obj）两个Byte对象判断是否相同："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"byteValue（） 返回此对象的byte值："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">byteValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"intValue（）返回此对象的int值："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doubleValue（） 返回此对象的double值："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">parseByte（String str）参数String以byte值返回：23valueOf（String str）参数String以byte对象返回：22equals（Object obj）两个Byte对象判断是否相同：truebyteValue（） 返回此对象的byte值：12intValue（）返回此对象的int值：12doubleValue（） 返回此对象的double值：12.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Character"><a href="#Character" class="headerlink" title="Character"></a>Character</h2><p><strong>Character构造方法</strong></p><pre class="line-numbers language-java"><code class="language-java">Character（<span class="token keyword">char</span> value）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Character常量</strong></p><p><font color = #05ffdc>Character.CONNECTOR_PUNCTUATION </font> 返回byte型值，表示Unicode的常规类别 Pc</p><p><font color = #05ffdc>Character.UNASSIGNED </font> 返回byte型值，表示Unicode的常规类别 Cn</p><p><font color = #05ffdc>Character.TITLECASE_LETTER </font> 返回byte型值，表示Unicode的常规类别 Lt</p><p><strong>Character方法</strong></p><p><font color = #05ffdc>Character.compareTo（Charcter char）</font> 比较两个对象是否相同，相同则0</p><p><font color = #05ffdc>Character.equals（Object obj） </font> 比较两对象的值，返回boolean值</p><p><font color = #05ffdc>Character.toUpperCase（char ch） </font> 参数字母转化为大写doubleValue（） </p><p><font color = #05ffdc>Character.toLowerCase（char ch） </font> 参数字母转化为小写</p><p><font color = #05ffdc>Character.toString（） </font> 返回指定的char值的String对象</p><p><font color = #05ffdc>Character.charValue（） </font> 返回Character对象的值</p><p><font color = #05ffdc>Character.isUpperCase（char ch） </font> 判断参数字符是否是大写</p><p><font color = #05ffdc>Character.isLowerCase（char ch） </font> 判断参数字符是否是小写</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Character ch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Character</span><span class="token punctuation">(</span><span class="token string">'S'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Character ch2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Character</span><span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"compareTo（Charcter char）比较两个对象是否相同，相同则0："</span><span class="token operator">+</span>ch<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>ch2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"equals（Object obj）比较两对象的值，返回boolean值："</span><span class="token operator">+</span>ch<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ch2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toUpperCase（char ch）参数字母转化为大写："</span><span class="token operator">+</span>Character<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toLowerCase（char ch）参数字母转化为小写："</span><span class="token operator">+</span>Character<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toString（）返回指定的char值的String对象："</span><span class="token operator">+</span>ch<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"charValue（） 返回Character对象的值："</span><span class="token operator">+</span>ch<span class="token punctuation">.</span><span class="token function">charValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"isUpperCase（char ch） 判断参数字符是否是大写(S)："</span><span class="token operator">+</span>Character<span class="token punctuation">.</span><span class="token function">isUpperCase</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"isUpperCase（char ch） 判断参数字符是否是大写(s)："</span><span class="token operator">+</span>Character<span class="token punctuation">.</span><span class="token function">isUpperCase</span><span class="token punctuation">(</span>ch2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"isLowerCase（char ch） 判断参数字符是否是小写(S)："</span><span class="token operator">+</span>Character<span class="token punctuation">.</span><span class="token function">isLowerCase</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"isLowerCase（char ch） 判断参数字符是否是小写(s)："</span><span class="token operator">+</span>Character<span class="token punctuation">.</span><span class="token function">isLowerCase</span><span class="token punctuation">(</span>ch2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">compareTo（Charcter char）比较两个对象是否相同，相同则0：-32equals（Object obj）比较两对象的值，返回boolean值：falsetoUpperCase（char ch）参数字母转化为大写：StoLowerCase（char ch）参数字母转化为小写：stoString（）返回指定的char值的String对象：ScharValue（） 返回Character对象的值：SisUpperCase（char ch） 判断参数字符是否是大写(S)：trueisUpperCase（char ch） 判断参数字符是否是大写(s)：falseisLowerCase（char ch） 判断参数字符是否是小写(S)：falseisLowerCase（char ch） 判断参数字符是否是小写(s)：true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Double"><a href="#Double" class="headerlink" title="Double"></a>Double</h2><p><strong>Double构造方法</strong></p><ol><li>new Double（double value）</li><li>new Double（String str）</li></ol><p>以上有两种方式获取 Double对象 </p><p><strong>Double常量</strong></p><p><font color = #05ffdc>Double.MAX_EXPONENT</font> 返回int值，double最大指数</p><p><font color = #05ffdc>Double.MIN_EXPONENT </font> 返回int值，double最小指数</p><p><font color = #05ffdc>Double.TYPE </font> 基本类型double</p><p><font color = #05ffdc>Double.SIZE </font> 用二进制补码形式表示 double位数</p><p><font color = #05ffdc>Double.NEGATIVE_INFINITY </font> 返回double值，保存double类型的负穷大值</p><p><font color = #05ffdc>Double.POSITIVE_INFINITY </font> 返回double值，返回double类型的正无穷大值</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Double.MAX："</span><span class="token operator">+</span>Double<span class="token punctuation">.</span>MAX_EXPONENT<span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Double.NIN："</span><span class="token operator">+</span>Double<span class="token punctuation">.</span>MIN_EXPONENT<span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Double.SIZE："</span><span class="token operator">+</span>Double<span class="token punctuation">.</span>SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Double.TYPE："</span><span class="token operator">+</span>Double<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">Double.MAX：1023Double.NIN：-1022Double.SIZE：64Double.TYPE：double<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Double方法</strong></p><p><font color = #05ffdc>Double.byteValue（） </font> 以byte形式返回Double对象值</p><p><font color = #05ffdc>Double.compareTo（Double d） </font> 两Double对象进行数值比较，相同则0</p><p><font color = #05ffdc>Double.equals（Object obj） </font> 比较两对象是否相同，返回boolean</p><p><font color = #05ffdc>Double.intValue（） </font> 以int形式返回double值</p><p><font color = #05ffdc>Double.isNaN（） </font> 非数字值，则返回true，否则false</p><p><font color = #05ffdc>String.toString（） </font> 返回Double对象的字符串形式</p><p><font color = #05ffdc>Double.valueOf（String str） </font> 返回保存参数的double值的对象</p><p><font color = #05ffdc>Double.doubleValue（） </font> 以double形式返回Double对象</p><p><font color = #05ffdc>Double.longValue（） </font> 以long形式返回double值</p><p><font color = #05ffdc>Double.parseDouble（String str） </font>返回参数中的数值</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Double d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">11.22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Double d2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Double d3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">11.22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"byteValue（） 以byte形式返回Double对象值："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">byteValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"compareTo（Double d） 两Double对象进行数值比较，相同则0(d2)："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"compareTo（Double d） 两Double对象进行数值比较，相同则0(d3)："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>d3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"equals（Object obj）比较两对象是否相同，返回boolean(d2)："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"equals（Object obj）比较两对象是否相同，返回boolean(d3)："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>d3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"intValue（）以int形式返回double值："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"isNaN（）非数字值，则返回true，否则false(d2)："</span><span class="token operator">+</span>d2<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toString（）返回Double对象的字符串形式："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"valueOf（String str）返回保存参数的double值的对象："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"22.33"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doubleValue（）以double形式返回Double对象："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"longValue（） 以long形式返回double值："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"parseDouble（String str）返回参数中的数值："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span><span class="token string">"33.2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">byteValue（） 以byte形式返回Double对象值：11compareTo（Double d） 两Double对象进行数值比较，相同则0(d2)：-1compareTo（Double d） 两Double对象进行数值比较，相同则0(d3)：0equals（Object obj）比较两对象是否相同，返回boolean(d2)：falseequals（Object obj）比较两对象是否相同，返回boolean(d3)：trueintValue（）以int形式返回double值：11isNaN（）非数字值，则返回true，否则false(d2)：falsetoString（）返回Double对象的字符串形式：11.22valueOf（String str）返回保存参数的double值的对象：22.33doubleValue（）以double形式返回Double对象：11.22longValue（） 以long形式返回double值：11parseDouble（String str）返回参数中的数值：33.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><p>Number数值类是byte、Integer、long、float、Double、··· 的父类，Number的方法子类都可以用！！</p><p><strong>Number方法</strong></p><table><thead><tr><th>方法</th><th>返回值</th><th>说明</th></tr></thead><tbody><tr><td><font color = #05ffdc>byteValue（） </font></td><td>byte</td><td>以byte形式返回数值</td></tr><tr><td><font color = #05ffdc>intValue（） </font></td><td>int</td><td>以int形式返回数值</td></tr><tr><td><font color = #05ffdc>floatValue（） </font></td><td>float</td><td>以float形式返回数值</td></tr><tr><td><font color = #05ffdc>shortValue（） </font></td><td>short</td><td>以short形式返回数值</td></tr><tr><td><font color = #05ffdc>longValue（） </font></td><td>long</td><td>以long形式返回数值</td></tr><tr><td><font color = #05ffdc>doubleValue（） </font></td><td>double</td><td>以double形式返回数值</td></tr></tbody></table><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     Number num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">23000.23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"以byte形式返回数值："</span><span class="token operator">+</span>num<span class="token punctuation">.</span><span class="token function">byteValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"以int形式返回数值："</span><span class="token operator">+</span>num<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"以float形式返回数值："</span><span class="token operator">+</span>num<span class="token punctuation">.</span><span class="token function">floatValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"以short形式返回数值："</span><span class="token operator">+</span>num<span class="token punctuation">.</span><span class="token function">shortValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"以long形式返回数值："</span><span class="token operator">+</span>num<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"以double形式返回数值："</span><span class="token operator">+</span>num<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">以byte形式返回数值：-40以int形式返回数值：23000以float形式返回数值：23000.23以short形式返回数值：23000以long形式返回数值：23000以double形式返回数值：23000.23<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="数字处理类"><a href="#数字处理类" class="headerlink" title="数字处理类"></a>数字处理类</h1><h2 id="数字格式化"><a href="#数字格式化" class="headerlink" title="数字格式化"></a>数字格式化</h2><p>数字格式化是用模板控制内容数字类型，用到DecimalFormat类进行格式化</p><p>DecimalFormat类有特殊字符 构成的格式化模板，是数字会按照特殊字符规则进行匹配</p><p>DecimalFormat类中特殊字符的说明</p><table><thead><tr><th>字符</th><th>说明</th></tr></thead><tbody><tr><td>0</td><td>一个数字，不存在则显示0</td></tr><tr><td>#</td><td>一个数字，存在则显示，否则不显示</td></tr><tr><td>.</td><td>小数分隔符或货币小数分隔符</td></tr><tr><td>-</td><td>符号</td></tr><tr><td>,</td><td>分组分隔符</td></tr><tr><td>E</td><td>分隔科学计数法中的尾数和指数</td></tr><tr><td>%</td><td>存在数字的前缀或后缀，乘100显示百分数</td></tr><tr><td>\u2030</td><td>存在数字的前缀或后缀，乘1000显示千分数</td></tr><tr><td>\u00A4</td><td>存在数字的前缀或后缀，显示货币记号</td></tr><tr><td>‘</td><td>视为普通单引号处理</td></tr></tbody></table><p><strong>DecimalFormat类方法</strong></p><p><font color = #05ffdc>DecimalFormat.applyPattern（String patten） </font> 设置数字格式化模板</p><p><font color = #05ffdc>DecimalFormat.format（value） </font> 转换模板样式</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>DecimalFormat<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//有DecimalFormat包的调用</span><span class="token keyword">static</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Sformat</span><span class="token punctuation">(</span>String patten<span class="token punctuation">,</span> <span class="token keyword">double</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//pattem：模板，value：数值</span>        <span class="token comment" spellcheck="true">//实例化对象</span>        DecimalFormat n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span>patten<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//进行格式化的方法 format(double value)</span>        String out <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"模板："</span><span class="token operator">+</span>patten<span class="token operator">+</span><span class="token string">"，数值 "</span><span class="token operator">+</span>value<span class="token operator">+</span><span class="token string">"\n结果："</span><span class="token operator">+</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Sformat2</span><span class="token punctuation">(</span>String patten<span class="token punctuation">,</span> <span class="token keyword">double</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//pattem：模板，value：数值</span>        <span class="token comment" spellcheck="true">//实例化对象</span>        DecimalFormat n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span>patten<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置格式化模板</span>        n<span class="token punctuation">.</span><span class="token function">applyPattern</span><span class="token punctuation">(</span>patten<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"模板："</span><span class="token operator">+</span>patten<span class="token operator">+</span><span class="token string">"，数值 "</span><span class="token operator">+</span>value<span class="token operator">+</span><span class="token string">"\n结果："</span><span class="token operator">+</span>n<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//静态调用方法，无需实例化</span>        <span class="token function">Sformat</span><span class="token punctuation">(</span><span class="token string">"###,###,###"</span><span class="token punctuation">,</span><span class="token number">12345.6789</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Sformat</span><span class="token punctuation">(</span><span class="token string">"00000000.###kg"</span><span class="token punctuation">,</span><span class="token number">12345.6789</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Sformat</span><span class="token punctuation">(</span><span class="token string">"000000.000"</span><span class="token punctuation">,</span><span class="token number">123.45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Sformat2</span><span class="token punctuation">(</span><span class="token string">"#.###%"</span><span class="token punctuation">,</span><span class="token number">0.789</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Sformat2</span><span class="token punctuation">(</span><span class="token string">"###.##"</span><span class="token punctuation">,</span><span class="token number">123456.789</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Sformat2</span><span class="token punctuation">(</span><span class="token string">"0.00\u2030"</span><span class="token punctuation">,</span><span class="token number">0.789</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">模板：###,###,###，数值 12345.6789结果：12,346模板：00000000.###kg，数值 12345.6789结果：00012345.679kg模板：000000.000，数值 123.45结果：000123.450------------模板：#.###%，数值 0.789结果：78.9%模板：###.##，数值 123456.789结果：123456.79模板：0.00‰，数值 0.789结果：789.00‰<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数字运算"><a href="#数字运算" class="headerlink" title="数字运算"></a>数字运算</h2><p><strong>Math类</strong></p><p>Math类提供了数学函数方法</p><blockquote><ul><li>不用调用包</li><li>都是静态方法</li></ul></blockquote><p><strong>常用数学运算方法</strong></p><h3 id="三角函数方法"><a href="#三角函数方法" class="headerlink" title="三角函数方法"></a>三角函数方法</h3><p><font color = #05ffdc>Math.sin（double a） </font> 返回三角正弦</p><p><font color = #05ffdc>Math.cos（double a） </font> 返回三角余弦</p><p><font color = #05ffdc>Math.tan（double a） </font> 返回三角正切</p><p><font color = #05ffdc>Math.asin（double a） </font> 返回一个反正弦</p><p><font color = #05ffdc>Math.acos（double a） </font> 返回一个反余弦</p><p><font color = #05ffdc>Math.atan（double a） </font> 返回一个反正切</p><p><font color = #05ffdc>Math.toRadians（double a） </font> 角度转换为弧度</p><p><font color = #05ffdc>Math.toDegrees（double a） </font> 弧度转换为角度</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"PI："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.sin（double a） 返回三角正弦(90)："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>PI<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.cos（double a） 返回三角余弦："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.tan（double a） 返回三角正切："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">tan</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>PI<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取2点平方根与2商的反正弦</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.asin（double a） 返回一个反正弦："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">asin</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取2点平方根与2商的反余弦</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.acos（double a） 返回一个反余弦："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">acos</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.atan（double a） 返回一个反正切："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">atan</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.toRadians（double a） 角度转换为弧度："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">toRadians</span><span class="token punctuation">(</span><span class="token number">120.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.toDegrees（double a） 弧度转换为角度："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">toDegrees</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>PI<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">PI：3.141592653589793Math.sin（double a） 返回三角正弦(90)：1.0Math.cos（double a） 返回三角余弦：1.0Math.tan（double a） 返回三角正切：1.7320508075688767Math.asin（double a） 返回一个反正弦：0.7853981633974484Math.acos（double a） 返回一个反余弦：0.7853981633974483Math.atan（double a） 返回一个反正切：0.7853981633974483Math.toRadians（double a） 角度转换为弧度：2.0943951023931953Math.toDegrees（double a） 弧度转换为角度：90.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="指数函数方法"><a href="#指数函数方法" class="headerlink" title="指数函数方法"></a>指数函数方法</h3><p><font color = #05ffdc>Math.exp（double a） </font> 获取e的a次方</p><p><font color = #05ffdc>Math.log（double a） </font> 取自然对数，即取lna的值</p><p><font color = #05ffdc>Math.log10（double a） </font> 取底数为10的对数</p><p><font color = #05ffdc>Math.sqrt（double a） </font> 取a的平方根，a不能为负数</p><p><font color = #05ffdc>Math.cbrt（double a） </font> 取a的立方根</p><p><font color = #05ffdc>Math.pow（double a,double b） </font> 取a的b次方</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.exp（double a）  获取e的a次方："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.log（double a）  取自然对数，即取lna的值："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.log10（double a）取底数为10的对数："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">log10</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.sqrt（double a）  取a的平方根，a不能为负数："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.cbrt（double a）  取a的立方根："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">cbrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.pow（double a）  取a的b次方："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">Math.exp（double a）  获取e的a次方：7.38905609893065Math.log（double a）  取自然对数，即取lna的值：0.6931471805599453Math.log10（double a）取底数为10的对数：0.3010299956639812Math.sqrt（double a）  取a的平方根，a不能为负数：1.4142135623730951Math.cbrt（double a）  取a的立方根：1.2599210498948732Math.pow（double a）  取a的b次方：8.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="取整函数方法"><a href="#取整函数方法" class="headerlink" title="取整函数方法"></a>取整函数方法</h3><p><font color = #05ffdc> </font> <font color = #05ffdc>Math.ceil（double a） </font> 返回大于等于参数的最小整数</p><p> <font color = #05ffdc>Math.floor（double a） </font> 返回小于等于参数的最大整数</p><p> <font color = #05ffdc>Math.rint（double a） </font> 返回与参数接近的整数，如果两整数一样，则取偶数</p><p> <font color = #05ffdc>Math.round（float a） </font> 返回参数加 0.5 后与参数接近的整数</p><p> <font color = #05ffdc>Math.round（double a） </font> 返回参数加 0.5 后与参数接近的整数并转换为长整型(double)</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.ceil（double a） 返回大于等于参数的最小整数："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">5.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.floor（double a）返回小于等于参数的最大整数："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.rint（double a） 返回与参数接近的整数，如果两整数一样，则取偶数："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">rint</span><span class="token punctuation">(</span><span class="token number">2.7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.round（float a） 返回参数加 0.5 后与参数接近的整数："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">3.4f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.round（double a） 返回参数加 0.5 后与参数接近的整数并转换为长整型(double)："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">Math.ceil（double a） 返回大于等于参数的最小整数：6.0Math.floor（double a）返回小于等于参数的最大整数：2.0Math.rint（double a） 返回与参数接近的整数，如果两整数一样，则取偶数：3.0Math.round（float a） 返回参数加 0.5 后与参数接近的整数：3Math.round（double a） 返回参数加 0.5 后与参数接近的整数并转换为长整型(double)：3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最大、最小、绝对值函数方法"><a href="#最大、最小、绝对值函数方法" class="headerlink" title="最大、最小、绝对值函数方法"></a>最大、最小、绝对值函数方法</h3><p><font color = #05ffdc>Math.max（double a ，double b） </font> 取a ，b 较大值，参数整型</p><p><font color = #05ffdc>Math.min（int a ，int b） </font> 取a ，b 较小值，参数整型</p><p><font color = #05ffdc>Math.min（long a ，long b） </font>  取a ，b 较小值，参数长整型</p><p><font color = #05ffdc>Math.min（float a ，float b） </font>  取a ，b 较小值，参数浮点型</p><p><font color = #05ffdc>Math.min（doubl a ，double b） </font>  取a ，b 较小值，参数双精度型</p><p><font color = #05ffdc>Math.abs（int a） </font> 返回整型参数的绝对值</p><p><font color = #05ffdc>Math.abs（long a） </font> 返回长整型参数的绝对值</p><p><font color = #05ffdc>Math.abs（float a） </font> 返回浮点型参数的绝对值</p><p><font color = #05ffdc>Math.abs（double a） </font> 返回双精度型参数的绝对值</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.max（double a ，double b） 取a ，b 较大值，参数整型："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">4.3</span><span class="token punctuation">,</span><span class="token number">4.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.min（int a ，int b） 取a ，b 较小值，参数整型："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.abs（double a） 返回双精度型参数的绝对值："</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果 </p><pre class="line-numbers language-text"><code class="language-text">Math.max（double a ，double b） 取a ，b 较大值，参数整型：4.3Math.min（int a ，int b） 取a ，b 较小值，参数整型：3Math.abs（double a） 返回双精度型参数的绝对值：5.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><h3 id="Math-random（）方法"><a href="#Math-random（）方法" class="headerlink" title="Math.random（）方法"></a>Math.random（）方法</h3><p>Math类中的random（）方法，用于产生随机数字，该方法默认生成 0 ~ 1 之间的double型随机数</p><p>以下方法可以从0 控制的范围<br>$$<br>Math.random()*m<br>$$</p><p>$$<br>0*m &lt;= double值 * m &lt; 1 * m<br>$$</p><p>$$<br>0 &lt;= double值 &lt; m<br>$$</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1 - 100 的随机数："</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"50 - 100 的随机数："</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//'a'+Math.random()*('z'-'a'+1) ：后面加1原因因为要包含字母‘z’</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a - z 的随机字符："</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token string">'z'</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">1 - 100 的随机数：8450 - 100 的随机数：64a - z 的随机字符：s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Random类"><a href="#Random类" class="headerlink" title="Random类"></a>Random类</h3><p>Java提供有Java.util.Random类，可以通过Random对象创建随机数生成器</p><pre class="line-numbers language-java"><code class="language-java">Random r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span>seedValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>seedValue：系统时间作为随机数生成的种子</p><p><strong>Random方法</strong></p><p><font color = #05ffdc>Random.nextInt（） </font> 返回随机整数</p><p><font color = #05ffdc>Random.nextInt（int n） </font> 返回大于等于0且小于n的随机数</p><p><font color = #05ffdc>Random.nextLong（） </font> 返回随机数长整型</p><p><font color = #05ffdc>Random.nextBoolean（）</font> 返回随机数布尔值</p><p><font color = #05ffdc>Random.nextFloat（） </font> 返回随机数浮点型</p><p><font color = #05ffdc>Random.nextDouble（） </font> 返回随机数双精度型</p><p><font color = #05ffdc>Random.nextGaussian（） </font> 返回概率密度为高斯分布的双精度值</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Random d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"nextInt（） 返回随机整数："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"nextInt（int n） 返回大于等于0且小于n的随机数(10)："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"nextLong（） 返回随机数长整型："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"nextBoolean（）返回随机数布尔值："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">nextBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"nextFloat（） 返回随机数浮点型："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">nextFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"nextDouble（） 返回随机数双精度型："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"nextGaussian（） 返回概率密度为高斯分布的双精度值："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">nextInt（） 返回随机整数：1697026804nextInt（int n） 返回大于等于0且小于n的随机数(10)：3nextLong（） 返回随机数长整型：-2264169696298848856nextBoolean（）返回随机数布尔值：falsenextFloat（） 返回随机数浮点型：0.7777471nextDouble（） 返回随机数双精度型：0.10485108224186857nextGaussian（） 返回概率密度为高斯分布的双精度值：0.22713289568100314<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="大数字运算"><a href="#大数字运算" class="headerlink" title="大数字运算"></a>大数字运算</h2><h3 id="BigInteger"><a href="#BigInteger" class="headerlink" title="BigInteger"></a>BigInteger</h3><p>java.math.BigInteger类 可以准确地表示任何大小的整型而不会丢失数据</p><ol><li>new BigInteger（String val）;    （val：是十进制字符串）</li><li>BigInteger.valueOf(Long);</li></ol><p>以上有两种方式获取 BigInteger对象 </p><p><strong>BigInteger方法</strong></p><p><font color = #05ffdc>BigInteger.add（BigInteger val） </font> 加法运算</p><p><font color = #05ffdc>BigInteger.subtract（BigInteger val） </font> 减法运算</p><p><font color = #05ffdc>BigInteger.mulitply（BigInteger val）</font> 乘法运算</p><p><font color = #05ffdc>BigInteger.divide（BigInteger val）</font> 除法运算</p><p><font color = #05ffdc>BigInteger.remainder（BigInteger val）</font> 取余操作</p><p><font color = #05ffdc>BigInteger.divideAndRemainder（BigInteger val）</font> 用数组返回余数的商，结果：第一个为商，第二个为余数</p><p><font color = #05ffdc>BigInteger.pow（int n）</font> 取参数 n次方 的操作</p><p><font color = #05ffdc>BigInteger.negate（）</font> 取相反数</p><p><font color = #05ffdc>BigInteger.shiftLeft（int n）</font> 将数字左移n位，负数则右移</p><p><font color = #05ffdc>BigInteger.shiftRight（int n）</font> 将数字右移n位，负数则左移</p><p><font color = #05ffdc>BigInteger.and（BigInteger val）</font> 与 操作</p><p><font color = #05ffdc>BigInteger.or（BigInteger val）</font> 或 操作</p><p><font color = #05ffdc>BigInteger.compareTo（BigInteger val）</font> 数字比较</p><p><font color = #05ffdc>BigInteger.equals（Object x）</font> 判断内容是否相同</p><p><font color = #05ffdc>BigInteger.min（BigInteger val）</font> 返回较小值</p><p><font color = #05ffdc>BigInteger.max（BigInteger val）</font> 返回较大值</p><p><font color = #05ffdc>BigInteger.gcd（BigInteger val） </font> 返回最大公约数</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    BigInteger b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"999"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BigInteger b2 <span class="token operator">=</span> BigInteger<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">99999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigInteger.add（BigInteger val） 加法运算："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigInteger.subtract（BigInteger val） 减法运算："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigInteger.mulitply（BigInteger val）乘法运算："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigInteger.divide（BigInteger val）除法运算："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigInteger.remainder（BigInteger val）取余操作："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">remainder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"BigInteger.divideAndRemainder（BigInteger val）用数组返回余数的商，结果：第一个为商，第二个为余数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BigInteger<span class="token punctuation">[</span><span class="token punctuation">]</span> big <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">divideAndRemainder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>BigInteger tmp <span class="token operator">:</span> big<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>tmp<span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigInteger.pow（int n）取参数 n次方 的操作："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigInteger.negate（）取相反数："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">negate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigInteger.shiftLeft（int n）将数字左移n位，负数则右移2："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">shiftLeft</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigInteger.shiftLeft（int n）将数字左移n位，负数则右移-2："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">shiftLeft</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigInteger.shiftRight（int n）将数字右移n位，负数则左移2："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">shiftRight</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigInteger.shiftRight（int n）将数字右移n位，负数则左移-2："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">shiftRight</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"BigInteger.and（BigInteger val）与 操作："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"999"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"BigInteger.or（BigInteger val）或 操作："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b2<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"99999"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigInteger.compareTo（BigInteger val）数字比较999："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"999"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigInteger.compareTo（BigInteger val）数字比较99："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"99"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigInteger.equals（Object x）判断内容是否相同："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigInteger.min（BigInteger val）返回较小值："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigInteger.max（BigInteger val）返回较大值："</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//new BigInteger("a").gcd(new BigInteger("b"));    a 与 b 的最大公约数！！！</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigInteger.gcd（BigInteger val）返回最大公约数："</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"23123213"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"2443512"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">BigInteger.add（BigInteger val） 加法运算：1000BigInteger.subtract（BigInteger val） 减法运算：998BigInteger.mulitply（BigInteger val）乘法运算：1998BigInteger.divide（BigInteger val）除法运算：333BigInteger.remainder（BigInteger val）取余操作：4BigInteger.divideAndRemainder（BigInteger val）用数组返回余数的商，结果：第一个为商，第二个为余数：199    4BigInteger.pow（int n）取参数 n次方 的操作：998001BigInteger.negate（）取相反数：-999BigInteger.shiftLeft（int n）将数字左移n位，负数则右移2：3996BigInteger.shiftLeft（int n）将数字左移n位，负数则右移-2：249BigInteger.shiftRight（int n）将数字右移n位，负数则左移2：249BigInteger.shiftRight（int n）将数字右移n位，负数则左移-2：3996BigInteger.and（BigInteger val）与 操作：yesBigInteger.or（BigInteger val）或 操作：noBigInteger.compareTo（BigInteger val）数字比较999：0BigInteger.compareTo（BigInteger val）数字比较99：1BigInteger.equals（Object x）判断内容是否相同：falseBigInteger.min（BigInteger val）返回较小值：999BigInteger.max（BigInteger val）返回较大值：99999BigInteger.gcd（BigInteger val）返回最大公约数：17<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h3><p>java.math.BigDecimal类 可以高精度浮动运算，支持任何精度的定点数</p><p><strong>BigDecimal构造方法</strong></p><ol><li>new BigDecimal（String val）</li><li>new BigDecima（double val）</li><li>BigDecima.valueOf（double val）</li></ol><p>以上有三种方式获取 BigDecimal对象 </p><p><strong>BigDecimal方法</strong></p><p><font color = #05ffdc>BigDecimal.add（BigDecimal val） </font> 加法运算</p><p><font color = #05ffdc>BigDecimal.subtract（BigDecimal val） </font> 减法运算</p><p><font color = #05ffdc>BigDecimal.multiply（BigDecimal val） </font> 乘法运算</p><p><font color = #05ffdc>BigDecimal.divide（BigDecimal val） </font> 除法运算</p><p><font color = #05ffdc>BigDecimal.divide（BigDecimal val , int n , int j） </font> 除法运算</p><blockquote><p>val：除数<br>i：小数位数<br>j：近似值处理模式</p></blockquote><table><thead><tr><th>处理模式</th><th>说明</th><th>定义值</th></tr></thead><tbody><tr><td>BigDecimal.ROUND_UP</td><td>商最后一位大0，进位，正负一样</td><td>0</td></tr><tr><td>BigDecimal.ROUND_DOWN</td><td>商最后一位直接省略</td><td>1</td></tr><tr><td>BigDecimal.ROUND_CEILING</td><td>商正数0处理，负数则1处理</td><td>2</td></tr><tr><td>BigDecimal.ROUND_FLOOR</td><td>商正数1处理，负数则0处理</td><td>3</td></tr><tr><td>BigDecimal.ROUND_HALF_UP</td><td>商最后一位，四舍五入，大于等于5进位，小于5省略</td><td>4</td></tr><tr><td>BigDecimal.ROUND_HALF_DOWN</td><td>商最后一位，四舍五入，大于5进位，小于等于5省略</td><td>5</td></tr><tr><td>BigDecimal.ROUND_HALF_EVEN</td><td>商的倒数第二位，奇数4处理，偶数5处理</td><td>6</td></tr></tbody></table><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BigDecimal b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"30.12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BigDecimal b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">40.12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BigDecimal b3 <span class="token operator">=</span> BigDecimal<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">50.12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigDecimal.add（BigDecimal val） 加法运算："</span><span class="token operator">+</span>b1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigDecimal.subtract（BigDecimal val） 减法运算："</span><span class="token operator">+</span>b1<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigDecimal.multiply（BigDecimal val） 乘法运算："</span><span class="token operator">+</span>b1<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BigDecimal d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigDecimal.divide（BigDecimal val） 除法运算："</span><span class="token operator">+</span>b3<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BigDecimal.divide（BigDecimal val , int n , int j） 除法运算："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 0 ：ROUND_UP</span>        <span class="token comment" spellcheck="true">// 1 ：ROUND_DOWN</span>        <span class="token comment" spellcheck="true">// 2 ：ROUND_CEILING</span>        <span class="token comment" spellcheck="true">// 3 ：ROUND_FLOOR</span>        <span class="token comment" spellcheck="true">// 4 ：ROUND_HALF_UP</span>        <span class="token comment" spellcheck="true">// 5 ：ROUND_HALF_DOWN</span>        <span class="token comment" spellcheck="true">// 6 ：ROUND_HALF_EVEN</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"50.12/3 = "</span> <span class="token operator">+</span> b3<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"（0）50.12/3 = "</span> <span class="token operator">+</span> b3<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"（1）50.12/3 = "</span> <span class="token operator">+</span> b3<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"（2）50.12/3 = "</span> <span class="token operator">+</span> b3<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"（3）50.12/3 = "</span> <span class="token operator">+</span> b3<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"（4）50.12/3 = "</span> <span class="token operator">+</span> b3<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"（5）50.12/3 = "</span> <span class="token operator">+</span> b3<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"（6）50.12/3 = "</span> <span class="token operator">+</span> b3<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">BigDecimal.add（BigDecimal val） 加法运算：70.23999999999999744204615126363933086395263671875BigDecimal.subtract（BigDecimal val） 减法运算：-9.99999999999999744204615126363933086395263671875BigDecimal.multiply（BigDecimal val） 乘法运算：1208.4143999999999229544300760608166456222534179687500BigDecimal.divide（BigDecimal val） 除法运算：10.024BigDecimal.divide（BigDecimal val , int n , int j） 除法运算：50.12/3 = 16.70666666666666666667（0）50.12/3 = 16.706666666666666667（1）50.12/3 = 16.706666666666666666（2）50.12/3 = 16.706666666666666667（3）50.12/3 = 16.706666666666666666（4）50.12/3 = 16.706666666666666667（5）50.12/3 = 16.706666666666666667（6）50.12/3 = 16.706666666666666667<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="接口、继承、多态"><a href="#接口、继承、多态" class="headerlink" title="接口、继承、多态"></a>接口、继承、多态</h1><h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><p>子类可以继承父类原有的属性和方法，也可以增加父类没有的属性和方法，还可以重写父类中的某些方法</p><blockquote><p><strong>知识点：</strong></p><ul><li>父类继承</li><li>父类方法重写以及修饰权限的访问</li><li>super关键字</li><li>多父类的继承</li></ul></blockquote><p><strong>super关键字</strong></p><p>super关键字可以调用父类的属性和方法。<br><code>super();</code>语句调用父类构造方法<br><code>super.方法名;</code> 语句调用父类的方法<br><code>super.属性;</code> 语句调用父类的属性（变量）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化</span>        Computer com <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Notebook not <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Notebook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Tablet pan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tablet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------继承的使用----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//父类自身方法、属性</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span>Display<span class="token punctuation">)</span><span class="token punctuation">;</span>        com<span class="token punctuation">.</span><span class="token function">openUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//子类继承方法、属性</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>not<span class="token punctuation">.</span>Display<span class="token punctuation">)</span><span class="token punctuation">;</span>        not<span class="token punctuation">.</span><span class="token function">openUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//子类继承方法、属性</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pan<span class="token punctuation">.</span>Display<span class="token punctuation">)</span><span class="token punctuation">;</span>        pan<span class="token punctuation">.</span><span class="token function">openUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//子类自身的方法、属性</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pan<span class="token punctuation">.</span>Battery<span class="token punctuation">)</span><span class="token punctuation">;</span>        pan<span class="token punctuation">.</span><span class="token function">Network</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//无法调用</span><span class="token comment" spellcheck="true">//    com.myComputer();</span><span class="token comment" spellcheck="true">//    pan.myComputer();</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------方法重写----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        not<span class="token punctuation">.</span><span class="token function">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//以重写的方法</span>        pan<span class="token punctuation">.</span><span class="token function">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------super关键字的使用----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span><span class="token function">Welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>not<span class="token punctuation">.</span><span class="token function">Welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pan<span class="token punctuation">.</span><span class="token function">Welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        not<span class="token punctuation">.</span><span class="token function">Super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------构造方法调用----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Computer no1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token string">"联想电脑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Notebook no2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Notebook</span><span class="token punctuation">(</span><span class="token string">"雷蛇笔记本电脑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Tablet no3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tablet</span><span class="token punctuation">(</span><span class="token string">"苹果平板电脑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//电脑类</span><span class="token keyword">class</span> <span class="token class-name">Computer</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//最顶端的类</span>    String name <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//电脑类的构造方法</span>    <span class="token keyword">public</span> <span class="token function">Computer</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用时输出电脑name</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//存在有参数的构造方法，编译器不会自动创建无参数构造方法</span>    <span class="token keyword">public</span> <span class="token function">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//手动创建无参构造方法</span>    String Display <span class="token operator">=</span> <span class="token string">"液晶显示屏"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">openUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打开电脑，请稍等····"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//限于本类访问的方法 （其他类无法访问、继承的方法）</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">myComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我的电脑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">Welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"欢迎使用"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//笔记本电脑类</span><span class="token keyword">class</span> <span class="token class-name">Notebook</span> <span class="token keyword">extends</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//继承电脑类（父类）</span>    String name <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//笔记本电脑类构造方法</span>    <span class="token keyword">public</span> <span class="token function">Notebook</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用电脑类（父类）的构造方法</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//存在有参数的构造方法，编译器不会自动创建无参数构造方法</span>    <span class="token keyword">public</span> <span class="token function">Notebook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//手动创建无参构造方法</span>    <span class="token comment" spellcheck="true">//使用super关键字调用电脑类（父类）方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用了电脑类属性(Display)："</span><span class="token operator">+</span><span class="token keyword">super</span><span class="token punctuation">.</span>Display<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用了电脑类方法openUp()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">openUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"可折叠电脑！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment" spellcheck="true">//重写电脑类（父类）的Welcome()方法</span>    <span class="token keyword">public</span> String  <span class="token function">Welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//继承电脑类（父类）数据并添加返回</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">Welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"笔记本电脑"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//平板电脑类</span><span class="token keyword">class</span> <span class="token class-name">Tablet</span> <span class="token keyword">extends</span> <span class="token class-name">Notebook</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//继承笔记本电脑类</span>    String name <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//平板笔记本电脑类（父类）构造方法</span>    <span class="token keyword">public</span> <span class="token function">Tablet</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用笔记本电脑类（父类）的构造方法</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//存在有参数的构造方法，编译器不会自动创建无参数构造方法</span>    <span class="token keyword">public</span> <span class="token function">Tablet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//手动创建无参构造方法</span>    String Battery <span class="token operator">=</span> <span class="token string">"5000毫安"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Network</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打开数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment" spellcheck="true">//重写笔记本电脑类（父类）的Function()方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不可折叠电脑！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment" spellcheck="true">//重写电脑类（最顶父类）的Welcome()方法</span>    <span class="token keyword">public</span> String  <span class="token function">Welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//继承笔记本电脑类（父类）数据并添加返回</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">Welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"平板电脑"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误示范。（继承笔记本电脑类已修改的数据）</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">---------继承的使用----------液晶显示屏打开电脑，请稍等····液晶显示屏打开电脑，请稍等····液晶显示屏打开电脑，请稍等····5000毫安打开数据---------方法重写----------可折叠电脑！！不可折叠电脑！！---------super关键字的使用----------欢迎使用欢迎使用笔记本电脑欢迎使用笔记本电脑平板电脑调用了电脑类属性(Display)：液晶显示屏调用了电脑类方法(Display)打开电脑，请稍等····---------构造方法调用----------联想电脑雷蛇笔记本电脑苹果平板电脑<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>*<em>注意 : *</em></p><ul><li>Java语言中，一个类只可以有一个父类（可以层叠继承）</li><li>子类不仅会覆盖父类的方法，还会覆盖父类的属性</li><li>父类无参构造方法可自动调用，有参构造方法只能使用 super关键字 调用父类构造方法</li><li>用 private 写的方法，其他类无法调用和重写</li></ul></blockquote><h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><p>Object类是所有类的父类，是最顶层的类，定义类时可省略 <code>extends Object</code> 关键字 ，任何类都可以重写Object类中的方法</p><p><strong>Object方法</strong></p><p><font color = #05ffdc>Object.getClass（） </font> 返回对象执行时的Class实例</p><p><font color = #05ffdc>Object.toString（） </font> 以字符串形式返回对象</p><p><font color = #05ffdc>Object.equals（Object val） </font> 比较两对象的引用是否相等（内容）</p><blockquote><p>equals（）方法比较内容，<code>==</code> 比较对象引用的地址</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"字符串"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//getClass()方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------getClass()方法--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Object tmp <span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//toString()方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------toString()方法--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Object tmp <span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Object tmp <span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//equals()方法</span>        Object no1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object no2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object no3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------equals()方法--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>no1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>no1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>no3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>no1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>no1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>no2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">---------getClass()方法--------class java.lang.Objectclass java.lang.Stringclass Democlass java.lang.Integer---------toString()方法--------java.lang.Object@10f87f48字符串Demo@b4c966a12-----------------java.lang.Object@10f87f48字符串Demo@b4c966a12---------equals()方法--------truetruetruefalse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对象类型的转换"><a href="#对象类型的转换" class="headerlink" title="对象类型的转换"></a>对象类型的转换</h2><h3 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h3><p>向上转型是子类对象赋值给父类类型的变量 （子类 → 父类）</p><h3 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h3><p>向下转型是将比较抽象的类转换为较具体的类（父类 → 子类）</p><blockquote><p>转换的前提继承父类的子类必须是它本身</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//向上转型</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------向上转型---------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Animal no1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">,</span><span class="token string">"Jak"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//向下转型</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------向下转型---------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Animal no2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">,</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Animal no3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">,</span><span class="token string">"Jak"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Animal no4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rabbit</span><span class="token punctuation">(</span><span class="token string">"Rabbit"</span><span class="token punctuation">,</span><span class="token string">"Tt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//yes 为向下转型成功</span><span class="token comment" spellcheck="true">//      Dog dg = (Dog)no2;         //no</span>        Dog dg2 <span class="token operator">=</span> <span class="token punctuation">(</span>Dog<span class="token punctuation">)</span>no3<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//yes</span><span class="token comment" spellcheck="true">//      Dog dg3 = (Dog)no4;        //no</span><span class="token comment" spellcheck="true">//      Rabbit rm = (Rabbit)no2;      //no</span><span class="token comment" spellcheck="true">//      Rabbit rm2 = (Rabbit)no3;     //no</span>        Rabbit rm3 <span class="token operator">=</span> <span class="token punctuation">(</span>Rabbit<span class="token punctuation">)</span>no4<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//yes</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//动物类</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Animal</span><span class="token punctuation">(</span>String type<span class="token punctuation">,</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我的宠物是"</span><span class="token operator">+</span>type<span class="token operator">+</span><span class="token string">" , 名叫："</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//小狗类</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String type<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//兔子类</span><span class="token keyword">class</span> <span class="token class-name">Rabbit</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Rabbit</span><span class="token punctuation">(</span>String type<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">-----------向上转型---------我的宠物是dog , 名叫：Jak-----------向下转型---------我的宠物是dog , 名叫：tom我的宠物是dog , 名叫：Jak我的宠物是Rabbit , 名叫：Tt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="instanceof关键字"><a href="#instanceof关键字" class="headerlink" title="instanceof关键字"></a>instanceof关键字</h2><p>instanceof关键字是判断父类对象是否为子类对象的实例，是否继承该子类</p><pre class="line-numbers language-java"><code class="language-java">myobject <span class="token keyword">instanceof</span> <span class="token class-name">ExampleClass</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>myobject：某类的对象引用</p><p>ExampleClass：某类名称 / 接口名称</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">E</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">E</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> ars<span class="token punctuation">)</span> <span class="token punctuation">{</span>        C c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c是否继承A父类?"</span><span class="token operator">+</span><span class="token punctuation">(</span>c <span class="token keyword">instanceof</span> <span class="token class-name">A</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c是否继承B父类?"</span><span class="token operator">+</span><span class="token punctuation">(</span>c <span class="token keyword">instanceof</span> <span class="token class-name">B</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c是否调用E接口?"</span><span class="token operator">+</span><span class="token punctuation">(</span>c <span class="token keyword">instanceof</span> <span class="token class-name">E</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        B b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\nb是否继承C父类?"</span><span class="token operator">+</span><span class="token punctuation">(</span>b <span class="token keyword">instanceof</span> <span class="token class-name">C</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b是否继承A父类?"</span><span class="token operator">+</span><span class="token punctuation">(</span>b <span class="token keyword">instanceof</span> <span class="token class-name">A</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">c是否继承A父类?truec是否继承B父类?truec是否调用E接口?trueb是否继承C父类?falseb是否继承A父类?true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><p>方法重载是在同一个类中允许多个同名方法，只要方法参数个数、类型、顺序不同即可！</p><blockquote><p><strong>不同条件：</strong></p><ul><li>参数个数的不同</li><li>参数顺序的不同</li><li>参数类型的不同</li><li><code>...</code>定义不定长的参数个数</li></ul></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Demo d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> a <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        d<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用了method( int )的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//参数个数的不同</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用了method( int , int )的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//参数类型的不同</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">long</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用了method( int , long )的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//参数顺序的不同</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用了method( long , int )的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//不定长度参数方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用了method(int...)的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> tmp <span class="token operator">:</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>tmp<span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">long</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用了method(long,int...)的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> tmp <span class="token operator">:</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>tmp<span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">调用了method( int )的方法调用了method( int , int )的方法调用了method( int , long )的方法调用了method( long , int )的方法调用了method(int...)的方法1    2    3    4    5    6    7    8    调用了method(long,int...)的方法2    3    4    5    6    7    8    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多态-1"><a href="#多态-1" class="headerlink" title="多态"></a>多态</h2><p>多态可以根据不同类在同一变量，同一方法，执行结果不同的作用</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Animals ton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"Dog(狗)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ton<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Animals Jak <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rabbit</span><span class="token punctuation">(</span><span class="token string">"Rabbit(兔子)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Jak<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Animals Yin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Eagle</span><span class="token punctuation">(</span><span class="token string">"Eagle(鹰)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Yin<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//动物类</span><span class="token keyword">class</span> <span class="token class-name">Animals</span> <span class="token punctuation">{</span>    String type<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Animals</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//移动的方法</span>    <span class="token keyword">public</span> String <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">(</span>type<span class="token operator">+</span><span class="token string">"的移动方式："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//狗类 继承 动物类</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animals</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment" spellcheck="true">//重写移动方法</span>    <span class="token keyword">public</span> String <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"跑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//兔子类 继承 动物类</span><span class="token keyword">class</span> <span class="token class-name">Rabbit</span> <span class="token keyword">extends</span> <span class="token class-name">Animals</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Rabbit</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment" spellcheck="true">//重写移动方法</span>    <span class="token keyword">public</span> String <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"跳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//鹰类 继承 动物类</span><span class="token keyword">class</span> <span class="token class-name">Eagle</span> <span class="token keyword">extends</span> <span class="token class-name">Animals</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Eagle</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment" spellcheck="true">//重写移动方法</span>    <span class="token keyword">public</span> String <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"飞翔"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">Dog(狗)的移动方式：跑Rabbit(兔子)的移动方式：跳Eagle(鹰)的移动方式：飞翔<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>抽象类一般定义在父类，用来进行继承和多态的处理，该抽象类不能被实例化，需要子类具体化</p><p><strong>abstract关键字</strong> </p><p>abstract关键字是定义抽象类的关键字</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Text</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>抽象方法</strong></p><p>抽象方法没有方法体，本身是没有意义，需要被继承的子类重写抽象方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Text</span> <span class="token punctuation">{</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">textAbstract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>抽象方法存在前提，在抽象方法里的类也是抽象类</li><li>抽象方法重写才有意义</li><li>抽象类不能实例化</li></ul></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Teachers Tom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Englishteachers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Teachers Jak <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mathteachers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        Teachers Tea = new Teachers();</span>        Tom<span class="token punctuation">.</span><span class="token function">teaching</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Jak<span class="token punctuation">.</span><span class="token function">teaching</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//教师抽象类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Teachers</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//讲课抽象方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">teaching</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//英语老师 继承 教师抽象类</span><span class="token keyword">class</span> <span class="token class-name">Englishteachers</span> <span class="token keyword">extends</span> <span class="token class-name">Teachers</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment" spellcheck="true">//重写讲课方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">teaching</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"英语老师，讲课"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//数学老师 继承 教师抽象类</span><span class="token keyword">class</span> <span class="token class-name">Mathteachers</span> <span class="token keyword">extends</span> <span class="token class-name">Teachers</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment" spellcheck="true">//重写讲课方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">teaching</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数学老师，讲课"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">英语老师，讲课数学老师，讲课<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>个人习题</strong></p><blockquote><p><strong>题目：</strong></p><p>动物类（抽象）里有鸟类（抽象）里有小鸡（具体） 和 鹰（具体），写出他们的移动方式，皮毛类型</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Birds lan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Eagle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鹰的属性："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"移动方式："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lan<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"毛皮样式："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lan<span class="token punctuation">.</span><span class="token function">Fur</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Birds tom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小鸡的属性："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"移动方式："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tom<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"毛皮样式："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tom<span class="token punctuation">.</span><span class="token function">Fur</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n----------测试--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Animals lan2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Eagle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鹰的属性："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"移动方式："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lan2<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        System.out.print("毛皮样式：");</span><span class="token comment" spellcheck="true">//        lan2.Fur();</span>        <span class="token comment" spellcheck="true">/*            需要向下转型             ((Eagle) lan2).Fur();             ((Birds) lan2).Fur();            才可以调用        * */</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Animals tom2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小鸡的属性："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"移动方式："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tom2<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        System.out.print("毛皮样式：");</span><span class="token comment" spellcheck="true">//        tom2.Fur();</span>        <span class="token comment" spellcheck="true">/*            需要向下转型             ((Eagle) lan2).Fur();             ((Birds) lan2).Fur();            才可以调用        * */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//动物抽象类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animals</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Animals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建了一个动物"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//移动抽象方法</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//鸟</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Birds</span> <span class="token keyword">extends</span> <span class="token class-name">Animals</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Birds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建了一个鸟类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//毛皮样式抽象方法</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Fur</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//鹰</span><span class="token keyword">class</span> <span class="token class-name">Eagle</span> <span class="token keyword">extends</span> <span class="token class-name">Birds</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Eagle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建了一个鹰"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"飞翔"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Fur</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"羽毛"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//小鸡</span><span class="token keyword">class</span> <span class="token class-name">Chick</span> <span class="token keyword">extends</span> <span class="token class-name">Birds</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Chick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建了一个小鸡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"步行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Fur</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"细毛"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">创建了一个动物创建了一个鸟类创建了一个鹰鹰的属性：移动方式：飞翔毛皮样式：羽毛创建了一个动物创建了一个鸟类创建了一个小鸡小鸡的属性：移动方式：步行毛皮样式：细毛----------测试---------创建了一个动物创建了一个鸟类创建了一个鹰鹰的属性：移动方式：飞翔创建了一个动物创建了一个鸟类创建了一个小鸡小鸡的属性：移动方式：步行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口是抽象类的延伸，能批量设置部分子类独有方法</p><p><strong>interface关键字</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Text</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fangfa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>interface：定义接口关键字<br>Text：接口名称</p></blockquote><p><strong>接口 继承与多继承</strong></p><p>子接口被调用时，该子接口的父接口全部方法都要继承，都要调用</p><p>一个类可以实现多个继承接口，在interface关键字后面逗号分隔即可</p><blockquote><p><strong>注意：</strong></p><ul><li>接口中的方法必须定义为 public 或 abstract （抽象方法）形式 ，Java 默认修饰 public</li><li>接口定义的字段都是为静态（static）和常量（final）</li><li>接口内的方法可以省去 abstract（抽象）关键字</li><li>实现多接口时，实例化对象类型为它的本身，否则要转换</li></ul></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">DrawInterface</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 绘制接口</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Ddc</span> <span class="token keyword">extends</span> <span class="token class-name">DrawInterface</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Ddcb</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">csb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DrawInterface d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Qua</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用重写接口方法</span>        d<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n重新测试："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例化类本身</span>        Qua q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Qua</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用类本身的方法</span>        q<span class="token punctuation">.</span><span class="token function">benshen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用重写接口方法</span>        q<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DrawInterface d2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d2<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Ddc d3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Triangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d3<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d3<span class="token punctuation">.</span><span class="token function">cs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例对象本身调用接口方法</span>        Triangle t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Triangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">csb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//三角形类</span><span class="token keyword">class</span> <span class="token class-name">Triangle</span> <span class="token keyword">implements</span> <span class="token class-name">Ddc</span> <span class="token punctuation">,</span>Ddcb<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//实现多接口继承</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"绘制三角形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试继承"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">csb</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试继承2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//四边形类</span><span class="token keyword">class</span> <span class="token class-name">Qua</span> <span class="token keyword">implements</span> <span class="token class-name">DrawInterface</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"绘制四边形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">benshen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是四边形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//正方形类 继承 四边形</span><span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Qua</span> <span class="token keyword">implements</span> <span class="token class-name">DrawInterface</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"绘制正方形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">绘制四边形重新测试：我是四边形绘制四边形绘制正方形绘制三角形测试继承测试继承2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="类的高级特性"><a href="#类的高级特性" class="headerlink" title="类的高级特性"></a>类的高级特性</h1><h2 id="Java类包"><a href="#Java类包" class="headerlink" title="Java类包"></a>Java类包</h2><p>Java JDK API中提供了类功能，它们封装为类包</p><h3 id="类名冲突"><a href="#类名冲突" class="headerlink" title="类名冲突"></a>类名冲突</h3><p>JDK API 中提供的类，在同一类包 同类名 会导致编译器无法执行 ，要把类包分开或更改类名</p><h3 id="完整的类路径"><a href="#完整的类路径" class="headerlink" title="完整的类路径"></a>完整的类路径</h3><p>完整的类名需要包名与类名的组合</p><pre class="line-numbers language-java"><code class="language-java">java<span class="token punctuation">.</span>包名<span class="token punctuation">.</span>类名<span class="token comment" spellcheck="true">//例子</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>如果指定路径不确定可能会翻车，像以下是需要完整路径<br><code>java.util.Date date = new java.util.Date();</code><br><code>java.sql.Date date2 = new java.sql.Date();</code></p></blockquote><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>java包是为了防止命名冲突，访问控制，提供搜索和定位类、接口、枚举和注释等</p><p>没有定义包会自动归纳在预设包（默认包）中，最好为所有类设置包名（良好习惯）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> 包名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>注意：</strong></p><ul><li><p>在类中指定包名时，需要将 package 表达式 放在程序的第一行，必须是，非注释代码</p></li><li><p>Java包的命名规则是全部使用小写字母的</p></li></ul></blockquote><h3 id="import-关键字导入包"><a href="#import-关键字导入包" class="headerlink" title="import 关键字导入包"></a>import 关键字导入包</h3><p>引入包可以调用包中的方法，不能调用两包中的同类名，指定包后面有 <code>*</code> ，代表使用包中的所有类</p><p>默认包中的类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> noa<span class="token punctuation">.</span>out<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        out a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nob<span class="token punctuation">.</span>out2 b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">nob<span class="token punctuation">.</span>out2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>noa包 中的 out类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> noa<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">out</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>nob包 中的 out2类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> nob<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">out2</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">测试1测试2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="import-关键字导入静态成员"><a href="#import-关键字导入静态成员" class="headerlink" title="import 关键字导入静态成员"></a>import 关键字导入静态成员</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> 静态成员<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例子：</p><blockquote><p>java.lang.System 类中的out成员变量<br>java.lang.Math 类中的max成员方法</p><p>它们都是静态成员，这是前提！！！</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>System<span class="token punctuation">.</span>out<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//导入静态成员方法</span><span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Math<span class="token punctuation">.</span>max<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//导入静态成员变量</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//静态成员简写调用</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//静态方法简写调用</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"max(3,4)?"</span><span class="token operator">+</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"max(3,4)?"</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">123123max(3,4)?4max(3,4)?4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h2><p><strong>final变量</strong></p><p>final 声明的变量，设定后，不能更改该变量的值，被final设置的变量称为常量！！</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> 数据类型 变量名 <span class="token operator">=</span> 值<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>final方法</strong></p><p>final 定义的方法，不能被其他子类重写该方法</p><p>用private修饰符（限于本类使用）修饰的方法隐式被指定为 final类型 ，可不需再定义 final 类型</p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> <span class="token keyword">final</span> 数据类型 方法名<span class="token punctuation">(</span><span class="token punctuation">[</span>参数<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>···<span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>final类</strong></p><p>final 定义的类，不能被继承 （跟部分API类类似）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">class</span> 类名<span class="token punctuation">{</span>···<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>final定义</p><p>变量 不能被更改</p><p>方法 不能被重写</p><p>类 不能被继承</p></blockquote><p>例子</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//final变量   常量IP</span>    <span class="token keyword">final</span> <span class="token keyword">double</span> IP <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        IP = 3.143;不能赋值更改</span>        no1 n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">no1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        n<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        n.show2();不能访问</span>        no2 n2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">no2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        n<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用继承父类的方法</span><span class="token comment" spellcheck="true">//        n.show2();不能访问</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">no1</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//show() final方法</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">show2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//no3 final类</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">no2</span> <span class="token keyword">extends</span> <span class="token class-name">no1</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*    不能重写 父类show()方法    public void show(){        System.out.println("测试1");    }    */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">show2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//class no3 extends no2{····}不能继承</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">测试1测试1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>一个类中再定义一个类，在类中再定义的类 称为内部类</p><h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><p>可直接使用所在的类中的成员方法 / 成员变量</p><blockquote><p><strong>注意：</strong></p><ul><li>在外部类外和非静态方法外实例内部类对象，需要外部类指定该对象的类型</li><li>访问 被 private修饰的内部类方法，需要接口重写调用</li><li>this关键字调用本类的成员变量，外类需要类名作为前缀。如果多类需要完整的类路径</li></ul></blockquote><p><strong>1.内部类调用外部类变量和方法及 private修饰 的访问</strong> </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">345</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">Demoo</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        int i = 456;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//共用外类的变量</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用内部类(Demo2)的show()方法输出i , j："</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"、"</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ssc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在内部类调用外类ss()方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//调用外类的ss()方法</span>            Demo<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n在内部类调用外类sss()方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//调用外类的sss()方法</span>            Demo<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用Demo类的show()方法输出i , j："</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"、"</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//public 修饰的外部类方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用sss()方法,public修饰"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//private 修饰的外部类方法</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用ss()方法,private修饰"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//在外部类实例化内部类对象引用</span>    Demoo n3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"内部类的变量使用以及比较："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Demo n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        n<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        Demo2 n2 = new Demo2(); 无法引用</span>        Demo<span class="token punctuation">.</span>Demoo n2 <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Demoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        n2<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n内部类的方法调用："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        n2<span class="token punctuation">.</span><span class="token function">ssc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">内部类的变量使用以及比较：调用Demo类的show()方法输出i , j：123、345调用内部类(Demo2)的show()方法输出i , j：123、345内部类的方法调用：在内部类调用外类ss()方法调用sss()方法,public修饰在内部类调用外类sss()方法调用ss()方法,private修饰<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.private修饰的内部类向上转型为接口</strong></p><p>能隐藏内部类方法运行情况，但仅限于接口抽象方法重写的访问</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">nn</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"no1类使用隐藏内部类的方法："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        no1 cc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">no1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过no1类doit()方法返回 nn接口</span>        nn cc2 <span class="token operator">=</span> cc<span class="token punctuation">.</span><span class="token function">doit</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cc2<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        cc2.f2();仅限于接口抽象方法的访问</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">no1</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//隐式内部类</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">no2</span> <span class="token keyword">implements</span> <span class="token class-name">nn</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//内部类的构造方法</span>        <span class="token function">no2</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"隐藏内部类获取的字符串："</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//重写接口方法</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用隐藏内部类接口f()方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试内部类的方法的访问"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回接口 ，实例化内部类</span>    <span class="token keyword">public</span> nn <span class="token function">doit</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">no2</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">no1类使用隐藏内部类的方法：隐藏内部类获取的字符串：Java调用隐藏内部类接口f()方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.<strong>使用 this 获取内部类与外部类的引用</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">D3nn</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo3</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">88</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Demoo3</span> <span class="token keyword">implements</span> <span class="token class-name">D3nn</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"参数i："</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"内部类i："</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"外部类i："</span><span class="token operator">+</span>Demo3<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> D3nn <span class="token function">doit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Demoo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">diao</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化外部类</span>        Demo3 n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过外部类doit()方法获取接口调用内部类重写方法</span>        D3nn n2 <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">doit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        n2<span class="token punctuation">.</span><span class="token function">out</span><span class="token punctuation">(</span><span class="token number">66</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">参数i：66内部类i：99外部类i：88<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><p>类定义在方法或任意的作用域中均可定义为内部类</p><p>方法不能访问内部类，但内部类可以访问当前方法的常量以及所有成员</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定义接口</span><span class="token keyword">interface</span> <span class="token class-name">D4nn</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo4</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//doit方法返回接口调用</span>    <span class="token keyword">public</span> D4nn <span class="token function">doit</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">class</span> <span class="token class-name">Demoo4</span> <span class="token keyword">implements</span> <span class="token class-name">D4nn</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//内部类的构造方法</span>            <span class="token keyword">public</span> <span class="token function">Demoo4</span><span class="token punctuation">(</span>String x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//外部类方法参数覆盖内容</span>                x <span class="token operator">=</span> s<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//内部类获取的参数</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//返回内部类对象</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Demoo4</span><span class="token punctuation">(</span><span class="token string">"参数测试22"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//主方法调用方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Demo4 n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        n<span class="token punctuation">.</span><span class="token function">doit</span><span class="token punctuation">(</span><span class="token string">"参数测试11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">参数测试11<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>匿名内部类没有名称，默认使用构造方法接口对象，匿名定义结束要有分号标识</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定义接口</span><span class="token keyword">interface</span> <span class="token class-name">D5nn</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Demoo5</span><span class="token punctuation">(</span>String x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo5</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> D5nn <span class="token function">doit</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">D5nn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//内部类的构造方法</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Demoo5</span><span class="token punctuation">(</span>String x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//外部类方法参数覆盖内容</span>                x <span class="token operator">=</span> s<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//内部类获取的参数</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Demo5 n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        D5nn  n2 <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">doit</span><span class="token punctuation">(</span><span class="token string">"参数匿名类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        n2<span class="token punctuation">.</span><span class="token function">Demoo5</span><span class="token punctuation">(</span><span class="token string">"参数匿名类2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">参数匿名类<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><p>内部类前面加static关键字即可，变成静态内部类，静态内部类只能调用静态的成员，用于调试</p><ul><li>如果创建静态内部类对象，不需要外部类的对象</li><li>不能从静态内部类的对象中访问非静态外部类的对象</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//静态内部类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo6</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Demoo6</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">Demoo6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            System.out.println(i);无法打印i ，i非静态</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//内部类里写主方法 ！！ 用于测试内部类</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Demoo6 n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demoo6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">22<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="内部类继承"><a href="#内部类继承" class="headerlink" title="内部类继承"></a>内部类继承</h3><p>内部类继承相对较复杂，需要设置专门的语法完成</p><p>继承内部类时，必须有构造方法带参数的，参数是内部类的外部类对象，同时构造方法里有使用 <code>a.super()</code> 语句</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo7</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//内部类</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demoo7</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">gg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cs n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">cs</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Demo7</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        n<span class="token punctuation">.</span><span class="token function">gg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//cs 继承 Demoo7内部类</span><span class="token keyword">class</span> <span class="token class-name">cs</span> <span class="token keyword">extends</span> <span class="token class-name">Demo7<span class="token punctuation">.</span>Demoo7</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//构造方法的参数是外部类的对象</span>    <span class="token keyword">public</span> <span class="token function">cs</span><span class="token punctuation">(</span>Demo7 d<span class="token punctuation">)</span><span class="token punctuation">{</span>        d<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">gg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">测试<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p>异常机制提供了程序退出的安全通道。当出现错误后，程序执行的流程发生改变，程序的控制权转移到异常处理器</p><p>Java类库的每个包中都定义有异常类，所有这些类都是 Throwable类 的子类，有两个子类分别是 Error类、Exception类</p><p>Error类 是描述java运行系统中的内部错误以及资源耗尽的错误，属于较为致命的错误</p><p>Exception类 是可以通过捕捉处理使程序继续运行，属于非致命的错误</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java04.png" style="zoom:80%;" /><h2 id="常见异常"><a href="#常见异常" class="headerlink" title="常见异常"></a>常见异常</h2><table><thead><tr><th>异常类</th><th>说明</th></tr></thead><tbody><tr><td>ClassCastException</td><td>类型转换异常类</td></tr><tr><td>ClassNotFoundException</td><td>没找到相应类异常</td></tr><tr><td>ArithmeticException</td><td>算术条件异常</td></tr><tr><td>ArrayIndexOutOfBoundsException</td><td>数组索引越界异常</td></tr><tr><td>ArrayStoreException</td><td>数组中包含不兼容的值抛出的异常</td></tr><tr><td>SQLException</td><td>操作数据库异常类</td></tr><tr><td>NullPointerException</td><td>空指针异常</td></tr><tr><td>NoSuchFieldException</td><td>字段未找到异常</td></tr><tr><td>NoSuchMethodException</td><td>方法未找到抛出的异常</td></tr><tr><td>NumberFormatException</td><td>字符串转换为数字抛出的异常</td></tr><tr><td>NegativeArraySizeException</td><td>数组长度为负异常</td></tr><tr><td>StringIndexOutOfBoundsException</td><td>字符串索引超出范围抛出的异常</td></tr><tr><td>IOException</td><td>操作输入流和输出流时异常</td></tr><tr><td>IllegalAccessException</td><td>不允许访问某类异常</td></tr><tr><td>InstantiationException</td><td>当应用程序试图使用Class类中的newInstance()方法创建一个类的实例，而指定的类对象无法被实例化时，抛出该异常</td></tr><tr><td>EOFException</td><td>文件已结束异常</td></tr><tr><td>FileNotFoundException</td><td>文件未找到异常</td></tr></tbody></table><h2 id="捕捉异常"><a href="#捕捉异常" class="headerlink" title="捕捉异常"></a>捕捉异常</h2><p>异常捕捉有两种，自动捕捉异常（系统自带）、try-catch 语句捕捉异常 </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>   被捕获代码的区块<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型 e<span class="token punctuation">)</span><span class="token punctuation">{</span>   对异常处理的区块<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型 e<span class="token punctuation">)</span><span class="token punctuation">{</span>   对异常处理的区块<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型 e<span class="token punctuation">)</span><span class="token punctuation">{</span>   对异常处理的区块<span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>    最后运行的区块<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>try：语句用来存放可能发生异常的语句<br>catch：激发被捕获的异常类型<br>finally：异常处理的最后运行的区域</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//输出异常错误性质</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//输出异常类型和性质</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//输出异常类型、性质、栈层（出现位置不定）</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"END....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">/ by zero--java.lang.ArithmeticException: / by zero----END.....java.lang.ArithmeticException: / by zero    at Demo.main(Demo.java:5)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>finally语句不会执行情况：</strong></p><ul><li>在finally语句块中发生了异常</li><li>在前面的代码中使用了 <code>System.exit()</code>（退出程序）</li><li>程序所在的线程死亡（运行时终止程序）</li><li>关闭CPU</li></ul></blockquote><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><p>创建API中没有的异常，自定条件的异常</p><blockquote><p><strong>使用步骤：</strong> </p><ol><li>创建自定义异常类</li><li>在方法中通过 throw 关键字 抛出异常对象</li><li>如果在当前抛出异常的方法中处理异常，可以使用 try-catch语句块捕获并处理，否则在方法的声明处通过 throws关键字 指明要抛出给方法调用者的异常</li><li>在出现异常方法的调用者中捕获并处理异常</li></ol></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> 自定义异常类 <span class="token keyword">extends</span> 已有的异常类<span class="token punctuation">{</span>···<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        orangutan xingxing <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">orangutan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bird niao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        key yaoshi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//No.1</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>xingxing <span class="token keyword">instanceof</span> <span class="token class-name">Animals</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token string">"非动物"</span><span class="token operator">+</span>xingxing<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CustomException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//No.2</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>niao <span class="token keyword">instanceof</span> <span class="token class-name">Animals</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token string">"非动物"</span><span class="token operator">+</span>niao<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CustomException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//No.3 类型错误</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token string">"非动物："</span><span class="token operator">+</span>yaoshi<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CustomException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//动物类</span><span class="token keyword">class</span> <span class="token class-name">Animals</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//猩猩</span><span class="token keyword">class</span> <span class="token class-name">orangutan</span> <span class="token keyword">extends</span> <span class="token class-name">Animals</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//鸟</span><span class="token keyword">class</span> <span class="token class-name">bird</span> <span class="token keyword">extends</span> <span class="token class-name">Animals</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//物品类</span><span class="token keyword">class</span> <span class="token class-name">Items</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//钥匙</span><span class="token keyword">class</span> <span class="token class-name">key</span> <span class="token keyword">extends</span> <span class="token class-name">Items</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//自定义异常类 继承异常类</span><span class="token keyword">class</span> <span class="token class-name">CustomException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">CustomException</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">开始1开始2CustomException: 非动物：key@133314b    at Demo.main(Demo.java:30)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法中抛出异常"><a href="#方法中抛出异常" class="headerlink" title="方法中抛出异常"></a>方法中抛出异常</h2><p>方法出现异常，又不想在当前方法处理，则可以用 throws、throw 关键字 在方法中抛出异常</p><h3 id="throws-关键字抛出异常"><a href="#throws-关键字抛出异常" class="headerlink" title="throws 关键字抛出异常"></a>throws 关键字抛出异常</h3><p>throws将代码中可能产生的异常交给上一级处理，直到处理异常 try-catch 语句调用 ，否则调用的那个方法也要加抛出的关键字已经方法类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> 方法名<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> 异常类型<span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>异常类型n<span class="token punctuation">{</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>被调用时：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型 e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//抛出中断异常</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">,</span>ArithmeticException<span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>           Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               i<span class="token operator">-=</span><span class="token number">5</span><span class="token punctuation">;</span>               <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span>i<span class="token punctuation">;</span>           <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取方法中的异常</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//终止异常</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show()方法抛出终止异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//算术异常</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show()方法抛出算术异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//异常</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show()方法抛出异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">012345show()方法抛出算术异常<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="throw-关键字抛出异常"><a href="#throw-关键字抛出异常" class="headerlink" title="throw 关键字抛出异常"></a>throw 关键字抛出异常</h3><p>手动制造异常。程序运行到throw语句时立即终止程序，不会执行后面的语句</p><p>使用throw抛出异常的前提，必须要有try-catch语句包围捕捉异常</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//强制中断</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"b 为 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> s <span class="token operator">=</span> a <span class="token operator">/</span> b <span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text"><code class="language-text">java.lang.NullPointerException: b 为 0    at Demo2.main(Demo2.java:7)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="异常的使用原则"><a href="#异常的使用原则" class="headerlink" title="异常的使用原则"></a>异常的使用原则</h2><p>提高程序的安全性，控制流程状况以及异常修复！</p><ul><li>不要怱略捕捉到的异常</li><li>不要过度使用异常</li><li>不要使用过于庞大的 try-catch语句</li><li>子类抛出的异常不能比父类高级（RuntimeException不受此约束）</li><li>一个方法被覆盖时，覆盖它的方法必须抛出相同的异常或异常的子类</li></ul><h1 id="Swing-程序设计"><a href="#Swing-程序设计" class="headerlink" title="Swing 程序设计"></a>Swing 程序设计</h1><p>Swing为GUI(图形用户界面)提供开发工具包，使用Swing开发的应用程序可以统一应用程序在不同平台上运行的GUI组件显示风格，因为在Swing组件可以跨平台指定统一风格和外观</p><blockquote><p><strong>特点：</strong></p><ul><li>轻量级组件</li><li>可插入外观组件</li></ul></blockquote><h2 id="Swing包"><a href="#Swing包" class="headerlink" title="Swing包"></a>Swing包</h2><p>使用Swing组件前，先了解层次结构和继承关系</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java03.png" style="zoom:80%;" /><p><strong>常用的Swing组件</strong></p><table><thead><tr><th>组件名称</th><th>说明</th></tr></thead><tbody><tr><td>JButton（按钮）</td><td>按钮可以带些图片或文字</td></tr><tr><td>JCheckBox（多选按钮）</td><td>复选框组件</td></tr><tr><td>JComBox（下拉框）</td><td>代表下拉列表框，可以在下拉显示区域显示多个选项</td></tr><tr><td>JFrame（窗体）</td><td>Swing的框架类</td></tr><tr><td>JDialog（对话框）</td><td>Swing版本的对话框</td></tr><tr><td>JLable（标签）</td><td>标签组件（显示文字的容器）</td></tr><tr><td>JRadioButton（单选按钮）</td><td>Swing的单选按钮</td></tr><tr><td>JList（列表框）</td><td>显示一系列条目的组件</td></tr><tr><td>JTextField（文本框）</td><td>文本框</td></tr><tr><td>JPasswordField（密码框）</td><td>密码框</td></tr><tr><td>JTextArea（文本域）</td><td>Swing的文本区域</td></tr><tr><td>JOptionPane（小对话框）</td><td>对话框</td></tr><tr><td>JPanel（面板）</td><td>单纯的容器，无属性</td></tr></tbody></table><h2 id="窗体"><a href="#窗体" class="headerlink" title="窗体"></a>窗体</h2><p><strong>窗体常用方法</strong></p><p><font color = #05ffdc>setTitle（String title） </font> 窗体标题为title字符串</p><p><font color = #05ffdc>setDefaultCloseOperation（int a） </font> 窗体关闭规则</p><p><font color = #05ffdc>setSize（width,height）</font> 窗体大小</p><p><font color = #05ffdc>setLocation（x，y）</font>  窗体坐标</p><p><font color = #05ffdc>setBounds（x，y, width , height）</font>  窗体坐标，大小 （像素）</p><p><font color = #05ffdc>setVisible（boolean b）</font> 窗体是否显示，默认不可见（false）</p><p><font color = #05ffdc>setResizable（boolean b）</font> 窗体是否可以调整大小，默认可以调整大小</p><p><font color = #05ffdc>setContentPane（容器） </font> 重新加载容器</p><p><font color = #05ffdc>getContentPane（）</font> 获取窗体容器</p><h3 id="JFrame-窗体"><a href="#JFrame-窗体" class="headerlink" title="JFrame 窗体"></a>JFrame 窗体</h3><blockquote><p><strong>Class JFrame</strong></p><p>java.lang.Object<br>java.awt.Component<br>java.awt.Container<br>java.awt.Window<br>java.awt.Frame<br>javax.swing.JFrame </p></blockquote><p>JFrame窗体拥有计算机基本组件，最大化，最小化，关闭等组件</p><p><strong>构造方法</strong></p><p><font color = #05ffdc>JFrame（）</font> </p><p><font color = #05ffdc>JFrame（Starting title）</font> </p><blockquote><p><strong>title：</strong>窗体标题</p></blockquote><p><strong>常用方法</strong></p><p><font color = #05ffdc> </font> <font color = #05ffdc>JFrame.getX（） </font> 获取X坐标</p><p> <font color = #05ffdc>JFrame.getY（） </font> 获取Y坐标</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//123为标题</span>        JFrame f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        f<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗口关闭规则</span>        f<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        f.setSize(330,220);//大小</span><span class="token comment" spellcheck="true">//        f.setLocation(202,202);//坐标</span>        <span class="token comment" spellcheck="true">//坐标，大小 （x , y , width , height）单位：像素</span>        f<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span> <span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取窗体容器</span>        Container c <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//背景颜色</span>        c<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>CYAN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//标签内容</span>        JLabel l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"这是一个窗体！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加组件</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗口关闭规则</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        f.setSize(330,220);//大小</span><span class="token comment" spellcheck="true">//        f.setLocation(202,202);//坐标</span>        <span class="token comment" spellcheck="true">//坐标，大小 （x , y , width , height）单位：像素</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span> <span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取窗体容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//背景颜色</span>        c<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>CYAN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//标签内容</span>        JLabel l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"这是一个窗体！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加组件</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//删除组件</span>        c<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//验证容器中的组件</span>        c<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//重新载入容器</span>        <span class="token function">setContentPane</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java01.png" style="zoom: 67%;" /><h3 id="JDialog-窗体"><a href="#JDialog-窗体" class="headerlink" title="JDialog 窗体"></a>JDialog 窗体</h3><blockquote><p><strong>Class JDialog</strong></p><p>java.lang.Object<br>java.awt.Component<br>java.awt.Container<br>java.awt.Window<br>java.awt.Dialog<br>javax.swing.JDialog </p></blockquote><p>JDialog窗体是Swing的对话框，是从一个窗体中弹出另一个窗体，它继承了AWT组件中的</p><p>在一个类继承窗体类时，可以在构造方法中使用 super关键字 可调用回窗体类的参数填充</p><p><strong>构造方法</strong></p><p><font color = #05ffdc>JDialog（） </font> </p><p><font color = #05ffdc>JDialog（Frame f） </font> </p><p><font color = #05ffdc>JDialog（Frame f , boolean model） </font> </p><p><font color = #05ffdc>JDialog（Frame f , String title） </font>  </p><p><font color = #05ffdc>JDialog（Frame f , String title , boolean model） </font> </p><blockquote><p><strong>f：</strong>需要指定的父窗体<br><strong>model：</strong>指定类型的对话框（是否约束父窗体）<br><strong>title：</strong>对话框的标题</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JFrame父窗体类</span><span class="token keyword">class</span> <span class="token class-name">Parentform</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    JButton btn<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为父类添加标题</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"JFrame父窗体的标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体关闭规则</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">230</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">340</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取窗体容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//布局设置，使用流布局</span>        c<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使类的btn共享到以下类输出</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>btn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"对话框"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加组件</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> JButton <span class="token function">btn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//输出组件添加动作监听</span>        <span class="token keyword">return</span> btn<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//对话框类</span><span class="token keyword">class</span> <span class="token class-name">Dialog</span> <span class="token keyword">extends</span> <span class="token class-name">JDialog</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Dialog</span><span class="token punctuation">(</span>Parentform p<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//参数顺序： 1.父窗体对象 ， 2.对话框标题 ，3.是否堵塞父窗体</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token string">"123对话框"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取对话框容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对话框添加标签（内容）</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"这是对话框！"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对话框坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">360</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例JFrame父窗体类</span>        Parentform p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加动作监听</span>        p<span class="token punctuation">.</span><span class="token function">btn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//实例对话框类，并获取p父窗体对象</span>                Dialog d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dialog</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//显示对话框</span>                d<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//也可以  p.btn().addActionListener(e -> new Dialog());</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java02.png" style="zoom:67%;" /><h3 id="窗体关闭规则"><a href="#窗体关闭规则" class="headerlink" title="窗体关闭规则"></a>窗体关闭规则</h3><p>窗体的关闭规则是需要到 setDefaultCloseOperation（）方法来选择关闭方式的</p><table><thead><tr><th>关闭类型</th><th>说明</th><th>定义</th></tr></thead><tbody><tr><td>DO_NOTHING_ON_CLOSE</td><td>无任何操作</td><td>0</td></tr><tr><td>HIDE_ON_CLOSE（默认）</td><td>隐藏窗体，不停止程序</td><td>1</td></tr><tr><td>DISPOSE_ON_CLOSE</td><td>释放窗体资源</td><td>2</td></tr><tr><td>EXIT_ON_CLOSE</td><td>隐藏窗体，停止程序</td><td>3</td></tr></tbody></table><h2 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h2><h3 id="JLable-标签"><a href="#JLable-标签" class="headerlink" title="JLable 标签"></a>JLable 标签</h3><blockquote><p><strong>Class JLabel</strong></p><p>java.lang.Object<br>java.awt.Component<br>java.awt.Container<br>javax.swing.JComponent<br>javax.swing.JLabel </p></blockquote><p>可以显示只读文本、图像，但不能产生任何类型的事件，只是简单的显示文本和图像，还可以设置标签上文本的对齐方式</p><p><strong>构造方法</strong></p><p><font color = #05ffdc>JLable（） </font> </p><p><font color = #05ffdc>JLable（String text） </font> </p><p><font color = #05ffdc>JLable（Icon icon） </font> </p><p><font color = #05ffdc>JLable（Icon icon , int aligment）  </font> </p><p><font color = #05ffdc>JLable（String text , int aligment） </font> </p><p><font color = #05ffdc>JLable（String text , Icon icon , int aligment） </font>  </p><blockquote><p><strong>text：</strong>标识性，文字标签<br><strong>icon：</strong>图标对象<br><strong>aligment：</strong>设置对齐方式</p></blockquote><p><strong>常用方法</strong></p><table><thead><tr><th>修饰符、类型</th><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>void</td><td><font color = #05ffdc>setText（String text） </font></td><td>定义组件内容（更改）</td></tr><tr><td>String</td><td><font color = #05ffdc>getText（） </font></td><td>返回标签显示的文本字符串</td></tr><tr><td>void</td><td><font color = #05ffdc>setIcon（Icon icon） </font></td><td>添加图片文件</td></tr><tr><td>void</td><td><font color = #05ffdc>setSize（int With ，int Height）</font></td><td>标签大小设置</td></tr></tbody></table><p>￼构造方法的实践例子：（图片文件在src路径里）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JFrame父窗体类</span><span class="token keyword">class</span> <span class="token class-name">Parentform</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为父类添加标题</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"JFrame父窗体的标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体关闭规则</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">620</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取窗体容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//布局设置，使用流布局</span>        c<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JLabel no1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JLabel no2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"标签内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取图片的方法（方法1）</span>        <span class="token comment" spellcheck="true">//获取当前类所在的路径</span>        URL url <span class="token operator">=</span> Demo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取相应路径下的文件（图片）</span>        Icon icon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        JLabel no3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span>icon<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取图片的（方法2）</span>        Icon icon2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"src/1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JLabel no4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"显示图片"</span><span class="token punctuation">,</span>icon2<span class="token punctuation">,</span> SwingConstants<span class="token punctuation">.</span>LEFT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//更改标签内容</span>        no2<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"更改标签内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取标签内容</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>no2<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//在窗体显示图片路径</span>        JLabel jl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"获取图片路径："</span><span class="token operator">+</span>url<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jl<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//自选打开</span><span class="token comment" spellcheck="true">//        c.add(no1);</span><span class="token comment" spellcheck="true">//        c.add(no2);</span><span class="token comment" spellcheck="true">//        c.add(no3);</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>no4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//显示在后面或者刷新组件</span>        <span class="token comment" spellcheck="true">//容器组件重新验证</span>        c<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java05.png" style="zoom:67%;" /><blockquote><p><strong>注意：</strong></p><p>java.lang.Class类中的 getResource（）方法 可以获取资源文件的URL路径</p></blockquote><h3 id="图标使用"><a href="#图标使用" class="headerlink" title="图标使用"></a>图标使用</h3><p><strong>创建图标</strong></p><p>创建图标使用到 java.awt.Graphics类 提供的功能来实现</p><p>在Swing中是通过Icon接口来实现创建图标，使用Icon接口必须实现以下3个方法：</p><table><thead><tr><th>修饰符、类型</th><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>int</td><td><font color = #05ffdc>getIconHeight（） </font></td><td>获取图标高</td></tr><tr><td>int</td><td><font color = #05ffdc>getIconWidth（） </font></td><td>获取图标宽</td></tr><tr><td>void</td><td><font color = #05ffdc>paintIcon（Component c, Graphics g, int x, int y）</font></td><td>指定坐标位置画图</td></tr></tbody></table><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JFrame父窗体类</span><span class="token keyword">class</span> <span class="token class-name">Parentform</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为父类添加标题</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"JFrame父窗体的标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体关闭规则</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">230</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取窗体容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//绘图图标类</span><span class="token comment" spellcheck="true">//引入Icon接口</span><span class="token keyword">class</span> <span class="token class-name">DrawIcon</span> <span class="token keyword">implements</span> <span class="token class-name">Icon</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 声明图标的宽</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> W<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 声明图标的高</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> H<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取数据</span>    <span class="token keyword">public</span> <span class="token function">DrawIcon</span><span class="token punctuation">(</span><span class="token keyword">int</span> W <span class="token punctuation">,</span> <span class="token keyword">int</span> H<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>W <span class="token operator">=</span> W <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>H <span class="token operator">=</span> H <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 实现paintIcon()方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paintIcon</span><span class="token punctuation">(</span>Component c<span class="token punctuation">,</span> Graphics g<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 绘制一个圆形</span>        g<span class="token punctuation">.</span><span class="token function">fillOval</span><span class="token punctuation">(</span>x <span class="token punctuation">,</span> y <span class="token punctuation">,</span> W <span class="token punctuation">,</span> H<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getIconWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>W<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getIconHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>H<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DrawIcon icon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DrawIcon</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建一个标签，并设置标签上的文字在标签正中间</span>        JLabel j <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"测试"</span><span class="token punctuation">,</span> icon<span class="token punctuation">,</span> SwingConstants<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        Parentform jf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jf<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java06.png" style="zoom:67%;" /><h2 id="常用布局管理器"><a href="#常用布局管理器" class="headerlink" title="常用布局管理器"></a>常用布局管理器</h2><p>布局管理就是用于指定组件的摆放位置的。每种布局管理器都有自己的摆放风格。管理组件在容器中的位置和大小</p><p>需要该方法来定义窗体或面板布局</p><pre class="line-numbers language-java"><code class="language-java">窗体或面板的对象<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span>布局类型<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="绝对布局"><a href="#绝对布局" class="headerlink" title="绝对布局"></a>绝对布局</h3><p>绝对布局是指定组件在容器中的固定大小和位置</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JFrame父窗体类</span><span class="token keyword">class</span> <span class="token class-name">Parentform</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为父类添加标题</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"JFrame父窗体的标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体关闭规则</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">230</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取窗体容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取消默认布局 ， 更改为绝对布局</span>        <span class="token function">setLayout</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建按钮组件</span>        JButton b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮1"</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//给按钮组件添加坐标、大小</span>        b1<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b2<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">92</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加按钮组件</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Parentform jf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java07.png" style="zoom:67%;" /><blockquote><p><strong>注意：</strong></p><p>绝对布局的窗口组件大小都是固定的，不随窗体大小更改而变化</p><p>组件坐标是以窗体左上角为基点的</p></blockquote><h3 id="FlowLayout-流布局"><a href="#FlowLayout-流布局" class="headerlink" title="FlowLayout 流布局"></a>FlowLayout 流布局</h3><blockquote><p><strong>Class FlowLayout</strong></p><p>java.lang.Object<br>java.awt.FlowLayout </p></blockquote><p>流布局管理器 ，像流水一样从左到右摆放组件，直到占完所有空间，组件是默认居中排列</p><p><strong>构造方法</strong></p><p><font color = #05ffdc>FlowLayout（） </font> </p><p><font color = #05ffdc>FlowLayout（int alignment） </font> </p><p><font color = #05ffdc>FlowLayout（int alignment , int horizGap , int vertGap）  </font></p><blockquote><p><strong>alignment：</strong>摆放方式<br><strong>horizGap：</strong>组件之间的水平间距<br><strong>vertGap：</strong>组件之间的垂直间距</p></blockquote><table><thead><tr><th>alignment参数的摆放设置</th><th>说明</th><th>定义</th></tr></thead><tbody><tr><td>FlowLayout.LEFT</td><td>左对齐排列</td><td>0</td></tr><tr><td>FlowLayout.CENTER</td><td>居中排列</td><td>1</td></tr><tr><td>FlowLayout.RIGHT</td><td>右对齐排列</td><td>2</td></tr></tbody></table><p><strong>horizGap ：</strong> 组件与组件之间的水平间距（像素）</p><p><strong>vertGap ：</strong> 组件与组件之间的垂直间距（像素）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JFrame父窗体类</span><span class="token keyword">class</span> <span class="token class-name">Parentform</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为父类添加标题</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"JFrame父窗体的标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体关闭规则</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">230</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取窗体容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//流布局</span>        <span class="token comment" spellcheck="true">//参数测试，自行选择</span><span class="token comment" spellcheck="true">//        setLayout(new FlowLayout());</span><span class="token comment" spellcheck="true">//        setLayout(new FlowLayout(0));//左对齐</span><span class="token comment" spellcheck="true">//        setLayout(new FlowLayout(1));//居中对齐（默认）</span><span class="token comment" spellcheck="true">//        setLayout(new FlowLayout(2));//右对齐</span>        <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//居中对齐（默认）</span>        <span class="token comment" spellcheck="true">//创建添加按钮组件</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java08.png" style="zoom:67%;" /><h3 id="BorderLayout-边界布局"><a href="#BorderLayout-边界布局" class="headerlink" title="BorderLayout 边界布局"></a>BorderLayout 边界布局</h3><blockquote><p><strong>Class BorderLayout</strong></p><p>java.lang.Object<br>java.awt.BorderLayout </p></blockquote><p>边界布局把容器的的布局分为五个位置：上下左右中5个区域 。设置该布局管理器是可无视，因默认是边界布局</p><p>在容器add（）方法添加组件时可设置区域</p><table><thead><tr><th>成员变量</th><th>说明</th></tr></thead><tbody><tr><td>BorderLayout.NORTH</td><td>顶端</td></tr><tr><td>BorderLayout.SOUTH</td><td>底端</td></tr><tr><td>BorderLayout.EAST</td><td>右端</td></tr><tr><td>BorderLayout.WEST</td><td>左端</td></tr><tr><td>BorderLayout.CENTER</td><td>中间</td></tr></tbody></table><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JFrame父窗体类</span><span class="token keyword">class</span> <span class="token class-name">Parentform</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为父类添加标题</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"JFrame父窗体的标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体关闭规则</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">230</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取窗体容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置边界布局</span>        c<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可被注释，因本身就是边界布局</span>        <span class="token comment" spellcheck="true">//边界布局</span>        JButton                b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"中"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"东"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                b3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"南"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                b4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"西"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                b5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"北"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b1 <span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b2 <span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>EAST<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b3 <span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>SOUTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b4 <span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>WEST<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b5 <span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"覆盖中"</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java09.png" style="zoom:67%;" /><h3 id="GridLayout-网格布局"><a href="#GridLayout-网格布局" class="headerlink" title="GridLayout 网格布局"></a>GridLayout 网格布局</h3><blockquote><p><strong>Class GridLayout</strong></p><p>java.lang.Object<br>java.awt.GridLayout </p></blockquote><p>网格布局管理器是将容器划分为网格，组件是按照 行 和 列 进行布局</p><p>每个组件大小一样，排序默认从左到右，从上到下的顺序排列，窗体大小的改变，组件也会跟随改变</p><p><strong>构造方法</strong></p><p><font color = #05ffdc>GridLayout（int rows , int columns）</font> </p><p><font color = #05ffdc>GridLayout（int rows , int columns , int horizGap , int veritGap） </font> </p><blockquote><p><strong>rows</strong>： 行个数<br><strong>columns</strong>：列个数<br><strong>horizGap</strong>：组件水平间距<br><strong>veritGap</strong>：组件垂直间距</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JFrame父窗体类</span><span class="token keyword">class</span> <span class="token class-name">Parentform</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为父类添加标题</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"JFrame父窗体的标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体关闭规则</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">230</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取窗体容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置</span><span class="token comment" spellcheck="true">//        c.setLayout(new GridLayout(3,4));//3行4列（布局满无间隙）</span>        <span class="token comment" spellcheck="true">//3行4列，组件间隙为12px（行数，列数，水平，垂直）</span>        c<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java10.png" style="zoom:67%;" /><h3 id="GridBagLayout-网格组布局"><a href="#GridBagLayout-网格组布局" class="headerlink" title="GridBagLayout 网格组布局"></a>GridBagLayout 网格组布局</h3><blockquote><p><strong>Class GridBagLayout</strong></p><p>java.lang.Object<br>java.awt.GridBagLayout </p></blockquote><p>实现了动态矩形网格，由无限个矩形单元格组成，每行每列的高宽以行列最大像素的组件为准，每个组件都与GridBagConstraints类关联（用来约束）</p><p>以下是使用流程：</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java11.png" style="zoom:67%;" /><p>import java.awt.GridBagConstraints类 为使用 GridBagLayou类布局 的约束</p><blockquote><p><strong>Class GridBagConstraints</strong></p><p>java.lang.Object<br>java.awt.GridBagConstraints </p></blockquote><p>GridBagConstraints约束 </p><table><thead><tr><th>GridBagConstraints属性</th><th>说明</th></tr></thead><tbody><tr><td><font color = #05ffdc>gridx </font></td><td>组件坐标X（网格）</td></tr><tr><td><font color = #05ffdc>gridy </font></td><td>组件坐标Y（网格）</td></tr><tr><td><font color = #05ffdc>gridwidth </font></td><td>组件占用行数</td></tr><tr><td><font color = #05ffdc>gridheight </font></td><td>组件占用列数</td></tr><tr><td><font color = #05ffdc>anchor </font></td><td>组件在的方位</td></tr><tr><td><font color = #05ffdc>fill </font></td><td>组件填充方式</td></tr><tr><td><font color = #05ffdc>insets </font></td><td>组件与单元格边缘的最小距离</td></tr><tr><td><font color = #05ffdc>ipadx </font></td><td>组件的首先大小 X</td></tr><tr><td><font color = #05ffdc>ipady </font></td><td>组件的首先大小 Y</td></tr><tr><td><font color = #05ffdc>weightx </font></td><td>单元格最大宽</td></tr><tr><td><font color = #05ffdc>weighty </font></td><td>单元格最大高</td></tr></tbody></table><p>以下代码是自选GridBagConstraints属性约束测试</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JFrame父窗体类</span><span class="token keyword">class</span> <span class="token class-name">Parentform</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//添加彩色面板</span>    JPanel p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    JPanel p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    JPanel p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    JPanel p4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    JPanel p5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Container c<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为父类添加标题</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"JFrame父窗体的标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体关闭规则</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">230</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">550</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//颜色面板</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>p1<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>CYAN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>p2<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>GREEN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>p3<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>CYAN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>p4<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>GREEN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>p5<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>CYAN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//坐标矩阵</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            GridBagConstraints g2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> i<span class="token punctuation">;</span>            g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            g2<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            g2<span class="token punctuation">.</span>gridy <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//空格用来填充</span>            c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"   "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"    "</span><span class="token punctuation">)</span><span class="token punctuation">,</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"   "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"    "</span><span class="token punctuation">)</span><span class="token punctuation">,</span>g2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//组件约束类</span><span class="token keyword">class</span> <span class="token class-name">Components</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//颜色面板调用约束方法</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">JPl1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridwidth <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridheight <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>fill <span class="token operator">=</span> GridBagConstraints<span class="token punctuation">.</span>BOTH<span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">JPl2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridwidth <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridheight <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>fill <span class="token operator">=</span> GridBagConstraints<span class="token punctuation">.</span>BOTH<span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">JPl3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridwidth <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridheight <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>fill <span class="token operator">=</span> GridBagConstraints<span class="token punctuation">.</span>BOTH<span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">JPl4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridwidth <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridheight <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>fill <span class="token operator">=</span> GridBagConstraints<span class="token punctuation">.</span>BOTH<span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//weightx ，weighty属性（专属颜色面板）</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">JPl5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>fill <span class="token operator">=</span> GridBagConstraints<span class="token punctuation">.</span>BOTH<span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">JPl6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>fill <span class="token operator">=</span> GridBagConstraints<span class="token punctuation">.</span>BOTH<span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">JPl7</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>fill <span class="token operator">=</span> GridBagConstraints<span class="token punctuation">.</span>BOTH<span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">JPl8</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>fill <span class="token operator">=</span> GridBagConstraints<span class="token punctuation">.</span>BOTH<span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">JPl9</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>fill <span class="token operator">=</span> GridBagConstraints<span class="token punctuation">.</span>BOTH<span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//组件约束方法</span>    <span class="token comment" spellcheck="true">//GridBagConstraints约束测试（1）</span>    <span class="token comment" spellcheck="true">//gridx和gridy属性</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//GridBagConstraints约束测试（2）</span>    <span class="token comment" spellcheck="true">//gridwidth和gridheight属性</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridwidth <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridheight <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridwidth <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridheight <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridwidth <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridheight <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//GridBagConstraints约束测试（3）</span>    <span class="token comment" spellcheck="true">//fill属性</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC7</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridwidth <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridheight <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//默认无填充NONE</span>        g<span class="token punctuation">.</span>fill <span class="token operator">=</span> GridBagConstraints<span class="token punctuation">.</span>NONE<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//(0)</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridwidth <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridheight <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//水平填充HORIZONTAL</span>        g<span class="token punctuation">.</span>fill <span class="token operator">=</span> GridBagConstraints<span class="token punctuation">.</span>HORIZONTAL<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//(2)</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC9</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridwidth <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridheight <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//垂直填充VERTICAL</span>        g<span class="token punctuation">.</span>fill <span class="token operator">=</span> GridBagConstraints<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//(3)</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC10</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridwidth <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridheight <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//填充BOTH</span>        g<span class="token punctuation">.</span>fill <span class="token operator">=</span> GridBagConstraints<span class="token punctuation">.</span>BOTH<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//(1)</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//GridBagConstraints约束测试（4）</span>    <span class="token comment" spellcheck="true">//anchor属性</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC11</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridwidth <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridheight <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//左上</span>        g<span class="token punctuation">.</span>anchor <span class="token operator">=</span> GridBagConstraints<span class="token punctuation">.</span>NORTHWEST<span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC12</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridwidth <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridheight <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//右下</span>        g<span class="token punctuation">.</span>anchor <span class="token operator">=</span> GridBagConstraints<span class="token punctuation">.</span>SOUTHEAST<span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC13</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridwidth <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridheight <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//右</span>        g<span class="token punctuation">.</span>anchor <span class="token operator">=</span> GridBagConstraints<span class="token punctuation">.</span>EAST<span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC14</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridwidth <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridheight <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//下</span>        g<span class="token punctuation">.</span>anchor <span class="token operator">=</span> GridBagConstraints<span class="token punctuation">.</span>SOUTH<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//(1)</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//GridBagConstraints约束测试（5）</span>    <span class="token comment" spellcheck="true">//insets属性</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC15</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置边距距离</span>        g<span class="token punctuation">.</span>insets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Insets</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置边距距离</span>        g<span class="token punctuation">.</span>insets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Insets</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//GridBagConstraints约束测试（6）</span>    <span class="token comment" spellcheck="true">//ipadx , ipady 属性</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC17</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件大小</span>        g<span class="token punctuation">.</span>ipadx <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>ipady <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC18</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件大小</span>        g<span class="token punctuation">.</span>ipadx <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>ipady <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//GridBagConstraints约束测试（6）</span>    <span class="token comment" spellcheck="true">//weightx , weighty 属性</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC19</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置单元格最大宽高</span>        g<span class="token punctuation">.</span>weightx <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>weighty <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC20</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置单元格最大宽高</span>        g<span class="token punctuation">.</span>weightx <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>weighty <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC21</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置单元格最大宽高</span>        g<span class="token punctuation">.</span>weightx <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>weighty <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC22</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置单元格最大宽高</span>        g<span class="token punctuation">.</span>weightx <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>weighty <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> GridBagConstraints <span class="token function">GBC23</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化约束条件</span>        GridBagConstraints g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridBagConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置组件坐标位置</span>        g<span class="token punctuation">.</span>gridx <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>gridy <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置单元格最大宽高</span>        g<span class="token punctuation">.</span>weightx <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>weighty <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化JFrame窗体类</span>        Parentform jf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例化组件约束类</span>        Components zj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Components</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建jf窗体容器</span>        Container c <span class="token operator">=</span> jf<span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置容器布局为网格组布局</span>        c<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridBagLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//坐标矩阵</span>        jf<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//自选约束测试</span>        <span class="token comment" spellcheck="true">//约束测试（1）</span>        <span class="token comment" spellcheck="true">//添加组件 和 组件约束</span>        <span class="token comment" spellcheck="true">//gridx和gridy属性</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮1"</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> zj<span class="token punctuation">.</span><span class="token function">GBC1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮2"</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> zj<span class="token punctuation">.</span><span class="token function">GBC2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮3"</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> zj<span class="token punctuation">.</span><span class="token function">GBC3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//约束测试（2）</span>        <span class="token comment" spellcheck="true">//gridwidth和gridheight属性</span><span class="token comment" spellcheck="true">//        c.add(new JButton("按钮1") , zj.GBC4());</span><span class="token comment" spellcheck="true">//        c.add(new JButton("按钮2") , zj.GBC5());</span><span class="token comment" spellcheck="true">//        c.add(new JButton("按钮3") , zj.GBC6());</span><span class="token comment" spellcheck="true">//        //添加颜色面板</span><span class="token comment" spellcheck="true">//        c.add(jf.p1,zj.JPl1());</span><span class="token comment" spellcheck="true">//        c.add(jf.p2,zj.JPl2());</span><span class="token comment" spellcheck="true">//        c.add(jf.p3,zj.JPl3());</span>        <span class="token comment" spellcheck="true">//约束测试（3）</span>        <span class="token comment" spellcheck="true">//fill属性</span><span class="token comment" spellcheck="true">//        c.add(new JButton("按钮1") , zj.GBC7());</span><span class="token comment" spellcheck="true">//        c.add(new JButton("按钮2") , zj.GBC8());</span><span class="token comment" spellcheck="true">//        c.add(new JButton("按钮3") , zj.GBC9());</span><span class="token comment" spellcheck="true">//        c.add(new JButton("按钮3") , zj.GBC10());</span>        <span class="token comment" spellcheck="true">//约束测试（4）</span>        <span class="token comment" spellcheck="true">//anchor属性</span><span class="token comment" spellcheck="true">//        c.add(new JButton("按钮1") , zj.GBC11());</span><span class="token comment" spellcheck="true">//        c.add(new JButton("按钮2") , zj.GBC12());</span><span class="token comment" spellcheck="true">//        c.add(new JButton("按钮3") , zj.GBC13());</span><span class="token comment" spellcheck="true">//        c.add(new JButton("按钮3") , zj.GBC14());</span><span class="token comment" spellcheck="true">//        //添加颜色面板</span><span class="token comment" spellcheck="true">//        c.add(jf.p1,zj.JPl1());</span><span class="token comment" spellcheck="true">//        c.add(jf.p2,zj.JPl2());</span><span class="token comment" spellcheck="true">//        c.add(jf.p3,zj.JPl3());</span><span class="token comment" spellcheck="true">//        c.add(jf.p4,zj.JPl4());</span>        <span class="token comment" spellcheck="true">//约束测试（5）</span>        <span class="token comment" spellcheck="true">//inset属性</span><span class="token comment" spellcheck="true">//        c.add(new JButton("按钮1") , zj.GBC15());</span><span class="token comment" spellcheck="true">//        c.add(new JButton("按钮2") , zj.GBC16());</span>        <span class="token comment" spellcheck="true">//约束测试（6）</span>        <span class="token comment" spellcheck="true">//ipadx , ipady 属性</span><span class="token comment" spellcheck="true">//        c.add(new JButton("按钮1") , zj.GBC17());</span><span class="token comment" spellcheck="true">//        c.add(new JButton("按钮2") , zj.GBC18());</span><span class="token comment" spellcheck="true">//        //添加颜色面板</span><span class="token comment" spellcheck="true">//        c.add(jf.p1,zj.JPl1());</span><span class="token comment" spellcheck="true">//        c.add(jf.p2,zj.JPl2());</span>        <span class="token comment" spellcheck="true">//约束测试（7）</span>        <span class="token comment" spellcheck="true">//weightx , weighty 属性</span><span class="token comment" spellcheck="true">//        c.add(new JButton("x,y:10") , zj.GBC19());</span><span class="token comment" spellcheck="true">//        c.add(new JButton("x :５") , zj.GBC20());</span><span class="token comment" spellcheck="true">//        c.add(new JButton("x : 2") , zj.GBC21());</span><span class="token comment" spellcheck="true">//        c.add(new JButton("y : 5") , zj.GBC22());</span><span class="token comment" spellcheck="true">//        c.add(new JButton("y : 2") , zj.GBC23());</span><span class="token comment" spellcheck="true">//        //添加颜色面板</span><span class="token comment" spellcheck="true">//        c.add(jf.p1,zj.JPl5());</span><span class="token comment" spellcheck="true">//        c.add(jf.p2,zj.JPl6());</span><span class="token comment" spellcheck="true">//        c.add(jf.p3,zj.JPl7());</span><span class="token comment" spellcheck="true">//        c.add(jf.p4,zj.JPl8());</span><span class="token comment" spellcheck="true">//        c.add(jf.p5,zj.JPl9());</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        jf<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="GridBagConstraints属性"><a href="#GridBagConstraints属性" class="headerlink" title="GridBagConstraints属性"></a>GridBagConstraints属性</h4><p><strong>gridx , gridy属性</strong></p><p>该属性用来设置组件起始点所在单元格的索引位置，gridx设置X轴的索引值，gridy设置Y轴的索引值</p><p>该属性的运行结果：</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java12.png" style="zoom:67%;" /><p><strong>gridwidth , gridheight属性</strong></p><p>该属性用来设置组件占用网格组的行数和行数</p><p>该属性的运行结果：</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java13.png" style="zoom:67%;" /><p><strong>fill属性</strong></p><p>该属性用来设置组件填充方式，填充单元格最大的范围</p><table><thead><tr><th>fill属性的静态常量</th><th>说明</th><th>定义数</th></tr></thead><tbody><tr><td>NONE</td><td>不填充（默认）</td><td>0</td></tr><tr><td>HORIZONTAL</td><td>水平填充</td><td>2</td></tr><tr><td>VERTICAL</td><td>垂直填充</td><td>3</td></tr><tr><td>BOTH</td><td>填满</td><td>1</td></tr></tbody></table><p>该属性的运行结果：</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java14.png" style="zoom:67%;" /><p><strong>anchor属性</strong></p><p>该属性用来设置组件在单元格的显示区域</p><table><thead><tr><th>anchor属性的静态常量</th><th>说明</th></tr></thead><tbody><tr><td>NORTHWEST</td><td>左上</td></tr><tr><td>NORTH</td><td>上</td></tr><tr><td>NORTHEAST</td><td>右上</td></tr><tr><td>WEST</td><td>左</td></tr><tr><td>CENTER</td><td>中</td></tr><tr><td>EAST</td><td>右</td></tr><tr><td>SOUTHWEST</td><td>左下</td></tr><tr><td>SOUTH</td><td>下</td></tr><tr><td>SOUTHEAST</td><td>右下</td></tr></tbody></table><p>该属性的运行结果：</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java15.png" style="zoom:67%;" /><p><strong>inset属性</strong></p><p>该属性用来设置组件四周与单元格边缘之间的最小距离</p><p>Insets类 仅限于一个构造方法Insets（int top , int left , int bottom , int right），上左下右来设置边缘距离，默认为没有距离</p><p>该属性的运行结果：</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java16.png" style="zoom:67%;" /><p><strong>ipadx , ipady 属性</strong></p><p>该属性用来修改组件的大小，ipadx修改组件宽度，ipady修改组件的高度，正数为加大，负数为缩小</p><p>该属性的运行结果：</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java17.png" style="zoom:67%;" /><p><strong>weightx , weighty 属性</strong></p><p>该属性用来设置网格组的每一行和每一列对额外空间的分布方式，分配是以百分比形式分配！！</p><p>该属性的运行结果：</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java18.png" style="zoom:67%;" /><h2 id="常用面板"><a href="#常用面板" class="headerlink" title="常用面板"></a>常用面板</h2><h3 id="JPanel-面板"><a href="#JPanel-面板" class="headerlink" title="JPanel 面板"></a>JPanel 面板</h3><blockquote><p><strong>Class JPanel</strong></p><p>java.lang.Object<br>java.awt.Component<br>java.awt.Container<br>javax.swing.JComponent<br>javax.swing.JPanel </p></blockquote><p>JPanel面板可聚集一些组件进行布局，JPanel面板也是容器，因继承 java.awt.Container类 </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JFrame父窗体类</span><span class="token keyword">class</span> <span class="token class-name">Parentform</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为父类添加标题</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"JFrame父窗体的标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体关闭规则</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">230</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">550</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取窗体容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体设置网格布局行2，列2，水平间距10px，垂直间距10px</span>        <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//该面板可视为容器使用</span>        JPanel p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JPanel p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JPanel p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JPanel p4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//为添加面板边框</span>        p1<span class="token punctuation">.</span><span class="token function">setBorder</span><span class="token punctuation">(</span>BorderFactory<span class="token punctuation">.</span><span class="token function">createTitledBorder</span><span class="token punctuation">(</span><span class="token string">"面板1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p2<span class="token punctuation">.</span><span class="token function">setBorder</span><span class="token punctuation">(</span>BorderFactory<span class="token punctuation">.</span><span class="token function">createTitledBorder</span><span class="token punctuation">(</span><span class="token string">"面板2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p3<span class="token punctuation">.</span><span class="token function">setBorder</span><span class="token punctuation">(</span>BorderFactory<span class="token punctuation">.</span><span class="token function">createTitledBorder</span><span class="token punctuation">(</span><span class="token string">"面板3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p4<span class="token punctuation">.</span><span class="token function">setBorder</span><span class="token punctuation">(</span>BorderFactory<span class="token punctuation">.</span><span class="token function">createTitledBorder</span><span class="token punctuation">(</span><span class="token string">"面板4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//面板1 添加标签并居中</span>        p1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"容器测试"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>BorderLayout<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//面板2 添加按钮</span>        p2<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//流布局</span>        p2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p3<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span> <span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p4<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"面板4 测试"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>BorderLayout<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加面板</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java19.png" style="zoom:67%;" /><h3 id="JScrollPane-面板"><a href="#JScrollPane-面板" class="headerlink" title="JScrollPane 面板"></a>JScrollPane 面板</h3><blockquote><p><strong>Class JScrollPane</strong></p><p>java.lang.Object<br>java.awt.Component<br>java.awt.Container<br>javax.swing.JComponent<br>javax.swing.JScrollPane </p></blockquote><p>JScrollPane面板是带滚动条的面板，也是容器，但JScrollPane面板只能放一个组件，不能布局。但可以通过放一个JPanel面板实现多组件插入！！</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JFrame父窗体类</span><span class="token keyword">class</span> <span class="token class-name">Parentform</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为父类添加标题</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"JFrame父窗体的标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体关闭规则</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">230</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">550</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取窗体容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//文本域</span>        JTextArea area <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建添加滚动面板</span>        JScrollPane js <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JScrollPane</span><span class="token punctuation">(</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>js<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java20.png" style="zoom:67%;" /><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>通用抽象窗口工具包（AWT）容器对象是可以包含其他AWT组件的组件</p><p><strong>构造方法</strong></p><p><font color = #05ffdc>Container（） </font> 创建新的容器</p><p><strong>常用方法</strong></p><table><thead><tr><th>修饰符、类型</th><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>Container</td><td><font color = #05ffdc>add（Component comp)</font></td><td>将指定的组件附加到此容器的后面</td></tr><tr><td>Container</td><td><font color = #05ffdc>add（Component comp, int index）</font></td><td>在给定的位置将指定的组件添加到此容器</td></tr><tr><td>void</td><td><font color = #05ffdc>addContainerListener（ContainerListener l） </font></td><td>添加指定的容器侦听器以从此容器接收容器事</td></tr><tr><td>int</td><td><font color = #05ffdc>getComponentCount（） </font></td><td>获取此面板中的组件数量</td></tr><tr><td>component[]</td><td><font color = #05ffdc>getComponents（） </font></td><td>获取此容器中的所有组件</td></tr><tr><td>void</td><td><font color = #05ffdc>validate（） </font></td><td>验证此容器及其所有子组件（刷新组件）</td></tr></tbody></table><h3 id="按钮组件"><a href="#按钮组件" class="headerlink" title="按钮组件"></a>按钮组件</h3><h4 id="JButton-按钮"><a href="#JButton-按钮" class="headerlink" title="JButton 按钮"></a>JButton 按钮</h4><blockquote><p><strong>Class JButton</strong></p><p>java.long.Object<br>java.awt.Component<br>java.awt.Container<br>javax.swing.JComponent<br>javax.swing.AbstractButton<br>javax.swing.JButton</p></blockquote><p>能获取用户点击</p><p><strong>构造方法</strong></p><p><font color = #05ffdc>JButton（） </font> </p><p><font color = #05ffdc>JButton（String text） </font> </p><p><font color = #05ffdc>JButton（lcon icon） </font> </p><p><font color = #05ffdc>JButton（String text , lcon icon） </font> </p><blockquote><p><strong>text：</strong>表示标签，标识性文字、<br><strong>icon：</strong>图标</p></blockquote><p><strong>常用方法</strong></p><p>javax.swing.AbstractButton类 里的方法 ，由于方法较多自行查询API</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionEvent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionListener<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JFrame父窗体类</span><span class="token keyword">class</span> <span class="token class-name">Parentform</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为父类添加标题</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"JFrame父窗体的标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体关闭规则</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">230</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">550</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取窗体容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//网格布局</span>        <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JButton<span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//设置按钮不可用</span>        b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"不可用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置按钮背景色</span>        b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"有背景色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>pink<span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"无边框"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setBorderPainted</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"有边框"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setBorder</span><span class="token punctuation">(</span>BorderFactory<span class="token punctuation">.</span><span class="token function">createLineBorder</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>RED<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Icon icon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"src/imageButtoo.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//给按钮设置图片</span>        b<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span>icon<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//鼠标悬停提示</span>        b<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setToolTipText</span><span class="token punctuation">(</span><span class="token string">"图片按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"可点击"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>Parentform<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"点击按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java21.png" style="zoom:67%;" /><h4 id="JRadioButton-单选按钮"><a href="#JRadioButton-单选按钮" class="headerlink" title="JRadioButton 单选按钮"></a>JRadioButton 单选按钮</h4><blockquote><p><strong>Class JRadioButton</strong></p><p>java.lang.Object<br>java.awt.Component<br>java.awt.Container<br>javax.swing.JComponent<br>javax.swing.AbstractButton<br>javax.swing.JToggleButton<br>javax.swing.JRadioButton </p></blockquote><p>显示圆形图标的按钮，旁边有说明性文字，默认情况单选按钮是单独存在的，因此需要按钮组将多个按钮放在一起使得按钮有单选效果，方法在javax.swing.AbstractButton类中</p><p><strong>构造方法</strong></p><p><font color = #05ffdc>JRadioButton（）</font> </p><p><font color = #05ffdc>JRadioButton（Icon icon）</font> </p><p><font color = #05ffdc>JRadioButton（Icon icon , boolean selected）</font> </p><p><font color = #05ffdc>JRadioButton（String text）</font> </p><p><font color = #05ffdc>JRadioButton（String text , Icon icon）</font> </p><p><font color = #05ffdc>JRadioButton（String text , Icon icon , boolean selected）</font> </p><blockquote><p><strong>icon：</strong>图标对象<br><strong>selected：</strong>是否选中 true：选中<br><strong>text：</strong>标示性文字</p></blockquote><p><strong>按钮组</strong></p><blockquote><p><strong>Class ButtonGroup</strong></p><p>java.lang.Object<br>javax.swing.ButtonGroup </p></blockquote><p>用于为一组按钮设置排除范围，意味着其中一个打开，则关闭组中的其他按钮</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionEvent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionListener<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JFrame父窗体类</span><span class="token keyword">class</span> <span class="token class-name">Parentform</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为父类添加标题</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"JFrame父窗体的标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体关闭规则</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">230</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">550</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取窗体容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JRadioButton no1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JRadioButton</span><span class="token punctuation">(</span><span class="token string">"按钮No.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JRadioButton no2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JRadioButton</span><span class="token punctuation">(</span><span class="token string">"按钮No.2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JRadioButton no3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JRadioButton</span><span class="token punctuation">(</span><span class="token string">"按钮No.3"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//默认选中</span><span class="token comment" spellcheck="true">//        no1.setSelected(true);</span>        <span class="token comment" spellcheck="true">//按钮组</span>        ButtonGroup group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ButtonGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        group<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>no1<span class="token punctuation">)</span><span class="token punctuation">;</span>        group<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>no2<span class="token punctuation">)</span><span class="token punctuation">;</span>        group<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>no3<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>no1<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>no2<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>no3<span class="token punctuation">)</span><span class="token punctuation">;</span>        JButton jb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"打印"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jb<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>no1<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"按钮1："</span><span class="token operator">+</span>no1<span class="token punctuation">.</span><span class="token function">isSelected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>no2<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"按钮1："</span><span class="token operator">+</span>no2<span class="token punctuation">.</span><span class="token function">isSelected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>no3<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"按钮1："</span><span class="token operator">+</span>no3<span class="token punctuation">.</span><span class="token function">isSelected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                group<span class="token punctuation">.</span><span class="token function">clearSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//清除选中（刷新）</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jb<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java22.png" style="zoom:67%;" /><h4 id="JCheckBox-复选框"><a href="#JCheckBox-复选框" class="headerlink" title="JCheckBox 复选框"></a>JCheckBox 复选框</h4><blockquote><p><strong>Class JCheckBox</strong></p><p>java.lang.Object<br>java.awt.Component<br>java.awt.Container<br>javax.swing.JComponent<br>javax.swing.AbstractButton<br>javax.swing.JToggleButton<br>javax.swing.JCheckBox </p></blockquote><p>显示方块的图标，旁边有说明性文字，可多选设置，属性设置来源 javax.swing.AbstractButton类</p><p><strong>构造方法</strong></p><p><font color = #05ffdc>JCheckBox（） </font> </p><p><font color = #05ffdc>JCheckBox（Icon icon , boolean checked） </font> </p><p><font color = #05ffdc>JCheckBox（String text , boolean chccked） </font> </p><blockquote><p><strong>icon：</strong>图标对象<br><strong>checked：</strong>是否选中 true：选中<br><strong>text：</strong>标示性文字</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionEvent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionListener<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JFrame父窗体类</span><span class="token keyword">class</span> <span class="token class-name">Parentform</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为父类添加标题</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"JFrame父窗体的标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体关闭规则</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">230</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">550</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取窗体容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JCheckBox no1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JCheckBox</span><span class="token punctuation">(</span><span class="token string">"按钮No.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JCheckBox no2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JCheckBox</span><span class="token punctuation">(</span><span class="token string">"按钮No.2"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JCheckBox no3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JCheckBox</span><span class="token punctuation">(</span><span class="token string">"按钮No.3"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//默认选中</span><span class="token comment" spellcheck="true">//        no1.setSelected(true);</span><span class="token comment" spellcheck="true">//        no2.setSelected(true);</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>no1<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>no2<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>no3<span class="token punctuation">)</span><span class="token punctuation">;</span>        JButton jb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"打印"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jb<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>no1<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"按钮1："</span><span class="token operator">+</span>no1<span class="token punctuation">.</span><span class="token function">isSelected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>no2<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"按钮1："</span><span class="token operator">+</span>no2<span class="token punctuation">.</span><span class="token function">isSelected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>no3<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"按钮1："</span><span class="token operator">+</span>no3<span class="token punctuation">.</span><span class="token function">isSelected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jb<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java23.png" style="zoom:67%;" /><h3 id="列表组件"><a href="#列表组件" class="headerlink" title="列表组件"></a>列表组件</h3><h4 id="下拉列表框"><a href="#下拉列表框" class="headerlink" title="下拉列表框"></a>下拉列表框</h4><p><strong>JComboBox下拉表框</strong></p><blockquote><p><strong>Class JComboBox<E></strong></p><p>java.lang.Object<br>java.awt.Component<br>java.awt.Container<br>javax.swing.JComponent<br>javax.swing.JComboBox<E> </p></blockquote><p>带条状的显示区，具有下拉功能</p><p><strong>构造方法</strong></p><p><font color = #05ffdc>JComboBox（） </font> </p><p><font color = #05ffdc>JComboBox（ComboBoxModel dataModel） </font> </p><p><font color = #05ffdc>JComboBox（Object[] arrayDate） </font> </p><p><font color = #05ffdc>JComboBox（Vector vector） </font> </p><blockquote><p><strong>dataModel：</strong>模型<br><strong>arrayDate：</strong>数组<br><strong>vector：</strong>动态数组</p><p>Vector 类型实现了一个动态数组。和 数组 很相似，但是两者是不同的：</p><ul><li>Vector 是同步访问的</li><li>Vector 包含了许多传统的方法，这些方法不属于集合框架</li></ul></blockquote><p><strong>JComboBox模型</strong></p><p>将下拉列表框中的项目封装为ComboBoxModel（接口 / 模型）</p><p>初始化JComboBox对象时向上转型为ComboBoxModel 接口类型，必须实现以下两种方法：</p><p><font color = #05ffdc>（void）setSelectedItem（Object item） </font> 用于设置下拉列表框中的选中项</p><p><font color = #05ffdc>（Object）getSelectedItem（） </font> 用于返回下拉列表框中的选中项</p><p>继承 AbstractLisModel类 也有两个重要的操作：</p><p><font color = #05ffdc>getSize（） </font> 返回列表的长度</p><p><font color = #05ffdc>getElementAt（int index） </font> 返回指定的索引处的值</p><p>如果想实现调用接口，自定义一个实现 ComboBoxModel接口 并继承 AbstractLisModel类 的类，这样可以重写或实现该类的重要方法，初始化JComboBox对象时向上转型为ComboBoxModel 接口类型即可</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionEvent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionListener<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JFrame父窗体类</span><span class="token keyword">class</span> <span class="token class-name">Parentform</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为父类添加标题</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"JFrame父窗体的标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体关闭规则</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体坐标，大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">230</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">550</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取窗体容器</span>        Container c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        //初始化对象（1）</span><span class="token comment" spellcheck="true">//        JComboBox&lt;String> comboBox = new JComboBox&lt;>();</span><span class="token comment" spellcheck="true">//        //像下拉列表添加数据</span><span class="token comment" spellcheck="true">//        comboBox.addItem("No.1");</span><span class="token comment" spellcheck="true">//        comboBox.addItem("No.2");</span><span class="token comment" spellcheck="true">//        comboBox.addItem("No.3");</span><span class="token comment" spellcheck="true">//        //初始化对象（2）</span><span class="token comment" spellcheck="true">//        String[] str = new String[]{"No.1","No.2","No.3"};</span><span class="token comment" spellcheck="true">//        JComboBox&lt;String> comboBox = new JComboBox&lt;>(str);</span>        <span class="token comment" spellcheck="true">//初始化对象（3）</span>        <span class="token comment" spellcheck="true">//向上转型为ComboBoxModel接口</span>        MyComboBox com <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyComboBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JComboBox comboBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JComboBox</span><span class="token punctuation">(</span>com<span class="token punctuation">)</span><span class="token punctuation">;</span>        comboBox<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JButton btn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"打印"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btn<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"选中索引为："</span><span class="token operator">+</span>comboBox<span class="token punctuation">.</span><span class="token function">getSelectedIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"选中的值为："</span><span class="token operator">+</span>comboBox<span class="token punctuation">.</span><span class="token function">getSelectedItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---测试2---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下拉列表框中的个数："</span><span class="token operator">+</span>com<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取下拉列表框的项目："</span><span class="token operator">+</span>com<span class="token punctuation">.</span><span class="token function">getSelectedItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查看下拉列表框索引2 : "</span><span class="token operator">+</span>com<span class="token punctuation">.</span><span class="token function">getElementAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>comboBox<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗体显示</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Parentform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//模型类 继承 AbstractListModel类 ，实现ComboBoxModel接口</span><span class="token keyword">class</span> <span class="token class-name">MyComboBox</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractListModel</span> <span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">ComboBoxModel</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">{</span>     String g <span class="token operator">=</span> null<span class="token punctuation">;</span>     String<span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"No.1"</span><span class="token punctuation">,</span><span class="token string">"No.2"</span><span class="token punctuation">,</span><span class="token string">"No.3"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置下拉列表框项目</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSelectedItem</span><span class="token punctuation">(</span>Object anItem<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>g <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>anItem<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取下拉列表框的项目（数据获取来源）</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">getSelectedItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回下拉列表框的数目</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回索引值</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getElementAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> str<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="https://sanscan12.gitee.io/blogimg/Content/Java/Java23.png" style="zoom:67%;" /><h4 id="列表框"><a href="#列表框" class="headerlink" title="列表框"></a>列表框</h4><h3 id="文本组件"><a href="#文本组件" class="headerlink" title="文本组件"></a>文本组件</h3><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h1&gt;&lt;h2 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://Sanscan12.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="笔记" scheme="https://Sanscan12.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://Sanscan12.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>进制转换</title>
    <link href="https://sanscan12.github.io/posts/8b05.html"/>
    <id>https://sanscan12.github.io/posts/8b05.html</id>
    <published>2020-05-25T14:25:21.443Z</published>
    <updated>2020-05-25T14:40:31.963Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a><strong>进制转换</strong></h1><h2 id="十进制-→-其他进制"><a href="#十进制-→-其他进制" class="headerlink" title="十进制 → 其他进制"></a>十进制 → 其他进制</h2><p>（短除法）</p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/JZConvert 03.jpg" style="zoom: 80%;" /><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/JZConvert 02.jpg" style="zoom: 80%;" /><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/JZConvert 01.jpg" style="zoom: 80%;" /><h2 id="其他进制-→-十进制"><a href="#其他进制-→-十进制" class="headerlink" title="其他进制 → 十进制"></a>其他进制 → 十进制</h2><p><strong>八进制 → 十进制</strong><br>$$<br>3436_{(8)} = 1822_{(10)}<br>$$</p><p>$$<br>3 * 8^3+4 * 8^2+3 * 8^1+6 * 8^0=1822_{(10)}<br>$$</p><p>$$<br>1536+256+24+6=1822_{(10)}<br>$$</p><p><strong>十六进制 → 十进制</strong><br>$$<br>E346A_{(16)} = 930922_{(10)}<br>$$</p><p>$$<br>14 * 16^4+3 * 16^3+4 * 16^2+6 * 16^1+10 * 16^0 = 930922_{(10)}<br>$$</p><p>$$<br>917504+12288+1024+96+10=930922_{(10)}<br>$$</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;进制转换&quot;&gt;&lt;a href=&quot;#进制转换&quot; class=&quot;headerlink&quot; title=&quot;进制转换&quot;&gt;&lt;/a&gt;&lt;strong&gt;进制转换&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;十进制-→-其他进制&quot;&gt;&lt;a href=&quot;#十进制-→-其他进制&quot; class=
      
    
    </summary>
    
    
      <category term="学习记录" scheme="https://Sanscan12.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="笔记" scheme="https://Sanscan12.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="进制转换" scheme="https://Sanscan12.github.io/tags/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>IDEA 快捷键（转载）</title>
    <link href="https://sanscan12.github.io/posts/5d9a.html"/>
    <id>https://sanscan12.github.io/posts/5d9a.html</id>
    <published>2020-05-18T16:00:00.000Z</published>
    <updated>2020-05-25T14:25:43.970Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IDEA-快捷键"><a href="#IDEA-快捷键" class="headerlink" title="IDEA 快捷键"></a>IDEA 快捷键</h1><h2 id="Ctrl-快捷键"><a href="#Ctrl-快捷键" class="headerlink" title="Ctrl 快捷键"></a>Ctrl 快捷键</h2><p>Ctrl + F    查找文本内容 （必备）<br>Ctrl + R    查找匹配文本内容替换 （必备）</p><blockquote><p>替换属性：</p><p>REPLACE：替换第一个内容<br>REPLACE ALL：全部替换<br>INCLUDE：取消选定内容的文本</p></blockquote><p>Ctrl + Z    撤销 （必备）<br>Ctrl + Y    删除光标所在行（必备）<br>Ctrl + X    剪切光标所在行 或 剪切选择内容<br>Ctrl + C    复制光标所在行 或 复制选择内容<br>Ctrl + D    复制光标所在行 或 复制选择内容（必备）<br>Ctrl + E    显示最近文件打开记录 （必备）<br>Ctrl + N    查找类文件 名/类名  （必备）<br>Ctrl + G    在当前文件跳转到指定行处<br>Ctrl + J     插入自定义动态代码模板 （必备）！！！<br>Ctrl + P    方法参数提示显示 （必备）<br>Ctrl + Q    光标所在的变量 / 类名 / 方法名等上面（也可以在提示补充的时候按），显示文档内容<br>Ctrl + /    释光标所在行代码，会根据当前不同文件类型使用不同的注释符号 （必备）<br>Ctrl + U    前往当前光标所在的方法的父类的方法 / 接口定义 （必备）<br>Ctrl + B    进入光标所在的方法/变量的接口或是定义处，等效于 Ctrl + 左键单击 （必备）<br>Ctrl + K    版本控制提交项目，需要此项目有加入到版本控制才可用<br>Ctrl + T    版本控制更新项目，需要此项目有加入到版本控制才可用<br>Ctrl + H    显示当前类的层次结构<br>Ctrl + O    选择可重写的方法<br>Ctrl + I    选择可继承的方法<br>Ctrl + +    展开代码<br>Ctrl + -    折叠代码<br>Ctrl + /    释光标所在行代码，会根据当前不同文件类型使用不同的注释符号 （必备）<br>Ctrl + [    移动光标到当前所在代码的花括号开始位置<br>Ctrl + ]    移动光标到当前所在代码的花括号结束位置<br>Ctrl + F1   在光标所在的错误代码处显示错误信息 （必备）<br>Ctrl + F3   调转到所选中的词的下一个引用位置 （必备）<br>Ctrl + F4   关闭当前编辑文件<br>Ctrl + F8   在 Debug 模式下，设置光标当前行为断点，如果当前已经是断点则去掉断点<br>Ctrl + F9   执行 Make Project 操作<br>Ctrl + F11  选中文件 / 文件夹，使用助记符设定 / 取消书签 （必备）<br>Ctrl + F12  弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选<br>Ctrl + Tab  编辑窗口切换，如果在切换的过程又加按上 delete，则是关闭对应选中的窗口<br>Ctrl + End  跳到文件尾<br>Ctrl + Home 跳到文件头<br>Ctrl + Space  基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 Ctrl +逗号 （必备）<br>Ctrl + Delete      删除光标后面的单词或是中文句 （必备）<br>Ctrl +BackSpace    删除光标前面的单词或是中文句 （必备）<br>Ctrl +1,2,3…9    定位到对应数值的书签位置 （必备）<br>Ctrl + 左键单击     在打开的文件标题上，弹出该文件路径 （必备）<br>Ctrl + 光标定位按   Ctrl 不要松开，会显示光标所在的类信息摘要<br>Ctrl + 左方向键     光标跳转到当前单词 / 中文句的左侧开头位置 （必备）<br>Ctrl + 右方向键     光标跳转到当前单词 / 中文句的右侧开头位置 （必备）<br>Ctrl + 前方向键     等效于鼠标滚轮向前效果 （必备）<br>Ctrl + 后方向键     等效于鼠标滚轮向后效果 （必备）</p><h2 id="Alt-快捷键"><a href="#Alt-快捷键" class="headerlink" title="Alt 快捷键"></a>Alt 快捷键</h2><p>Alt + `   显示版本控制常用操作菜单弹出层 （必备）<br>Alt + Q   弹出一个提示，显示当前类的声明 / 上下文信息<br>Alt + F1  显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择 （必备）<br>Alt + F2  对于前面页面，显示各类浏览器打开目标选择弹出层<br>Alt + F3  选中文本，逐个往下查找相同文本，并高亮显示<br>Alt + F7  查找光标所在的方法 / 变量 / 类被调用的地方<br>Alt + F8  在 Debug 的状态下，选中对象，弹出可输入计算表达式调试框，查看该输入内容的调试结果<br>Alt + Home   定位 / 显示到当前文件的 Navigation Bar<br>Alt + Enter  IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同 （必备）<br>Alt + Insert 代码自动生成，如生成对象的 set / get 方法，构造函数，toString() 等 （必备）<br>Alt + 左方向键     切换当前已打开的窗口中的子视图，比如 Debug 窗口中有 Output、Debugger 等子视图，用此快捷键就可以在子视图中切换 （必备）<br>Alt + 右方向键     按切换当前已打开的窗口中的子视图，比如 Debug 窗口中有 Output、Debugger 等子视图，用此快捷键就可以在子视图中切换 （必备）<br>Alt + 前方向键     当前光标跳转到当前文件的前一个方法名位置 （必备）<br>Alt + 后方向键     当前光标跳转到当前文件的后一个方法名位置 （必备）<br>Alt +1,2,3…9    显示对应数值的选项卡，其中 1 是 Project 用得最多 （必备）</p><h2 id="Shift-快捷键"><a href="#Shift-快捷键" class="headerlink" title="Shift 快捷键"></a>Shift 快捷键</h2><p>Shift + F1   如果有外部文档可以连接外部文档<br>Shift + F2   跳转到上一个高亮错误 或 警告位置<br>Shift + F3   在查找模式下，查找匹配上一个<br>Shift + F4   对当前打开的文件，使用新 Windows 窗口打开，旧窗口保留<br>Shift + F6   对文件 / 文件夹 重命名<br>Shift + F7   在 Debug 模式下，智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法<br>Shift + F8   在 Debug 模式下，跳出，表现出来的效果跟 F9 一样<br>Shift + F9   等效于点击工具栏的 Debug 按钮<br>Shift + F10  等效于点击工具栏的 Run 按钮<br>Shift + F11  弹出书签显示层 （必备）<br>Shift + Tab    取消缩进 （必备）<br>Shift + ESC    隐藏当前 或 最后一个激活的工具窗口<br>Shift + End    选中光标到当前行尾位置<br>Shift + Home   选中光标到当前行头位置<br>Shift + Enter    开始新一行。光标所在行下空出一行，光标定位到新行位置 （必备）<br>Shift + 左键单击      在打开的文件名上按此快捷键，可以关闭当前打开文件 （必备）<br>Shift + 滚轮前后滚动   当前文件的横向滚动轴滚动 （必备）</p><h2 id="Ctrl-Alt-快捷键"><a href="#Ctrl-Alt-快捷键" class="headerlink" title="Ctrl + Alt 快捷键"></a>Ctrl + Alt 快捷键</h2><p>Ctrl + Alt + L   格式化代码，可以对当前文件和整个包目录使用 （必备）<br>Ctrl + Alt + O   优化导入的类，可以对当前文件和整个包目录使用 （必备）<br>Ctrl + Alt + I   光标所在行 或 选中部分进行自动代码缩进，有点类似格式化<br>Ctrl + Alt + T   对选中的代码弹出环绕选项弹出层 （必备）<br>Ctrl + Alt + J   弹出模板选择窗口，将选定的代码加入动态模板中<br>Ctrl + Alt + H   调用层次<br>Ctrl + Alt + B   在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口<br>Ctrl + Alt + V   快速引进变量<br>Ctrl + Alt + Y   同步、刷新<br>Ctrl + Alt + S   打开 IntelliJ IDEA 系统设置 （必备）<br>Ctrl + Alt + F7  显示使用的地方。寻找被该类或是变量被调用的地方，用弹出框的方式找出来<br>Ctrl + Alt + F11 切换全屏模式<br>Ctrl + Alt + Enter   光标所在行上空出一行，光标定位到新行 （必备）<br>Ctrl + Alt + Home    弹出跟当前文件有关联的文件弹出层<br>Ctrl + Alt + Space   类名自动完成<br>Ctrl + Alt + 左方向键    退回到上一个操作的地方 （必备）<br>Ctrl + Alt + 右方向键    前进到上一个操作的地方 （必备）<br>Ctrl + Alt + 前方向键    在查找模式下，跳到上个查找的文件<br>Ctrl + Alt + 后方向键    在查找模式下，跳到下个查找的文件</p><h2 id="Ctrl-Shift-快捷键"><a href="#Ctrl-Shift-快捷键" class="headerlink" title="Ctrl + Shift 快捷键"></a>Ctrl + Shift 快捷键</h2><p>Ctrl + Shift + F  根据输入内容查找整个项目 或 指定目录内文件 （必备）<br>Ctrl + Shift + R  根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件 （必备）<br>Ctrl + Shift + J  自动将下一行合并到当前行末尾 （必备）<br>Ctrl + Shift + Z  取消撤销 （必备）<br>Ctrl + Shift + W  递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围 （必备）<br>Ctrl + Shift + N  通过文件名定位 / 打开文件 / 目录，打开目录需要在输入的内容后面多加一个正斜杠 （必备）<br>Ctrl + Shift + U  对选中的代码进行大 / 小写轮流转换 （必备）<br>Ctrl + Shift + T  对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择 （必备）<br>Ctrl + Shift + C  复制当前文件磁盘路径到剪贴板 （必备）<br>Ctrl + Shift + V  弹出缓存的最近拷贝的内容管理器弹出层<br>Ctrl + Shift + E  显示最近修改的文件列表的弹出层<br>Ctrl + Shift + H  显示方法层次结构<br>Ctrl + Shift + B  跳转到类型声明处 （必备）<br>Ctrl + Shift + I  快速查看光标所在的方法 或 类的定义<br>Ctrl + Shift + A  查找动作 / 设置<br>Ctrl + Shift + /  代码块注释 （必备）<br>Ctrl + Shift + [  选中从光标所在位置到它的顶部中括号位置 （必备）<br>Ctrl + Shift + ]  选中从光标所在位置到它的底部中括号位置 （必备）<br>Ctrl + Shift + +  展开所有代码 （必备）<br>Ctrl + Shift + -  折叠所有代码 （必备）<br>Ctrl + Shift + F7    高亮显示所有该选中文本，按 Esc 高亮消失 （必备）<br>Ctrl + Shift + F8    在 Debug 模式下，指定断点进入条件<br>Ctrl + Shift + F9    编译选中的文件 / 包 / Module<br>Ctrl + Shift + F12   编辑器最大化 （必备）<br>Ctrl + Shift + Space 智能代码提示<br>Ctrl + Shift + Enter 自动结束代码，行末自动添加分号 （必备）<br>Ctrl + Shift +Backspace  退回到上次修改的地方 （必备）<br>Ctrl + Shift +1,2,3…9  快速添加指定数值的书签 （必备）<br>Ctrl + Shift + 左键单击   把光标放在某个类变量上，按此快捷键可以直接定位到该类中（必备）<br>Ctrl + Shift + 左方向键    在代码文件上，光标跳转到当前单词 / 中文句的左侧开头位置，同时选中该单词 / 中文句（必备）<br>Ctrl + Shift + 右方向键    在代码文件上，光标跳转到当前单词 / 中文句的右侧开头位置，同时选中该单词 / 中文句（必备）<br>Ctrl + Shift + 前方向键    光标放在方法名上，将方法移动到上一个方法前面，调整方法排序 （必备）<br>Ctrl + Shift + 后方向键    光标放在方法名上，将方法移动到下一个方法前面，调整方法<br>Ctrl + Shift + 右方向键    在代码文件上，光标跳转到当前单词 / 中文句的右侧开头位置，同时选中该单词 / 中文句（必备）<br>Ctrl + Shift + 前方向键    光标放在方法名上，将方法移动到上一个方法前面，调整方法排序 （必备）<br>Ctrl + Shift + 后方向键    光标放在方法名上，将方法移动到下一个方法前面，调整方法排序 （必备）</p><h2 id="Alt-Shift-快捷键"><a href="#Alt-Shift-快捷键" class="headerlink" title="Alt + Shift 快捷键"></a>Alt + Shift 快捷键</h2><p>Alt + Shift + N     选择 / 添加 task （必备）<br>Alt + Shift + F     显示添加到收藏夹弹出层 / 添加到收藏夹<br>Alt + Shift + C     查看最近操作项目的变化情况列表<br>Alt + Shift + I     查看项目当前文件<br>Alt + Shift + F7在  Debug 模式下，下一步，进入当前方法体内，如果方法体还有方法，则会进入该内嵌的方法中，依此循环进入<br>Alt + Shift + F9    弹出 Debug 的可选择菜单<br>Alt + Shift + F10   弹出 Run 的可选择菜单<br>Alt + Shift + 左键双击  选择被双击的单词 / 中文句，按住不放，可以同时选择其他单词 / 中文句 （必备）<br>Alt + Shift + 前方向键  移动光标所在行向上移动 （必备）<br>Alt + Shift + 后方向键  移动光标所在行向下移动 （必备）</p><h2 id="Ctrl-Shift-Alt-快捷键"><a href="#Ctrl-Shift-Alt-快捷键" class="headerlink" title="Ctrl + Shift + Alt 快捷键"></a>Ctrl + Shift + Alt 快捷键</h2><p>Ctrl + Shift + Alt + V   无格式黏贴 （必备）<br>Ctrl + Shift + Alt + N   前往指定的变量 / 方法<br>Ctrl + Shift + Alt + S   打开当前项目设置 （必备）<br>Ctrl + Shift + Alt + C   复制参考信息</p><h2 id="其他快捷键"><a href="#其他快捷键" class="headerlink" title="其他快捷键"></a>其他快捷键</h2><p>F2   跳转到下一个高亮错误 或 警告位置 （必备）<br>F3   在查找模式下，定位到下一个匹配处<br>F4   编辑源 （必备）<br>F7   在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中<br>F8   在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内<br>F9   在 Debug 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上<br>F11  添加书签 （必备）<br>F12  回到前一个工具窗口 （必备）<br>Tab缩进 （必备）<br>ESC     从工具窗口进入代码文件窗口 （必备）<br>连按两次Shift  弹出 Search Everywhere 弹出层</p><blockquote><p>学习来源：</p><p><a href="https://www.cnblogs.com/jajian/p/8012603.html" target="_blank" rel="noopener">https://www.cnblogs.com/jajian/p/8012603.html</a></p></blockquote><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;IDEA-快捷键&quot;&gt;&lt;a href=&quot;#IDEA-快捷键&quot; class=&quot;headerlink&quot; title=&quot;IDEA 快捷键&quot;&gt;&lt;/a&gt;IDEA 快捷键&lt;/h1&gt;&lt;h2 id=&quot;Ctrl-快捷键&quot;&gt;&lt;a href=&quot;#Ctrl-快捷键&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="配置" scheme="https://Sanscan12.github.io/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="分享" scheme="https://Sanscan12.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>网页项目</title>
    <link href="https://sanscan12.github.io/posts/cf15.html"/>
    <id>https://sanscan12.github.io/posts/cf15.html</id>
    <published>2020-05-14T16:00:00.000Z</published>
    <updated>2020-05-25T14:25:43.979Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网页项目"><a href="#网页项目" class="headerlink" title="网页项目"></a>网页项目</h1><h2 id="目录说明"><a href="#目录说明" class="headerlink" title="目录说明"></a>目录说明</h2><p>文件实现结构。根目录的文件</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>css</td><td>存放CSS样式文件</td></tr><tr><td>images</td><td>存放图片</td></tr><tr><td>index</td><td>首页HTML结构</td></tr><tr><td>js</td><td>后期存放javascript文件</td></tr></tbody></table><h2 id="css样式分类"><a href="#css样式分类" class="headerlink" title="css样式分类"></a>css样式分类</h2><p> 可分类的有：初始换样式、字体图标样式、公用样式、页面样式、头部底部样式等···</p><h2 id="ico图标"><a href="#ico图标" class="headerlink" title="ico图标"></a>ico图标</h2><p>ico图标是放于标题旁的图标<br><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/jd1.png" alt=""></p><h3 id="引入ico图标"><a href="#引入ico图标" class="headerlink" title="引入ico图标"></a>引入ico图标</h3><pre class="line-numbers language-css"><code class="language-css">&lt;link rel=<span class="token string">"shortcut icon"</span> href=<span class="token string">"favicon.ico"</span>  type=<span class="token string">"image/x-icon"</span>/>   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>注意：</strong></p><ol><li>iconfont不是字体</li><li>位置在于head标签内</li><li>ype=”image/x-icon”  属性可以省略</li><li>为了兼容性，<code>favicon.ico</code>图标放到根目录下</li></ol></blockquote><p><strong>转换ico图标</strong>：<a href="http://www.bitbug.net/" target="_blank" rel="noopener">此处链接</a></p><h2 id="logo的使用"><a href="#logo的使用" class="headerlink" title="logo的使用"></a>logo的使用</h2><p>logo 一般形式：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>京东<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>a标签一般用于搜索引擎要获取的值，所以a标签一定要有网站标名</p><blockquote><p>使用时a标签的内容可以使用 文本首行缩进 <code>text-indent: -9999px;</code> 移除字体</p></blockquote><h2 id="三大标签"><a href="#三大标签" class="headerlink" title="三大标签"></a>三大标签</h2><h3 id="网页title-标题"><a href="#网页title-标题" class="headerlink" title="网页title 标题"></a>网页title 标题</h3><p>不可替代性，是搜索引擎了解网页的入口，和对网页主题归属的最佳判断点<br><strong>写法</strong>：网站名（产品名）- 网站的介绍<br><strong>例子</strong>：天猫tmall.com–理想生活上天猫、淘宝网 - 淘！我喜欢、小米商城 - 小米10 Pro、Redmi K30、小米MIX Alpha，小米电视官方网站</p><h3 id="Description-网站说明"><a href="#Description-网站说明" class="headerlink" title="Description 网站说明"></a>Description 网站说明</h3><p>对于关键词的作用明显降低，但由于很多搜索引擎，仍然大量采用网页的MATA标签中描述部分作为搜索结果的“内容摘要”。 就是简要说明我们网站的主要做什么的<br><strong>写法</strong>：在 head标签里添加meta单标签 Description属性 来添加网站的摘要<br>京东网例子：</p><pre class="line-numbers language-css"><code class="language-css">&lt;head>    ···    &lt;meta name=<span class="token string">"description"</span> content=<span class="token string">"京东JD.COM-专业的综合网上购物商城,销售家电、数码通讯、电脑、家居百货、服装服饰、母婴、图书、食品等数万个品牌优质商品.便捷、诚信的服务，为您提供愉悦的网上购物体验!"</span> />    ···&lt;/head><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小米网例子：</p><pre class="line-numbers language-css"><code class="language-css">&lt;head>    ···    &lt;meta name=<span class="token string">"description"</span> content=<span class="token string">"小米官网直营小米公司旗下所有产品，包括小米手机系列小米10 Pro 、小米9、小米MIX Alpha，Redmi 红米系列Redmi K30、Redmi Note 8 Pro，小米电视、笔记本、米家智能家居等，同时提供小米客户服务及售后支持."</span> />    ···&lt;/head><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>内容注意</strong>：</p><ol><li>描述中出现关键词，与正文内容相关，要写的很详细</li><li>同样遵循简短原则，字符数含空格在内不要超过 120  个汉字</li><li>补充在 title  和 keywords  中未能充分表述的说明</li><li>用英文逗号 关键词1,关键词2</li></ol></blockquote><h3 id="Keywords关键词"><a href="#Keywords关键词" class="headerlink" title="Keywords关键词"></a>Keywords关键词</h3><p>是搜索引擎关注点之一。Keywords应该限制在6～8个关键词左右<br>写法：在 head标签里添加meta单标签 Keywords属性 来添加网站的关键词<br>天猫网例子：</p><pre class="line-numbers language-css"><code class="language-css"> &lt;head>    ···    &lt;meta name=<span class="token string">"keywords"</span> content=<span class="token string">"商城,网上购物,网购,进口食品,美容护理,母婴玩具,家用电器,手机数码,家居生活,服饰内衣,营养保健,钟表珠宝,饰品箱包,汽车生活,图书音像,礼品卡"</span>/>    ···&lt;/head><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小米网例子：</p><pre class="line-numbers language-css"><code class="language-css"> &lt;head>    ···     &lt;meta name=<span class="token string">"keywords"</span> content=<span class="token string">"小米,redmi,小米10,Redmi K30,小米MIX Alpha,小米商城"</span> />    ···&lt;/head><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>待更新···· </p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;网页项目&quot;&gt;&lt;a href=&quot;#网页项目&quot; class=&quot;headerlink&quot; title=&quot;网页项目&quot;&gt;&lt;/a&gt;网页项目&lt;/h1&gt;&lt;h2 id=&quot;目录说明&quot;&gt;&lt;a href=&quot;#目录说明&quot; class=&quot;headerlink&quot; title=&quot;目录说明&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="脚本语言" scheme="https://Sanscan12.github.io/categories/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="分享" scheme="https://Sanscan12.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
      <category term="项目" scheme="https://Sanscan12.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>赛博朋克风格</title>
    <link href="https://sanscan12.github.io/posts/d3.html"/>
    <id>https://sanscan12.github.io/posts/d3.html</id>
    <published>2020-04-30T16:00:00.000Z</published>
    <updated>2020-05-03T12:51:27.661Z</updated>
    
    <content type="html"><![CDATA[<h1 id="赛博风格"><a href="#赛博风格" class="headerlink" title="赛博风格"></a>赛博风格</h1><h2 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h2><p>科技、时尚、未来、神秘、低生活、黑客、数字空间、恐怖·····</p><p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/5.jpg" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/2.png" alt=""></p><h2 id="配色"><a href="#配色" class="headerlink" title="配色"></a>配色</h2><h3 id="黑暗系列"><a href="#黑暗系列" class="headerlink" title="黑暗系列"></a>黑暗系列</h3><p><font color=#1c1769>#1c1769</font> 、<font color=#eb19c4>#ed175c</font> 、<font color=#fc4ced>#fc4ced</font> 、<font color=#05ffdc>#05ffdc</font>   、<font color=#40d4fa>#40d4fa</font> 、<font color=#e2fcfd>#e2fcfd</font> 、<font color=#21eafe>#21eafe</font> </p><h3 id="光感"><a href="#光感" class="headerlink" title="光感"></a>光感</h3><p>背景偏暗，要灯光点要强烈光感，方框线高亮</p><p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/7.jpg" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/9.jpg" alt=""></p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>故障感、粗体、倾斜</p><h3 id="屏幕故障"><a href="#屏幕故障" class="headerlink" title="屏幕故障"></a>屏幕故障</h3><p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/6.png" alt=""></p><p>注入灵魂。RGB 三原色 体现出来</p><p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/4.png" alt=""></p><h3 id="环境字体"><a href="#环境字体" class="headerlink" title="环境字体"></a>环境字体</h3><p>字体描边高亮，字体彩色阴影</p><h3 id="反光"><a href="#反光" class="headerlink" title="反光"></a>反光</h3><p>灯光线反射强烈程度根据反射物决定，暗淡透明升高 或 高亮直白</p><p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/1.jpg" alt=""></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;赛博风格&quot;&gt;&lt;a href=&quot;#赛博风格&quot; class=&quot;headerlink&quot; title=&quot;赛博风格&quot;&gt;&lt;/a&gt;赛博风格&lt;/h1&gt;&lt;h2 id=&quot;元素&quot;&gt;&lt;a href=&quot;#元素&quot; class=&quot;headerlink&quot; title=&quot;元素&quot;&gt;&lt;/a&gt;元素&lt;/h
      
    
    </summary>
    
    
      <category term="其他" scheme="https://Sanscan12.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="分享" scheme="https://Sanscan12.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
      <category term="喜好" scheme="https://Sanscan12.github.io/tags/%E5%96%9C%E5%A5%BD/"/>
    
      <category term="搭色" scheme="https://Sanscan12.github.io/tags/%E6%90%AD%E8%89%B2/"/>
    
  </entry>
  
  <entry>
    <title>Hexo个人装饰及解决问题篇</title>
    <link href="https://sanscan12.github.io/posts/e958.html"/>
    <id>https://sanscan12.github.io/posts/e958.html</id>
    <published>2020-04-26T16:00:00.000Z</published>
    <updated>2020-05-28T01:32:28.049Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo个人装饰篇"><a href="#Hexo个人装饰篇" class="headerlink" title="Hexo个人装饰篇"></a>Hexo个人装饰篇</h1><h2 id="颜色更改"><a href="#颜色更改" class="headerlink" title="颜色更改"></a>颜色更改</h2><p>看图，找要修改样式颜色的！</p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/Blogdecoration/no3.jpg" style="zoom:50%;" /><p>主题里的文件路径：<code>..\source\css\matery.css</code><br>在本地找到相应位置的文件查找对象修改部署即可！！!<br>附加：可选透明颜色的值有</p><table><thead><tr><th>颜色值</th><th>说明</th></tr></thead><tbody><tr><td>rgba(255, 255, 255, 0.6)</td><td>最后一个参数是调节透明度</td></tr><tr><td>transparent</td><td>完全透明</td></tr></tbody></table><h2 id="背景渐变颜色"><a href="#背景渐变颜色" class="headerlink" title="背景渐变颜色"></a>背景渐变颜色</h2><p>以下是颜色值：</p><pre class="line-numbers language-css"><code class="language-css">  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">142</span>,<span class="token number">140</span>, <span class="token number">220</span>, <span class="token number">0.7</span><span class="token punctuation">)</span>, <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">215</span>,<span class="token number">180</span>, <span class="token number">215</span>, <span class="token number">0.7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>参数1的值</th><th>说明</th></tr></thead><tbody><tr><td>to right(向右)、to left(向左)、to top(向上)、to buttom(向下)</td><td>线性渐变</td></tr><tr><td>right top、right buttom、left top、left buttom</td><td>斜线渐变</td></tr><tr><td>circle</td><td>放射性渐变</td></tr><tr><td>ellipse</td><td>圆形渐变</td></tr></tbody></table><h2 id="文本阴影"><a href="#文本阴影" class="headerlink" title="文本阴影"></a>文本阴影</h2><p>以下是颜色值：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">text-shadow</span><span class="token punctuation">:</span><span class="token number">0</span>px <span class="token number">0</span>px <span class="token number">3</span>px <span class="token hexcode">#05ffd</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>参数：</p><ol><li>阴影水平偏移值（可取正负值）</li><li>阴影垂直偏移值（可取正负值）</li><li>阴影模糊值</li><li>阴影颜色</li></ol></blockquote><h2 id="透明背景"><a href="#透明背景" class="headerlink" title="透明背景"></a>透明背景</h2><p>看图：<br><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/Blogdecoration/no4.jpg" alt=""></p><p>样式属性为：background-color: transparent; 即可！<br>主题里的文件路径：<code>..\source\css\matery.css</code></p><h2 id="主页面壁纸透明"><a href="#主页面壁纸透明" class="headerlink" title="主页面壁纸透明"></a>主页面壁纸透明</h2><p>先用ps对图片进行编辑！</p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/Blogdecoration/no1.jpg" style="zoom:50%;" /><p>在ps另存PNG格式，然后编辑更改为JPG格式</p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/Blogdecoration/no2.jpg" style="zoom:50%;" /><p>把图片文件放到相应位置即可部署即可！！!</p><h2 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h2><p>在<code>themes/matery/source/css/matery.css</code>找到<code>.bg-color</code>类选择器编辑即可<br>下图是我的编辑<br><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/Blogdecoration/no7.jpg" alt=""></p><h2 id="背景动态线条"><a href="#背景动态线条" class="headerlink" title="背景动态线条"></a>背景动态线条</h2><p>在<code>themes/matery/layout/layout.ejs</code>文件里的body范围内添加以下代码：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span>color<span class="token operator">=</span><span class="token string">"209 235 227"</span> opacity<span class="token operator">=</span><span class="token string">'0.6'</span> zIndex<span class="token operator">=</span><span class="token string">"-2"</span> count<span class="token operator">=</span><span class="token string">"300"</span> src<span class="token operator">=</span><span class="token string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="全局字体"><a href="#全局字体" class="headerlink" title="全局字体"></a>全局字体</h2><p>如果你有你喜欢的字体，先网站  <a href="https://transfonter.org/" target="_blank" rel="noopener">https://transfonter.org/</a>  编码，字体转base64编码<br><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/Blogdecoration/no6.jpg" style="zoom: 33%;" /></p><p>下载完后，在博客路径里<code>../source/font</code>里放刚刚下载的字体文件（.ttf）。如果没有font文件夹自行创建放进去。<br>最后在路径<code>../themes/matery/source/css/my.css</code>添加代码。</p><pre class="line-numbers language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span><span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'myFont'</span><span class="token punctuation">;</span>    <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('../font/myFont.ttf')</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">body</span><span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'myFont'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子：</p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/Blogdecoration/no5.jpg" style="zoom:50%;" /><p>保存部署即可。<br><strong>学习来源：</strong></p><ol><li><a href="https://www.cnblogs.com/victorlyw/articles/9970805.html" target="_blank" rel="noopener">https://www.cnblogs.com/victorlyw/articles/9970805.html</a></li><li><a href="https://yafine-blog.cn/posts/49fb.html" target="_blank" rel="noopener">https://yafine-blog.cn/posts/49fb.html</a></li></ol><h2 id="代码块样式"><a href="#代码块样式" class="headerlink" title="代码块样式"></a>代码块样式</h2><p>在根路经git运行</p><pre class="line-numbers language-npm"><code class="language-npm">npm i -S hexo-prism-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在根路经目录下_config.yml打开，查找位置<code>highlight</code>，大概位置在50行</p><pre class="line-numbers language-yml"><code class="language-yml">highlight:  enable: false # 把原本的true改为false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在下面新添加以下代码：</p><pre class="line-numbers language-yml"><code class="language-yml">prism_plugin:  mode: 'preprocess'     theme: 'duotone-light' #主题  line_number: true  custom_css: ''     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新部署即可~<br><strong>学习来源：</strong><a href="https://yafine-blog.cn/posts/8c84.html#toc-heading-7" target="_blank" rel="noopener">https://yafine-blog.cn/posts/8c84.html#toc-heading-7</a></p><h2 id="动态标题"><a href="#动态标题" class="headerlink" title="动态标题"></a>动态标题</h2><p>在主题文件下的<code>layout/layout.ejs</code>文件中添加代码，要在标签<code>&lt;bdoy&gt;</code>内添加</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>        <span class="token keyword">var</span> OriginTitile<span class="token operator">=</span>document<span class="token punctuation">.</span>title<span class="token punctuation">,</span>st<span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"visibilitychange"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            document<span class="token punctuation">.</span>hidden<span class="token operator">?</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>title<span class="token operator">=</span><span class="token string">" 网站丢失啦 qwq ！"</span><span class="token punctuation">,</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>title<span class="token operator">=</span><span class="token string">"ヾ(Ő∀Ő3)ノ欢迎回来！"</span><span class="token punctuation">,</span>st<span class="token operator">=</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>document<span class="token punctuation">.</span>title<span class="token operator">=</span>OriginTitile<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">3e3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>学习来源：</strong><a href="https://yafine-blog.cn/posts/8c84.html#toc-heading-7" target="_blank" rel="noopener">https://yafine-blog.cn/posts/8c84.html#toc-heading-7</a></p><h2 id="鼠标样式"><a href="#鼠标样式" class="headerlink" title="鼠标样式"></a>鼠标样式</h2><p>首先你找到自己喜欢的鼠标图，后缀最好是png格式32x32大小的透明背景图，别的格式不能保证起到期望效果，也可以自己动手ps。</p><blockquote><p><font color=red> <strong>重点：</strong></font></p><ol><li>图片大小32x32</li><li>图片格式png</li><li>图片背景透明</li><li>3个鼠标样式分为：默认、链接/图片、指示文本</li></ol></blockquote><p><strong>教程步骤：</strong></p><ol><li>在主题路径的 <code>source</code> 里新建文件夹 <code>shubiao</code> 的文件夹</li><li><code>shubiao</code> 用来存放鼠标图片的位置，留意一下图片名称一会用到</li><li>到主题路径的 <code>source\css\my.css</code> 的my.css文件配置样式</li><li>在最下面添加代码（不要盲目照抄，因为我用的是自己的仓库）</li><li><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo  s</code> 在4000端口预览，成功部署即可！！！</li></ol><p>url中我用了鼠标样式图片加速，使用方法：</p><pre class="line-numbers language-text"><code class="language-text">http://cdn.jsdelivr.net/gh/[github用户名]/[github用户名.github.io]/shubiao/图片名加后缀<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我用的，例子：</p><pre class="line-numbers language-text"><code class="language-text">http://cdn.jsdelivr.net/gh/Sanscan12/Sanscan12.github.io/shubiao/11.png<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><font color=red> <strong>鼠标样式末端定义说明：</strong></font><br>11.png 默认样式样式<br>22.png 链接打开样式<br>33.png 指示文本样式<br>url的值可以根据自己的图片链接设定</p></blockquote><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">{</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> <span class="token url">url("http://cdn.jsdelivr.net/gh/Sanscan12/Sanscan12.github.io/shubiao/11.png")</span>, default <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div </span><span class="token punctuation">{</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> <span class="token url">url("http://cdn.jsdelivr.net/gh/Sanscan12/Sanscan12.github.io/shubiao/11.png")</span>, default <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">a<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> <span class="token url">url("http://cdn.jsdelivr.net/gh/Sanscan12/Sanscan12.github.io/shubiao/22.png")</span>, pointer <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">a<span class="token pseudo-class">:hover</span> span </span><span class="token punctuation">{</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> <span class="token url">url("http://cdn.jsdelivr.net/gh/Sanscan12/Sanscan12.github.io/shubiao/22.png")</span>, pointer <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div<span class="token pseudo-class">:hover</span> img </span><span class="token punctuation">{</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> <span class="token url">url("http://cdn.jsdelivr.net/gh/Sanscan12/Sanscan12.github.io/shubiao/22.png")</span>, pointer <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div<span class="token pseudo-class">:hover</span> span </span><span class="token punctuation">{</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> <span class="token url">url("http://cdn.jsdelivr.net/gh/Sanscan12/Sanscan12.github.io/shubiao/22.png")</span>, pointer <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div<span class="token pseudo-class">:hover</span> button </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*d */</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> <span class="token url">url("http://cdn.jsdelivr.net/gh/Sanscan12/Sanscan12.github.io/shubiao/22.png")</span>, pointer <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div<span class="token pseudo-class">:hover</span> textarea </span><span class="token punctuation">{</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> <span class="token url">url("http://cdn.jsdelivr.net/gh/Sanscan12/Sanscan12.github.io/shubiao/33.png")</span>, pointer <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div<span class="token pseudo-class">:hover</span> input </span><span class="token punctuation">{</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> <span class="token url">url("http://cdn.jsdelivr.net/gh/Sanscan12/Sanscan12.github.io/shubiao/33.png")</span>, pointer <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码详细：（可跳过）</strong></p><p><code>:hover</code> ：作用鼠标经过时显示</p><p><code>!important</code>：可以获取最高权限来下显示鼠标样式，并覆盖原有的鼠标样式</p><p><code>cursor</code> 属性规定要显示的光标的类型（形状）该属性定义了鼠标指针放在一个元素边界范围内时所用的光标形状</p><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">url</td><td align="left">需使用的自定义光标的 URL。注释：请在此列表的末端始终定义一种普通的光标，以防没有由 URL 定义的可用光标</td></tr><tr><td align="left">default</td><td align="left">默认光标（通常是一个箭头）</td></tr><tr><td align="left">auto</td><td align="left">默认。浏览器设置的光标</td></tr><tr><td align="left">crosshair</td><td align="left">光标呈现为十字线</td></tr><tr><td align="left">pointer</td><td align="left">光标呈现为指示链接的指针（一只手）</td></tr><tr><td align="left">move</td><td align="left">此光标指示某对象可被移动</td></tr><tr><td align="left">e-resize</td><td align="left">此光标指示矩形框的边缘可被向右（东）移动</td></tr><tr><td align="left">ne-resize</td><td align="left">此光标指示矩形框的边缘可被向上及向右移动（北/东）</td></tr><tr><td align="left">nw-resize</td><td align="left">此光标指示矩形框的边缘可被向上及向左移动（北/西）</td></tr><tr><td align="left">n-resize</td><td align="left">此光标指示矩形框的边缘可被向上（北）移动</td></tr><tr><td align="left">se-resize</td><td align="left">此光标指示矩形框的边缘可被向下及向右移动（南/东）</td></tr><tr><td align="left">sw-resize</td><td align="left">此光标指示矩形框的边缘可被向下及向左移动（南/西）</td></tr><tr><td align="left">s-resize</td><td align="left">此光标指示矩形框的边缘可被向下移动（南）</td></tr><tr><td align="left">w-resize</td><td align="left">此光标指示矩形框的边缘可被向左移动（西）</td></tr><tr><td align="left">text</td><td align="left">此光标指示文本</td></tr><tr><td align="left">wait</td><td align="left">此光标指示程序正忙（通常是一只表或沙漏）</td></tr><tr><td align="left">help</td><td align="left">此光标指示可用的帮助（通常是一个问号或一个气球）</td></tr></tbody></table><h2 id="目录样式"><a href="#目录样式" class="headerlink" title="目录样式"></a>目录样式</h2><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/Mlml1.png" style="zoom:50%;" /><blockquote><ol><li>滚动条去掉</li><li>方块去掉</li></ol></blockquote><p>在主题文件下 <code>source\css\my.css</code> 文件，最下面添加代码</p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*去掉滚动条*/</span><span class="token selector"><span class="token id">#toc-content</span> </span><span class="token punctuation">{</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> visible <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*去掉方块*/</span><span class="token selector"><span class="token id">#toc-content</span> <span class="token class">.is-active-link</span><span class="token pseudo-element">::before</span> </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> transparent <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo  s</code> 在4000端口预览，成功部署即可！！！</p><h2 id="滚动条样式"><a href="#滚动条样式" class="headerlink" title="滚动条样式"></a>滚动条样式</h2><p>在主题文件下 <code>source\css\my.css</code> 文件，最下面添加代码</p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 滚动条 */</span><span class="token comment" spellcheck="true">/*滚动条样式*/</span><span class="token selector"><span class="token pseudo-element">::-webkit-scrollbar-thumb</span> </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#05ffdc</span><span class="token punctuation">;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span><span class="token number">45</span>deg,<span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">64</span>,<span class="token number">64</span>,<span class="token number">64</span>,<span class="token number">.4</span><span class="token punctuation">)</span> <span class="token number">25%</span>,transparent <span class="token number">25%</span>,transparent <span class="token number">50%</span>,<span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">64</span>,<span class="token number">64</span>,<span class="token number">64</span>,<span class="token number">.4</span><span class="token punctuation">)</span> <span class="token number">50%</span>,<span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">64</span>,<span class="token number">64</span>,<span class="token number">64</span>,<span class="token number">.4</span><span class="token punctuation">)</span> <span class="token number">75%</span>,transparent <span class="token number">75%</span>,transparent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 滚动条圆角*/</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">2</span>em<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*鼠标移到的样式*/</span><span class="token selector"><span class="token pseudo-element">::-webkit-scrollbar-thumb</span><span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#05ceae</span><span class="token punctuation">;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span><span class="token number">45</span>deg,<span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">.4</span><span class="token punctuation">)</span> <span class="token number">25%</span>,transparent <span class="token number">25%</span>,transparent <span class="token number">50%</span>,<span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">.4</span><span class="token punctuation">)</span> <span class="token number">50%</span>,<span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">.4</span><span class="token punctuation">)</span> <span class="token number">75%</span>,transparent <span class="token number">75%</span>,transparent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*滚动条背景*/</span><span class="token selector"><span class="token pseudo-element">::-webkit-scrollbar-track</span> </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#3f426f</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*横向时或纵向时的宽高*/</span><span class="token selector"><span class="token pseudo-element">::-webkit-scrollbar</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo  s</code> 在4000端口预览，成功部署即可！！！</p><h1 id="hexo问题解决篇"><a href="#hexo问题解决篇" class="headerlink" title="hexo问题解决篇"></a>hexo问题解决篇</h1><h2 id="文章链接溢出问题"><a href="#文章链接溢出问题" class="headerlink" title="文章链接溢出问题"></a>文章链接溢出问题</h2><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/lj.png" style="zoom:50%;" /><p><strong>解决方案</strong></p><p>在主题文件下<code>source\css\matery.css</code> 文件，查找<code>#artDetail .reprint</code> 位置中添加<code>word-break: break-all;</code>代码。<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo  s</code> 在4000端口预览，成功部署即可！！！<br>以下是例子</p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/lj22.png" style="zoom:50%;" /><p>等待更新····</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hexo个人装饰篇&quot;&gt;&lt;a href=&quot;#Hexo个人装饰篇&quot; class=&quot;headerlink&quot; title=&quot;Hexo个人装饰篇&quot;&gt;&lt;/a&gt;Hexo个人装饰篇&lt;/h1&gt;&lt;h2 id=&quot;颜色更改&quot;&gt;&lt;a href=&quot;#颜色更改&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://Sanscan12.github.io/categories/hexo/"/>
    
    
      <category term="css" scheme="https://Sanscan12.github.io/tags/css/"/>
    
      <category term="分享" scheme="https://Sanscan12.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>结构写作</title>
    <link href="https://sanscan12.github.io/posts/54dc.html"/>
    <id>https://sanscan12.github.io/posts/54dc.html</id>
    <published>2020-04-23T16:00:00.000Z</published>
    <updated>2020-05-25T14:25:43.977Z</updated>
    
    <content type="html"><![CDATA[<h1 id="结构写作训练"><a href="#结构写作训练" class="headerlink" title="结构写作训练"></a>结构写作训练</h1><h2 id="确定写作方向"><a href="#确定写作方向" class="headerlink" title="确定写作方向"></a>确定写作方向</h2><p><font size=2>如何确定写作内容？</font></p><h3 id="分析目标对象"><a href="#分析目标对象" class="headerlink" title="分析目标对象"></a>分析目标对象</h3><p> 通过<strong>提问</strong>、<strong>观察</strong>、<strong>侧面了解</strong>。<br> <strong>第一层次：</strong>对方是否与你所持的立场一致?<br> <strong>第二层次：</strong>对方是否存在客观环境和外部资源的约束？</p><hr><p><font color = #b3d4fc size=5><strong>例子：</strong></font></p><p>　　老板最近发现公司的效率不高，是因为层级太多，导致信息传递很慢。于是，他想通过减少组织层级的方法，来解决这个问题。但是呢，这种方案在实际执行后，会遇到很多阻力，没法一下子什么都不管地进行推进。于是，他布置了一个任务，让部门写一份组织架构调整方案。<br>　　老板是想通过减少组织层级来提高效率的（目的），实际行动时，会遇到很多问题，有客观环境和外部资源的问题（约束），只是苦于没有解决这些问题的方案，所以暂时没办法这么实施行动。</p><hr><h3 id="游说矩形"><a href="#游说矩形" class="headerlink" title="游说矩形"></a>游说矩形</h3><table><thead><tr><th></th><th><strong>与你立场一致</strong></th><th><strong>与你立场不一致</strong></th></tr></thead><tbody><tr><td><strong>不存在约束（资源充足）</strong></td><td>罗列事实:提供给对方需要知道的事实</td><td>说服:强调利益所在，说服对方转换立场</td></tr><tr><td><strong>存在约束</strong></td><td>解决问题:对受约束的问题，提供解决方案</td><td>既要说服，也要解决问题</td></tr></tbody></table><hr><p><font color = #b3d4fc size=5><strong>例子：</strong></font></p><p>　　上司让你写一份策划案，关于举办元旦庆祝晚会的事，预算金<br>额大概是5000元。<br><strong>情况一，立场一致且不存在资源约束问题</strong></p><blockquote><p><font size=2><strong>就可以只简单提供给对方他需要知道的事实</strong>。只需要把这个场所离工作的地点近、菜单品种丰富、要价也在预算之内等信息，传递给你的老板就好了。</font></p></blockquote><p><strong>情况二，立场一致且存在资源约束问题</strong></p><blockquote><p><font size=2><strong>需要侧重于解决问题，受约束的问题，提供你的解决方案</strong>。因此，把事情分析清楚，使他觉得“虽然超支1000元、但是非常物有所值”。或者也可以告诉老板，如果这次能多提供1000元的预算资金，你会在另外一个活动中节约出这1000元的预算开支等。</font></p></blockquote><p><strong>情况三，立场不一致且不存在资源约束问题</strong></p><blockquote><p><font size=2><strong>内容就应该强调你的建议能带来的好处，说服对方转换立场，同意你的建议。</strong>庆祝元旦的方式由聚餐改为去看话剧演出。就应该是强调看元旦话剧演出的好处，想办法说服你的老板，让他转换立场。比如说，看元旦话剧，更能够给员工留下特殊的回忆等等。</font></p></blockquote><p><strong>情况四，立场不一致且存在资源约束问题</strong></p><blockquote><p><font size=2><strong>先说服对方转换立场，再解决相关的约束问题。</strong>如果你想建议用看一场元旦话剧演出代替原来的聚餐，而且演出的整体票价也超过了预算。就应该是先表明看元旦话剧演出的处，让他转换立场，再对预算超了的问题提出解决方案。</font></p></blockquote><hr><h2 id="构思写作框架"><a href="#构思写作框架" class="headerlink" title="构思写作框架"></a>构思写作框架</h2><h3 id="四步法构思写作框架"><a href="#四步法构思写作框架" class="headerlink" title="四步法构思写作框架"></a>四步法构思写作框架</h3><ol><li><p><strong>收集素材：</strong>事实、观点、故事、新闻</p></li><li><p><strong>提炼结构：</strong><br>信息归类、归纳共性、提炼结构、验证结构</p><p>常用结构：简单类、要素类、二维矩形类、流程类</p></li><li><p><strong>补充信息：</strong>除了包括最开始的素材，从最终确定的结构所关联想到的相关素材 ，也需要补充</p></li><li><p><strong>提炼主题：</strong><br>结论法：由下层信息推导出上层信息，适用于做因果关系推论</p></li></ol><hr><p><strong>事实</strong>是已经发生或存在的一种客观状况，它可以被证明真或假。而<strong>观点</strong>则往往表达个人的看法，是你的预测、推断、结论等主观的表达。比如你说今天很冷，但别人不这么认为···。好的<strong>故事</strong>，能够吸引读者看下去，或者调动他们的情感、引发共鸣，又或者让内容更容易被理解。<strong>新闻</strong>素材，有时效性，能作为事实信息来佐证自己的观点。新闻素材可根据场景来定。<br><font color = #b3d4fc size=5><strong>例子：</strong></font></p><p>　　朋友来向你询问职业选择的建议，他拿到了两个offer，技术方面的，销售方面的。你分析了他的特点和相关岗位后。以下是你经过头脑风暴和查阅资料后，收集到的素材:</p><ol><li>他学的专业是工科，有做技术的基本知识</li><li>他的性格外向，更喜欢与人交往，做销售可能更适合他的个性</li><li>销售岗位的晋升可能更容易，晋升会伴随着加薪</li><li>做技术的基本工资可能较高</li><li>销售的奖金更多</li><li>他没有做销售的经验和知识，上手需要–定的时间</li></ol><p><strong>信息归类：</strong>3 , 4 , 5 ；1 , 6  ；2<br><strong>归纳共性：</strong>3 , 4 , 5 归纳为工资待遇，1 , 6 归纳为知识经验和经验储备，2就是有关性格的<br><strong>提炼结构：</strong>以重要性可分类为：工资、性格、知识储备。然后根据MECE原则验证结构。</p><p>把工资、知识经验储备和性格，补充为赚钱、擅长和兴趣的最终结构。赚钱分组下，原来收集的素材中只考虑了基本工资、加薪速度、奖金等，现在还能想到的是，发放的福利也会影响赚钱的多少，所以可以将它补充进去。<strong>补充信息</strong>。</p><p>素材中推导出各个类别的三个子主题是“做销售更有赚大钱的机会”、“朋友更喜欢做销售”、“朋友能够把销售做好”。最后主题为：我应该建议朋友做销！</p><hr><h2 id="填充内容与成文修改"><a href="#填充内容与成文修改" class="headerlink" title="填充内容与成文修改"></a>填充内容与成文修改</h2><p><font size=2>如何丰富内容和修改？</font></p><h3 id="正式写作四个步骤"><a href="#正式写作四个步骤" class="headerlink" title="正式写作四个步骤"></a>正式写作四个步骤</h3><ol><li><p><strong>主题鲜明：</strong></p><ul><li>主题要符合预期</li><li>铺垫要适应</li><li>避免没有思想的主题</li></ul></li><li><p><strong>完善提纲：</strong></p><p>根据提纲补充每个子主题下的支持信息</p></li><li><p><strong>承上启下：</strong></p><p>从上个平主题中，挑选个关键词/短语来总结思想，将用在下个主期的起始句中。</p></li><li><p><strong>结尾升华：</strong></p><p>阐明建议或下一步计划，展望未来。</p></li></ol><h3 id="检查修改文章的五个方面"><a href="#检查修改文章的五个方面" class="headerlink" title="检查修改文章的五个方面"></a>检查修改文章的五个方面</h3><ol><li><p><strong>主题：</strong><br>检查主题和子主题是否明确</p></li><li><p><strong>思路：</strong><br>检查支持主题的子主题是否充分，排布是否符合提纲的结构顺序</p></li><li><p><strong>内容：</strong></p><p>检查子主题内的支持论据是否具体，必要时加数字的证据</p></li><li><p><strong>表述：</strong></p><p>检查你的传达目的是否达到，语言是否尽量口语化。是否需要附注、附件。</p></li><li><p><strong>其他：</strong></p><p>检查语法、标点符号、词语</p></li></ol><h2 id="常见商务文体写作"><a href="#常见商务文体写作" class="headerlink" title="常见商务文体写作"></a>常见商务文体写作</h2><h3 id="商业邮件的六个步骤"><a href="#商业邮件的六个步骤" class="headerlink" title="商业邮件的六个步骤"></a>商业邮件的六个步骤</h3><ol><li>在标题栏写明主题</li><li>开头概括出需要接收者做的事(主题)</li><li>中间内容说明情况，用简单明了的词语、避免长句复杂句，重要的内容特殊标出。</li><li>结尾再次给山明确的行动指令，给出相关的截止时间。</li><li>某一单独部分的内容过多时，可以适当地使用链接和附件。</li><li>发送前，用5W1H来检验所给的信息是否完整。</li></ol><p>工作总结的三个部分</p><ol><li><strong>工作业绩</strong><br>写框架可参考KPI列表，或参考以下四个方面，对收入利润的贡献、对客户/用户的贡献、对管理的贡献和流程的贡献，以及对学习成长的贡献</li><li><strong>个人成长</strong><br>写框架可参考岗位所需的能力项目。客观分析个人的进步和不足，总结经验和教训；通过他人评价、个人真实案例来展现闪光点</li><li><strong>工作计划</strong><br>参考PDCA模型制定计划。P(Plan)计划、 D(Do)执行、 C(Check)检查、A(Action)修正</li></ol><p>未完成···</p><p><strong>学习来源：圈外同学</strong></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;结构写作训练&quot;&gt;&lt;a href=&quot;#结构写作训练&quot; class=&quot;headerlink&quot; title=&quot;结构写作训练&quot;&gt;&lt;/a&gt;结构写作训练&lt;/h1&gt;&lt;h2 id=&quot;确定写作方向&quot;&gt;&lt;a href=&quot;#确定写作方向&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="学习记录" scheme="https://Sanscan12.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="笔记" scheme="https://Sanscan12.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="圈外同学" scheme="https://Sanscan12.github.io/tags/%E5%9C%88%E5%A4%96%E5%90%8C%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>生活计划</title>
    <link href="https://sanscan12.github.io/posts/f461.html"/>
    <id>https://sanscan12.github.io/posts/f461.html</id>
    <published>2020-04-21T16:00:00.000Z</published>
    <updated>2020-05-25T14:25:43.971Z</updated>
    
    <content type="html"><![CDATA[<h1 id="大学生生活计划"><a href="#大学生生活计划" class="headerlink" title="大学生生活计划"></a>大学生生活计划</h1><h2 id="值得关注"><a href="#值得关注" class="headerlink" title="值得关注"></a>值得关注</h2><p>大数据、区块链、VR、AR、5G开发</p><h2 id="期间要做的"><a href="#期间要做的" class="headerlink" title="期间要做的"></a>期间要做的</h2><ol><li>大学的文化课（基础课）不能轻视</li><li>精通一门语言！！！JAVA、C++、Golang等···</li><li>学习语言的<strong>数据结构</strong>、<strong>算法</strong>！</li><li>精通数据库</li><li>网络原理要学好</li><li>认真做一个项目，持续维护。</li></ol><h2 id="找到适合的领域"><a href="#找到适合的领域" class="headerlink" title="找到适合的领域"></a>找到适合的领域</h2><p>多去参加演讲会、讨论会、线下活动、多认识一下爱分享的技术人才</p><h2 id="职业的分类"><a href="#职业的分类" class="headerlink" title="职业的分类"></a>职业的分类</h2><ol><li><p>算法工程师！</p><blockquote><p>机器学习、图形图像处理、自然语言处理<br>适合爱研究耐得住寂寞的一群人</p></blockquote></li><li><p>客户端开发工程师</p><blockquote><p>开发IOS、开发安卓、wed前端、桌面系统<br>培训班大量输出这些人才！（不建议）</p></blockquote></li><li><p>研发工程师！</p><blockquote><p>c、c++、java做系统、搜索引擎、后端<br>服务器端，用户看不到的逻辑处理，往后发展架构师</p></blockquote></li><li><p>数据研发工程师</p><blockquote><p>与大数据相关<br>需要背景、统计学背景</p></blockquote></li><li><p>测试工程师（不建议）</p><blockquote><p>代码测试，检验软件是否通过测试，目前自动化测试不断发展，有淘汰风险不建议往这方面发展</p></blockquote></li><li><p>安全工程师</p><blockquote><p>处理系统的安全隐患，保证系统的安全，掌握多门语言、知识面广</p></blockquote></li><li><p>UED工程师</p><blockquote><p>软件美工，属于美工与代码结合</p></blockquote></li></ol><p>如果有能力自己一定要考研！！！</p><p>指引大佬：b站技术胖</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;大学生生活计划&quot;&gt;&lt;a href=&quot;#大学生生活计划&quot; class=&quot;headerlink&quot; title=&quot;大学生生活计划&quot;&gt;&lt;/a&gt;大学生生活计划&lt;/h1&gt;&lt;h2 id=&quot;值得关注&quot;&gt;&lt;a href=&quot;#值得关注&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="生活" scheme="https://Sanscan12.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="计划" scheme="https://Sanscan12.github.io/tags/%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript API笔记</title>
    <link href="https://sanscan12.github.io/posts/e34f.html"/>
    <id>https://sanscan12.github.io/posts/e34f.html</id>
    <published>2020-04-20T16:00:00.000Z</published>
    <updated>2020-05-30T13:06:13.360Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript初识"><a href="#JavaScript初识" class="headerlink" title="JavaScript初识"></a>JavaScript初识</h1><p>JavaScript是Web页面中的一种脚本编程语言，也是一种通用的、跨平台的、基于对象和事件驱动并具有安全性的脚本语言。它不需要进行编译，而是直接嵌入在HTML页面中，把静态页面转变成支持用户交互并响应相应事件的动态页面。</p><h1 id="在HTML中的使用"><a href="#在HTML中的使用" class="headerlink" title="在HTML中的使用"></a>在HTML中的使用</h1><h2 id="在页面中直接嵌入JavaScript"><a href="#在页面中直接嵌入JavaScript" class="headerlink" title="在页面中直接嵌入JavaScript"></a>在页面中直接嵌入JavaScript</h2><p>​    在HTML文档中可以使用 <code>&lt;script&gt;... &lt;/script&gt;</code>标记将JavaScript脚本嵌入到其中。<br>​<strong>script属性：</strong></p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>language</td><td>不常用</td></tr><tr><td>type</td><td>用于指定使用的脚本类型</td></tr><tr><td>src</td><td>指定外部脚本文件路径</td></tr><tr><td>defer</td><td>不常用</td></tr></tbody></table><p><strong>type属性的语法格式：</strong></p><pre class="line-numbers language-html"><code class="language-html">&lt;script type = "text/javascript"><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="链接外部JavaScript文件"><a href="#链接外部JavaScript文件" class="headerlink" title="链接外部JavaScript文件"></a>链接外部JavaScript文件</h2><p>​    语法格式：<em>多了个src属性</em></p><pre class="line-numbers language-html"><code class="language-html">&lt;script type = "text/javascript" src = "js文件的rul路径"><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意：</strong> </p><ol><li>外部JavaScript文件中只能包含JavaScript代码，不能包含HTML和<code>&lt;script&gt;</code>标签。 </li><li>在<code>&lt;script&gt;</code>标签内部不要存在其他的JavaScript代码。 </li><li>在链接外部JavaScript文件时<code>&lt;/script&gt;</code>结束标签不能省略。</li></ol><h2 id="作为标签的属性值使用"><a href="#作为标签的属性值使用" class="headerlink" title="作为标签的属性值使用"></a>作为标签的属性值使用</h2><p>在HTML文档中可以在<code>&lt;a&gt;</code>标签、<code>&lt;input&gt;</code>标签 中使用JavaScript脚本作为它们的属性值。<br>    <strong>通过“JavaScript”调用</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:alert(<span class="token punctuation">'</span>你好JavaScript<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    <strong>与实践结合调用</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>测试<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alert(<span class="token punctuation">'</span>你好JavaScript <span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><p>程序按照在HTML文件中出现的顺序逐行执行。</p><h2 id="大小写敏感"><a href="#大小写敏感" class="headerlink" title="大小写敏感"></a>大小写敏感</h2><p>在输入语言的关键字、函数名、变量时，都必须采用正确的大小写形式。</p><h2 id="空格与换行"><a href="#空格与换行" class="headerlink" title="空格与换行"></a>空格与换行</h2><p>在JavaScript中会忽略程序中的空格、换行和制表符。</p><h2 id="每行结尾的分号可有可无"><a href="#每行结尾的分号可有可无" class="headerlink" title="每行结尾的分号可有可无"></a>每行结尾的分号可有可无</h2><p>为了养好习惯，经量写上分号。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>注释就是向文件代码中添加的–些说明性的文字，或者对代码进行暂时屏蔽。<code>//内容</code>ro <code>/*内容*/</code></p><hr><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h3><table><thead><tr><th>数值类型</th><th>说明</th></tr></thead><tbody><tr><td>十进制</td><td>由0~9组成的数字序列</td></tr><tr><td>十六进制</td><td>“0X”或“0x”开头数字序列</td></tr><tr><td>八进制</td><td>以0开头</td></tr><tr><td>浮点型</td><td>传统计数法、科学计数法e或E后面的整数表示10的指数次幂</td></tr><tr><td>特殊值Infinity</td><td>超出最大值范围，则正<br />超出最小范围，则负</td></tr><tr><td>特殊值NaN</td><td>非数字</td></tr></tbody></table><p><strong>科学计数法</strong><br>语法格式：</p><pre class="line-numbers language-text"><code class="language-text">[digits] [.digits] [E|e[(+|-)]]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例子：<br>$$<br>4E+2 = 4*10^{2} = 400<br>$$</p><p>$$<br>3.14e4 = 3.14*10^{4} = 31400<br>$$</p><p>$$<br>.14e4 = 0.14*10^{4} = 1400<br>$$</p><p>$$<br>314E-2 = 314*10^{-2} = 3.14<br>$$</p><h3 id="字符串型"><a href="#字符串型" class="headerlink" title="字符串型"></a>字符串型</h3><p>字符串是由0个或多个字符组成的序列，它可以包含<strong>太小写字母、数字、标点符号或其他字符，也可以包含汉字</strong>。程序中的字符串型数据是包含在<strong>单引号或双引号</strong>中的。<br><em>由单引号定界的字符串中可以含有双引号，由双引号定界的字符串中也可以含有单引号。</em></p><pre class="line-numbers language-text"><code class="language-text">"I'm legend" = I'm legend '你好"JavaScript"' = 你好"JavaScript"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>空字符串</strong>不包含任何字符，也不包含任何空格，用一对引号表示，即 “” 或 ‘ ‘<br><strong>转义字符</strong>是<code>\</code>，通过转义字符可以在字符串中<strong>添加不可显示的特殊字符</strong>（例如<code>\n</code>, <code>\t</code>），或者<strong>防止引号匹配混乱</strong>的问题 </p><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><table><thead><tr><th>转义字符</th><th>描述</th></tr></thead><tbody><tr><td>\r</td><td>回车符</td></tr><tr><td>\t</td><td>水平制表符，Tab空 格</td></tr><tr><td>\b</td><td>退格</td></tr><tr><td>\v</td><td>垂直制表符</td></tr><tr><td>\f</td><td>换页</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\ \</td><td>反斜杠</td></tr><tr><td>\OOO</td><td>八进制，范围000~777</td></tr><tr><td>\ ‘</td><td>单引号</td></tr><tr><td>\xHH</td><td>十六进制整数，范围00~FF</td></tr><tr><td>\ “</td><td>双引号</td></tr><tr><td>\uhhhh</td><td>十六进制编码Unicode字符</td></tr></tbody></table><p>在document. write()语句中使用转义字符时，只有将其放在格式化文本块中才会起作用，即脚本必须放在<code>&lt;pre&gt;&lt;/pre&gt;</code>标签内。<br>代码：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;pre>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"网页基础:\nHTML\nCSS\nJavascript"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;pre>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/js1.png" alt=""></p><h3 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h3><p>布尔数据类型只有两个值，一 个是true （真），一个是false （假），它说明了某个事物是真还是假。<br><strong>特殊数据类型：</strong><br>未定义值就是undefined，表示还没赋值</p><h3 id="空值-null"><a href="#空值-null" class="headerlink" title="空值  (null)"></a>空值  (null)</h3><p>用于定义空的或不存在的引用。</p><h3 id="常量与变量"><a href="#常量与变量" class="headerlink" title="常量与变量"></a>常量与变量</h3><p>常量：固定不变数据<br>变量：存储要用的数据<br>如果只是声明了变量，并未对其赋值，则其值默认为undef ined。可以使用var语句重复声明同一个变量，也可以在重复声明变量时为该变量赋一个新值。<br><em>在JavaScript中的变量必须要先定义后使用，没有定义过的变量不能直接使用。</em></p><h2 id="JavaScript的关键字"><a href="#JavaScript的关键字" class="headerlink" title="JavaScript的关键字"></a>JavaScript的关键字</h2><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>abstract</td><td>continue</td><td>finally</td><td>instanceof</td><td>private</td></tr><tr><td>boolean</td><td>default</td><td>float</td><td>int</td><td>public</td></tr><tr><td>break</td><td>do</td><td>for</td><td>interface</td><td>return</td></tr><tr><td>byte</td><td>double</td><td>function</td><td>long</td><td>short</td></tr><tr><td>case</td><td>else</td><td>goto</td><td>native</td><td>static</td></tr><tr><td>catch</td><td>extends</td><td>implements</td><td>new</td><td>super</td></tr><tr><td>char</td><td>false</td><td>import</td><td>null</td><td>switch</td></tr><tr><td>class</td><td>final</td><td>in</td><td>package</td><td>synchronized</td></tr><tr><td>this</td><td>throw</td><td>typeof</td><td>true</td><td>var</td></tr><tr><td>void</td><td>while</td><td>with</td><td></td><td></td></tr></tbody></table><hr><h1 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h1><p>用于在程序中进行加、减、乘、除等运算。</p><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>对操作数进行比较，然后返回一个布尔值true或faIse.</p><blockquote><p><code>&lt;</code> , <code>&lt;=</code> , <code>&gt;</code> , <code>&gt;=</code> , <code>==</code> , <code>!=</code> , <code>===</code> (绝对等于) , <code>!==</code>(绝对不等于)</p></blockquote><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p><strong>简单赋值运算符</strong>：<code>=</code><br><strong>符合赋值运算符</strong>：<code>+=</code> , <code>-=</code> , <code>*=</code> , <code>/=</code> , <code>%=</code></p><h2 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h2><p>用于两个字符串型数据之间的运算符，它的作用是将两个字符串连接起来。<br><em>如果比较字符串，则逐个比较字符的ASCIl码值，ASCII码值大的字符串大。ASCII码值都相等，字符数多的字符串大。</em></p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>用于对一个或多个布尔值进行逻辑运算：<code>&amp;&amp;</code>（与 ）、<code>||</code>（或） 、<code>!</code>(非） </p><h2 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h2><blockquote><p>表达式?结果1:结果2<br>结果1为: <code>true</code><br>结果2为: <code>false</code></p></blockquote><h2 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h2><p>用于将多个表达式排在一起，整个表达式的值为最后一个表达式的值。<br>例子：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token punctuation">,</span> b <span class="token punctuation">,</span> c <span class="token punctuation">,</span> d<span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token punctuation">(</span>b<span class="token operator">=</span><span class="token number">3</span> <span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">4</span> <span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"a最终值为"</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果为 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运算符-typeof"><a href="#运算符-typeof" class="headerlink" title="运算符 (typeof)"></a>运算符 (typeof)</h2><p><font color =#05ffdc>typeof</font> 用于判断操作数的数据类型。语法格式：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">typeof</span> 操作数<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>数据类型（操作数）</th><th>返回值</th></tr></thead><tbody><tr><td>数值型</td><td>number</td></tr><tr><td>字符串型</td><td>string</td></tr><tr><td>布尔型</td><td>boolean</td></tr><tr><td>undefined</td><td>nudefined</td></tr><tr><td>null</td><td>object</td></tr><tr><td>对象</td><td>object</td></tr><tr><td>函数</td><td>functio</td></tr></tbody></table><h2 id="运算符-new"><a href="#运算符-new" class="headerlink" title="运算符 (new)"></a>运算符 (new)</h2><p><font color =#05ffdc>new</font> 用来创建一个新的对象实例。语法格式：</p><blockquote><p>格式1：<br>对象实例名称 = new 对象类型(参数);<br>格式2：<br>对象实例名称 = new 对象类型2;</p></blockquote><h2 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h2><table><thead><tr><th>优先级</th><th>结合性</th><th>运算符</th></tr></thead><tbody><tr><td>最高</td><td>向左</td><td>、[]、()</td></tr><tr><td>由高到低依次排列</td><td></td><td>++、–、-、！、delete、new、typeof、void</td></tr><tr><td></td><td>向左</td><td>*、/、%</td></tr><tr><td></td><td>向左</td><td>+、-</td></tr><tr><td></td><td>向左</td><td>&lt;&lt;、&gt;&gt; 、&gt;&gt;</td></tr><tr><td></td><td>向左</td><td>&lt;、&lt;=、&gt;、&gt;=、in、instanceof</td></tr><tr><td></td><td>向左</td><td>=、!=、=== 、 绝对不等于</td></tr><tr><td></td><td>向左</td><td>&amp;</td></tr><tr><td></td><td>向左</td><td>^</td></tr><tr><td></td><td>向左</td><td>|</td></tr><tr><td></td><td>向左</td><td>&amp;&amp;</td></tr><tr><td></td><td>向左</td><td>||</td></tr><tr><td></td><td>向右</td><td>?:</td></tr><tr><td></td><td>向右</td><td>=</td></tr><tr><td></td><td>向右</td><td>=、/=、%=、+=、-=、&lt;&lt;=、&gt;&gt;=、&gt;&gt;&gt;=、&amp;=、^=、|=</td></tr><tr><td>最低</td><td>向右</td><td>,</td></tr></tbody></table><p><strong>结合性</strong><br>左结合：除了赋值、条件和单目运算符<br>右结合：赋值运算符、条件运算符</p><hr><h1 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h1><p>是<strong>运算符</strong>和<strong>操作数</strong>组合而成的式子。运算结果可分为：<strong>算术表达式</strong>、<strong>字符串表达式</strong>、<strong>逻辑表达式</strong><br><em>表达式是一个相对的概念，在表达式中可以含有若千个子表达式，而且表达式中的一个常量或变量都可以看作是一个表达式。</em></p><h2 id="表达式类型转换"><a href="#表达式类型转换" class="headerlink" title="表达式类型转换"></a>表达式类型转换</h2><h3 id="转换为数值型"><a href="#转换为数值型" class="headerlink" title="转换为数值型"></a>转换为数值型</h3><table><thead><tr><th>类型</th><th>转换为数值型</th></tr></thead><tbody><tr><td>undefined</td><td>NaN</td></tr><tr><td>null</td><td>0</td></tr><tr><td>逻辑型</td><td>true,则为 1 ;false,则为 0</td></tr><tr><td>字符串型</td><td>若内容为数字，则相应的数字，否则为NaN</td></tr><tr><td>其他对象</td><td>NaN（非数字）</td></tr></tbody></table><h3 id="转换为布尔型"><a href="#转换为布尔型" class="headerlink" title="转换为布尔型"></a>转换为布尔型</h3><table><thead><tr><th>类型</th><th>转换为布尔型</th></tr></thead><tbody><tr><td>undefined</td><td>false</td></tr><tr><td>null</td><td>false</td></tr><tr><td>数值型</td><td>值为0或NaN,则结果为false,否则为true</td></tr><tr><td>字符串型</td><td>长度为0，则结果为false,否则为true</td></tr><tr><td>其他对象</td><td>true</td></tr></tbody></table><h3 id="转换为字符串型"><a href="#转换为字符串型" class="headerlink" title="转换为字符串型"></a>转换为字符串型</h3><table><thead><tr><th>类型</th><th>转换为字符串型</th></tr></thead><tbody><tr><td>undefined</td><td>“undefined”</td></tr><tr><td>null</td><td>“null”</td></tr><tr><td>数值型</td><td>NaN、0或者与数值相对应的字符串</td></tr><tr><td>逻辑型</td><td>值true,则为”true”,值为false,则结果为”false”</td></tr><tr><td>其他对象</td><td>若存在，结果为toString()方法的值，否则结果为”undefined”</td></tr></tbody></table><hr><h1 id="语句结构"><a href="#语句结构" class="headerlink" title="语句结构"></a>语句结构</h1><h2 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h2><p>···</p><h2 id="判断语句-if"><a href="#判断语句-if" class="headerlink" title="判断语句 (if)"></a>判断语句 (if)</h2><p><strong>if语句</strong>，语法格式：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>  语句<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>if…else语句</strong>，语法格式：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>  语句<span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>  语句<span class="token number">2</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>if…else if语句</strong>，语法格式：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  语句<span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    语句<span class="token number">2</span><span class="token punctuation">}</span>···<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>表达式n<span class="token punctuation">)</span><span class="token punctuation">{</span>    语句n<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    语句n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>if语句的嵌套</strong></p><p> 套娃格式，if中的if。语法格式：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        语句<span class="token number">1</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        语句<span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        语句<span class="token number">3</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        语句<span class="token number">4</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="分支语句-switch"><a href="#分支语句-switch" class="headerlink" title="分支语句 (switch)"></a>分支语句 (switch)</h2><p><font color =#05ffdc>switch</font> 它根据一个表达式的值，选择不同的分支执行。语法格式：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">switch</span> <span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> 常量表达式<span class="token number">1</span> <span class="token punctuation">:</span>        语句<span class="token number">1</span><span class="token punctuation">;</span>        ···<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> 常量表达式<span class="token number">2</span> <span class="token punctuation">:</span>        语句<span class="token number">2</span><span class="token punctuation">;</span>        ···<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>        ···    <span class="token keyword">case</span> 常量表达式n <span class="token punctuation">:</span>        语句n<span class="token punctuation">;</span>        ···<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        语句n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color = #b3d4fc><strong><em>default语句可以省略。在表达式的值不能与任何一个case语句中的值相匹配的情况下，JavaScript会直接结束switch语句，不进行任何操作。</em></strong></font><br><font color=red><strong><em>case后面常量表达式的数据类型必须与表达式的数据类型相同，否则匹配会全部失败，而去执行default语句中的内容。</em></strong></font><br><font color=red><strong><em>在switch语句中漏写break语句。则会影响其他语句</em></strong></font></p><hr><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="循环语句-while"><a href="#循环语句-while" class="headerlink" title="循环语句 (while)"></a>循环语句 (while)</h3><p><font color =#05ffdc>while</font> 判断，它是利用一个条件来控制是否要继续重复执行这个语句。语法格式：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">while</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">(</span>   语句（循环体）<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><font color =red><strong><em>在使用while语句时，一定要保证循环可以正常结束，即必须保证条件表达式的值存在为false的情况，否则将形成死循环。</em></strong></font></p><h3 id="循环语句-do…while"><a href="#循环语句-do…while" class="headerlink" title="循环语句 (do…while)"></a>循环语句 (do…while)</h3><p><font color =#05ffdc>do…while</font> 后判断，它也是利用一个条件来控制是否要继续重复执行这个语句。语法格式：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">do</span><span class="token punctuation">{</span>   语句<span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="循环语句-for"><a href="#循环语句-for" class="headerlink" title="循环语句 (for)"></a>循环语句 (for)</h3><p><font color =#05ffdc>for</font> 计次循环，一般用于循环次数已知的情况。语法格式：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>初始化表达式<span class="token punctuation">;</span>条件表达式<span class="token punctuation">;</span>迭代表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    语句（循环体）<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><font color = red><strong><em>在使用for语句时，也一定要保证循环可以正常结束，也就是必须保证循环条件的结果存在为false的情况，否则循环体将无休止地执行下去，从而形成死循环。</em></strong></font></p><hr><h2 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h2><h3 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h3><p>用于跳过本次循环，并开始下一次循环。<br><font color = #b3d4fc><em>当使用continue语句跳过本次循环后，如果循环条件的结果为false,则退出<br>循环，否则继续下一次循环。</em></font><br><font color = red><strong><em>continue语句只能应用在while、for、do…while语句中.</em></strong></font></p><h3 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h3><p>在循环语句中，break语句用于跳出循环。</p><p><font color = red><strong><em>continue语句只能应用在while、for、do…while或switch语句中。在嵌套的循环语句中，break语句只能跳出当前这一层的循环语句，而不是跳出所有的循环语句。</em></strong></font></p><hr><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><p>函数是<strong>定义一次</strong>，可以<strong>调用或执行多次</strong>的一段JavaScript代码。定义函数的语法格式：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">[</span>参数<span class="token number">1</span><span class="token punctuation">,</span>参数<span class="token number">2</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    语句    <span class="token punctuation">[</span><span class="token keyword">return</span>返回值<span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2><h3 id="函数的简单调用"><a href="#函数的简单调用" class="headerlink" title="函数的简单调用"></a>函数的简单调用</h3><p>调用的语法格式：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">函数名</span><span class="token punctuation">(</span>传递给函数的参数<span class="token number">1</span><span class="token punctuation">,</span>传递给函数的参数<span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font color = red><strong>函数名有大小写的区分</strong></font></p><h3 id="在事件响应中调用函数"><a href="#在事件响应中调用函数" class="headerlink" title="在事件响应中调用函数"></a>在事件响应中调用函数</h3><p><strong>事件处理流程</strong>：</p><p><font size =5><em>触发事件→调用和执行函数→在页面中产生响应</em></font></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"提交"</span> onclick<span class="token operator">=</span><span class="token string">"[调用函数]"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="通过链接调用函数"><a href="#通过链接调用函数" class="headerlink" title="通过链接调用函数"></a>通过链接调用函数</h3><p>在 <code>&lt; a &gt;</code> 标签中的href(链接地址)属性中使用<code>javascript:函数名()</code>格式来调用函数，单击这个链接时，函数将被执行。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascaript:[调用函数]"</span><span class="token operator">></span> 单击链接 <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><p>函数的参数分为 <strong>形参</strong> 和 <strong>实参</strong><br><strong>形参</strong>：定义函数时指定的参数<br><strong>实参</strong>：调用函数时实际传递的值<br>语法格式：</p><pre class="line-numbers language-javascript"><code class="language-javascript">定义函数参数的语法格式<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span>形参<span class="token number">1</span><span class="token punctuation">,</span>形参<span class="token number">2</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    函数体<span class="token punctuation">}</span>调用函数语法格式<span class="token punctuation">:</span><span class="token function">函数名</span><span class="token punctuation">(</span>实参<span class="token number">1</span><span class="token punctuation">,</span>实参<span class="token number">2</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <font color = red><strong>形参和实参要对应</strong></font></p><hr><h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><p>在函数中，可以使用return语句为函数返回一个值。语法格式：</p><pre class="line-numbers language-javascript"><code class="language-javascript">retutn 表达式<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="嵌套函数"><a href="#嵌套函数" class="headerlink" title="嵌套函数"></a>嵌套函数</h2><h4 id="函数的嵌套定义"><a href="#函数的嵌套定义" class="headerlink" title="函数的嵌套定义"></a>函数的嵌套定义</h4><p>函数的嵌套定义就是在函数内部再定义其他的函数。 会使程序的可读性降低</p><h4 id="函数的嵌套调用"><a href="#函数的嵌套调用" class="headerlink" title="函数的嵌套调用"></a>函数的嵌套调用</h4><p>允许在一个函数的函数体中对另一个函数进行调 用</p><hr><h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><p>所谓递归函数就是函数在自身的函数体内调用自身，<strong>只在特定的情况下使用</strong>。语法格式：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span>参数<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">函数名</span><span class="token punctuation">(</span>参数<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><font color = red><strong>注意判断结束条件，否则死循环！！！</strong></font></p><hr><h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><table><thead><tr><th>内置函数</th><th></th></tr></thead><tbody><tr><td>parseInt()</td><td>数值处理 <strong>前四个</strong></td></tr><tr><td>parseFloat()</td><td></td></tr><tr><td>isNaN()</td><td></td></tr><tr><td>isFinite()</td><td></td></tr><tr><td>eval()</td><td>字符串处理函数 <strong>后五个</strong></td></tr><tr><td>escape()</td><td></td></tr><tr><td>unescape()</td><td></td></tr><tr><td>encodeURI()</td><td></td></tr><tr><td>decodeURI()</td><td></td></tr></tbody></table><h3 id="数值处理函数"><a href="#数值处理函数" class="headerlink" title="数值处理函数"></a>数值处理函数</h3><h4 id="字符转数字函数-parseInt"><a href="#字符转数字函数-parseInt" class="headerlink" title="字符转数字函数  ( parseInt )"></a>字符转数字函数  ( parseInt )</h4><p><font color =#05ffdc>parseInt </font><strong>将首位为数字的字符串转换成数字</strong>，字符串开头不是数字的字符，则返回<code>NaN</code>，<strong>前提是默认十进制</strong>。语法格式：（默认十进制）</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">parseInt</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span><span class="token punctuation">[</span>进制数<span class="token punctuation">]</span><span class="token punctuation">)</span> 如<span class="token punctuation">:</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"e2b"</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>结果为<span class="token punctuation">:</span><span class="token number">3627</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="字符转浮点函数-parseFloat"><a href="#字符转浮点函数-parseFloat" class="headerlink" title="字符转浮点函数 (parseFloat)"></a>字符转浮点函数 (parseFloat)</h4><p><font color =#05ffdc>parseFloat</font> <strong>将首位为数字的字符串转化成浮点型数字</strong>，字符串不是以数字开头，则返回NaN。语法格式：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">parseFloat</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>如<span class="token punctuation">:</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"5.411"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="检验函数-isNaN"><a href="#检验函数-isNaN" class="headerlink" title="检验函数 (isNaN)"></a>检验函数 (isNaN)</h4><p><font color =#05ffdc>isNaN </font> <strong>检验某个值是否为NaN</strong>。语法格式：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">isNaN</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>返回值：</strong><br>结果为<code>NaN</code> 函数返回值为<code>true</code><br>否则，函数返回值为<code>false</code></p></blockquote><h4 id="检验限度函数-isFinite"><a href="#检验限度函数-isFinite" class="headerlink" title="检验限度函数 (isFinite)"></a>检验限度函数 (isFinite)</h4><p><font color =#05ffdc>isFinite</font> <strong>检验其参数是否有限</strong>。语法格式：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">isFinite</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>num：需要验证的数字</p><blockquote><p><strong>返回值：</strong><br>有限数字，则返回<code>true</code><br>NaN或无穷大，则返回<code>false</code></p></blockquote><p><strong>代码示范：</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>        <span class="token keyword">var</span> no1 <span class="token operator">=</span> <span class="token string">"123abc"</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> no2 <span class="token operator">=</span> <span class="token string">"abc123"</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> no3 <span class="token operator">=</span> <span class="token string">"e2b"</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> no4 <span class="token operator">=</span> <span class="token string">"3434.43"</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> no5 <span class="token operator">=</span> <span class="token string">"abb434.43"</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> no6 <span class="token operator">=</span> <span class="token string">"12322"</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> no7 <span class="token operator">=</span> <span class="token string">"1232a2"</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> no8 <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> no9 <span class="token operator">=</span> <span class="token string">"123abc"</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> no10 <span class="token operator">=</span> <span class="token string">"1/0"</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"parseInt:"</span><span class="token operator">+</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"123abc = "</span><span class="token operator">+</span><span class="token function">parseInt</span><span class="token punctuation">(</span>no1<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"abc123 = "</span><span class="token operator">+</span><span class="token function">parseInt</span><span class="token punctuation">(</span>no2<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"e2b = "</span><span class="token operator">+</span><span class="token function">parseInt</span><span class="token punctuation">(</span>no3<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>"</span><span class="token operator">+</span><span class="token string">"parseFloat:"</span><span class="token operator">+</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"3434.43 = "</span><span class="token operator">+</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>no4<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"abb434.43 = "</span><span class="token operator">+</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>no5<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>"</span><span class="token operator">+</span><span class="token string">"isNaN:"</span><span class="token operator">+</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"12322 = "</span><span class="token operator">+</span><span class="token function">isNaN</span><span class="token punctuation">(</span>no6<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"1232a2 = "</span><span class="token operator">+</span><span class="token function">isNaN</span><span class="token punctuation">(</span>no7<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>"</span><span class="token operator">+</span><span class="token string">"isFinite:"</span><span class="token operator">+</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"123 = "</span><span class="token operator">+</span><span class="token function">isFinite</span><span class="token punctuation">(</span>no8<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"123abc = "</span><span class="token operator">+</span><span class="token function">isFinite</span><span class="token punctuation">(</span>no9<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"1/0 = "</span><span class="token operator">+</span><span class="token function">isFinite</span><span class="token punctuation">(</span>no10<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/js2.png" alt=""></p><hr><h3 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h3><h4 id="字符表达式值函数-eval"><a href="#字符表达式值函数-eval" class="headerlink" title="字符表达式值函数 (eval)"></a>字符表达式值函数 (eval)</h4><p><font color =#05ffdc>eval</font> <strong>计算字符串表达式的值</strong>并执行。语法格式：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">eval</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如: eval("5 * 4")</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="字符串编码函数-escape"><a href="#字符串编码函数-escape" class="headerlink" title="字符串编码函数 (escape)"></a>字符串编码函数 (escape)</h4><p><font color =#05ffdc>escape</font> <strong>将一些特殊字符</strong>(不包括字母和数字字符以及<em>、@、一、_、+、.和/)*</em>进行编码<strong>，它可以将这些特殊字符转换为“</strong>%XX**” 格式的数字。语法格式：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">escape</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如: escape("You &amp; Me") →You%20%26%20Me</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="字符串解码函数-unescape"><a href="#字符串解码函数-unescape" class="headerlink" title="字符串解码函数 (unescape)"></a>字符串解码函数 (unescape)</h4><p><font color =#05ffdc>unescape</font> <strong>对应用escape()函数编码后的字符串进行解码</strong>。它可以将字符串中“<strong>%XX</strong>”格式的数字转换为字符。语法格式：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">unescape</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如: unescape("You%20%26%20Me") →You &amp; Me</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="URL编码函数-encodeURI"><a href="#URL编码函数-encodeURI" class="headerlink" title="URL编码函数 (encodeURI )"></a>URL编码函数 (encodeURI )</h4><p><font color =#05ffdc>encodeURI </font> <strong>将URI字符串进行编码</strong>，语法格式：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">encodeURI</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如:encodeURI("https://www.baidu.com/?name=测试");</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="URL解码函数-decodeURI"><a href="#URL解码函数-decodeURI" class="headerlink" title="URL解码函数 (decodeURI)"></a>URL解码函数 (decodeURI)</h4><p><font color =#05ffdc>decodeURI</font> <strong>对已编码URI字符串进行解码，</strong>语法格式：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">decodeURI</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如:decodeURI("https://www.baidu.com/?name=%E6%B5%8B%E8%AF%95")</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>代码示范：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"eval:"</span><span class="token operator">+</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"3+5 ="</span><span class="token operator">+</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"3+5"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"3*4/2+1 = "</span><span class="token operator">+</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"3*4/2+1"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"x = 5 ; y = 6 ; document.write(x * y)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token operator">+</span><span class="token string">"escape:"</span><span class="token operator">+</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"I%20love%20JS%20%21%21%21 ="</span><span class="token operator">+</span><span class="token function">escape</span><span class="token punctuation">(</span><span class="token string">"I love JS !!!"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>"</span><span class="token operator">+</span><span class="token string">"unescape:"</span><span class="token operator">+</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"I love JS !!! = "</span><span class="token operator">+</span><span class="token function">unescape</span><span class="token punctuation">(</span><span class="token string">"I%20love%20JS%20%21%21%21"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>"</span><span class="token operator">+</span><span class="token string">"encodeURI:"</span><span class="token operator">+</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com/?name=%E6%B5%8B%E8%AF%95 = "</span><span class="token operator">+</span><span class="token function">encodeURI</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com/?name=测试"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>"</span><span class="token operator">+</span><span class="token string">"decodeURI:"</span><span class="token operator">+</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com/?name=测试 = "</span><span class="token operator">+</span><span class="token function">decodeURI</span><span class="token punctuation">(</span><span class="token string">"decodeURI(\"https://www.baidu.com/?name=%E6%B5%8B%E8%AF%95\")"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/js3.png" style="zoom: 67%;" /><hr><h2 id="定义函数的其他方法"><a href="#定义函数的其他方法" class="headerlink" title="定义函数的其他方法"></a>定义函数的其他方法</h2><h3 id="定义匿名函数"><a href="#定义匿名函数" class="headerlink" title="定义匿名函数"></a>定义匿名函数</h3><p><strong>语法格式：</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> 变量名 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>参数<span class="token number">1</span>，参数<span class="token number">2</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    函数体<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>个人练习以及使用方法：</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/*1~20筛选3的倍数*/</span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>        <span class="token keyword">var</span> and <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>              document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token string">"、"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"1~20的三的倍数有："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">20</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">and</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="Function-构造函数"><a href="#Function-构造函数" class="headerlink" title="Function() 构造函数"></a>Function() 构造函数</h3><p><strong>语法格式：</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> 变量名 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">"参数1"</span><span class="token punctuation">,</span><span class="token string">"参数2"</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token string">"函数体"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font color = red><strong>一定要用双引号或单引号引起来。</strong></font></p><p><strong>个人练习以及使用方法：</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>        <span class="token keyword">var</span> vc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span><span class="token string">"y"</span><span class="token punctuation">,</span><span class="token string">"z"</span><span class="token punctuation">,</span><span class="token string">"document.write(x+y+z);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">vc</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="对象与数组"><a href="#对象与数组" class="headerlink" title="对象与数组"></a>对象与数组</h1><h2 id="Object-对象"><a href="#Object-对象" class="headerlink" title="Object 对象"></a>Object 对象</h2><p>Object对象功能最全，所有对象的基础</p><h3 id="Object-对象创建"><a href="#Object-对象创建" class="headerlink" title="Object 对象创建"></a>Object 对象创建</h3><pre class="line-numbers language-javascript"><code class="language-javascript">obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>参数说明：<br><strong>obj</strong> ：赋值为Object 对象的变量名<br><strong>value</strong>：任意的基本数据类型，空值则没内容</p></blockquote><h3 id="Object-对象属性"><a href="#Object-对象属性" class="headerlink" title="Object 对象属性"></a>Object 对象属性</h3><p><font color =#05ffdc>prototype</font> 属性。返回对象类型原型的引用</p><pre class="line-numbers language-javascript"><code class="language-javascript">objectName<span class="token punctuation">.</span>prototype<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>参数说明：<br><strong>objectName</strong>：对象名称<br><strong>prototype</strong>：提供对象的类的一组新的基本功能</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>        <span class="token keyword">function</span> <span class="token function">array_max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> i <span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                    max <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> max<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>max <span class="token operator">=</span> array_max<span class="token punctuation">;</span>        <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"MAX："</span><span class="token operator">+</span>x<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color =#05ffdc>constructor</font> 属性。表示创建对象的函数</p><pre class="line-numbers language-javascript"><code class="language-javascript">object<span class="token punctuation">.</span>constructor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>参数说明：</p><p><strong>object</strong>：对象或函数名称<br><strong>constructor</strong>：保存了对构造特定对象实例的函数的引用，除了Global和Math对象</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>        x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>constructor <span class="token operator">==</span> String<span class="token punctuation">)</span><span class="token punctuation">{</span>            document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"真 ： "</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">/*ro: */</span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>        <span class="token keyword">function</span> <span class="token function">MyFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        y <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token punctuation">.</span>constructor <span class="token operator">==</span> MyFunc<span class="token punctuation">)</span><span class="token punctuation">{</span>            document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"真 ： "</span><span class="token operator">+</span><span class="token function">MyFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Object-对象方法"><a href="#Object-对象方法" class="headerlink" title="Object 对象方法"></a>Object 对象方法</h3><p><font color =#05ffdc>toLocaleString() </font> 方法。返回日期，该日期使用当前区域设置并已被转换为字符串</p><pre class="line-numbers language-javascript"><code class="language-javascript">dateObj<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>参数说明：</p><p><strong>dateObj</strong>：为任意的Datc对象</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>  <span class="token keyword">var</span> Object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><font color =#05ffdc>toString()</font> 方法。返回对象的字符串表示</p><pre class="line-numbers language-javascript"><code class="language-javascript">objectname<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">[</span>radix<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>参数说明：</p><p><strong>objctname</strong>：要得到字符串表示的对象<br><strong>radix</strong>：指定将数字值转换为字符串时的进制</p></blockquote><table><thead><tr><th>对象</th><th>操作</th></tr></thead><tbody><tr><td>Array</td><td>将ArrayArray的元素转换为字符串</td></tr><tr><td>Boolean</td><td>如果Boolean值为 true，则返回true，否则返回 false</td></tr><tr><td>Date</td><td>返回日期的文字表示法</td></tr><tr><td>Error</td><td>返回包含相关错误消息的字符串</td></tr><tr><td>Function</td><td>返回格式的字符串</td></tr><tr><td>Number</td><td>返回数字的文字表示</td></tr><tr><td>String</td><td>返回String对象的值</td></tr><tr><td>默认</td><td>返回[object objectname]，对象类型的名称</td></tr></tbody></table><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>    <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法 测试<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>        <span class="token comment" spellcheck="true">// Array</span>        <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"George"</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"John"</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Sanscan"</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Array:  "</span><span class="token operator">+</span>arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Boolean</span>        <span class="token keyword">var</span> bool <span class="token operator">=</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Boolean:  "</span><span class="token operator">+</span>bool<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Date</span>        <span class="token keyword">var</span> de <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Date:   "</span><span class="token operator">+</span>de<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Number</span>        <span class="token keyword">var</span> ber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">123321</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Number:   "</span><span class="token operator">+</span>ber<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//String</span>        <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Sanscan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"String:   "</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color =#05ffdc>valueOf()</font> 方法。返回指定对象的初始值</p><pre class="line-numbers language-javascript"><code class="language-javascript">object<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>参数说明：</p><p><strong>object</strong>：是任意固有JavaScript对象</p></blockquote><table><thead><tr><th>对象</th><th>返回值</th></tr></thead><tbody><tr><td>Array</td><td>数组的元素被转换为字符串，每个元素用逗号分隔</td></tr><tr><td>Boolem</td><td>Boolem值</td></tr><tr><td>Date</td><td>存储的时间是从1970.1.1 00:00:00 开始​</td></tr><tr><td>Function</td><td>函数本身</td></tr><tr><td>Number</td><td>数字值</td></tr><tr><td>Object</td><td>对象本身（默认）</td></tr><tr><td>String</td><td>字符串值</td></tr></tbody></table><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>    <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法 测试<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token comment" spellcheck="true">// Array</span>    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"George"</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"John"</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Sanscan"</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Array:  "</span><span class="token operator">+</span>arr<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Boolean</span>    <span class="token keyword">var</span> boo <span class="token operator">=</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Boolean:   "</span><span class="token operator">+</span>boo<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Date (时间截)</span>    <span class="token keyword">var</span> de <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Date:   "</span><span class="token operator">+</span>de<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Number</span>    <span class="token keyword">var</span> nbr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token string">"1123123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Number:   "</span><span class="token operator">+</span>nbr<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//String</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Sanscan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"String:   "</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="String-对象"><a href="#String-对象" class="headerlink" title="String 对象"></a>String 对象</h2><p>String对象是动态对象，需要创建对象实例后才能引用属性和方法，该对象主要用于处理或格式化文本字符串</p><h3 id="String-对象创建"><a href="#String-对象创建" class="headerlink" title="String 对象创建"></a>String 对象创建</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>String_Text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>参数说明：</p><p><strong>str</strong>：创建String对象名<br><strong>String_Text</strong>：字符串文本</p></blockquote><h3 id="String-对象属性"><a href="#String-对象属性" class="headerlink" title="String 对象属性"></a>String 对象属性</h3><p><font color =#05ffdc>lenght</font> 属性。获取字符串的长度</p><pre class="line-numbers language-javascript"><code class="language-javascript">（整型）stringObject<span class="token punctuation">.</span>length <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>参数说明：</p><p><strong>stringObject</strong>： 字符串</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abcdefg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> p <span class="token operator">=</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"str: "</span><span class="token operator">+</span>str<span class="token operator">+</span><span class="token string">"。str个数为："</span><span class="token operator">+</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color =#05ffdc>constructor</font> 属性。对当前对象的函数引用</p><pre class="line-numbers language-javascript"><code class="language-javascript">（Object本身对象）Object<span class="token punctuation">.</span>constructor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>参数说明：</p><p><strong>Object</strong>：String对象 或 字符变量名</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">var</span> No1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token number">33.123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"No1("</span><span class="token operator">+</span>No1<span class="token operator">+</span><span class="token string">")是："</span><span class="token operator">+</span>No1<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> No2 <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token string">"Sans"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"No2("</span><span class="token operator">+</span>No2<span class="token operator">+</span><span class="token string">")是："</span><span class="token operator">+</span>No2<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span>    <span class="token keyword">function</span> <span class="token function">student</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>year<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> No3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">student</span><span class="token punctuation">(</span><span class="token string">"sanscan"</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"No3("</span><span class="token operator">+</span>No3<span class="token operator">+</span><span class="token string">")是："</span><span class="token operator">+</span>No3<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color =#05ffdc>prototype</font> 属性。可以为对象添加属性和方法</p><pre class="line-numbers language-javascript"><code class="language-javascript">object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>参数说明：</p><p><strong>object</strong>：对象名或字符变量名<br><strong>name</strong>：要添加的属性名<br><strong>value</strong>：添加属性的值</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>     <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> age<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">var</span> inf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">fun</span><span class="token punctuation">(</span><span class="token string">"sanscan"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     fun<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>salary <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>     inf<span class="token punctuation">.</span>salary <span class="token operator">=</span> <span class="token number">1700</span><span class="token punctuation">;</span>     document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>inf<span class="token punctuation">.</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="String-对象方法"><a href="#String-对象方法" class="headerlink" title="String 对象方法"></a>String 对象方法</h3><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">anchor()</td><td align="left">创建 HTML 锚</td></tr><tr><td align="left">big()</td><td align="left">用大号字体显示字符串</td></tr><tr><td align="left">blink()</td><td align="left">显示闪动字符串</td></tr><tr><td align="left">bold()</td><td align="left">使用粗体显示字符串</td></tr><tr><td align="left">charAt()</td><td align="left">返回在指定位置的字符</td></tr><tr><td align="left">charCodeAt()</td><td align="left">返回在指定的位置的字符的 Unicode 编码</td></tr><tr><td align="left">concat()</td><td align="left">连接字符串</td></tr><tr><td align="left">fixed()</td><td align="left">以打字机文本显示字符串</td></tr><tr><td align="left">fontcolor()</td><td align="left">使用指定的颜色来显示字符串</td></tr><tr><td align="left">fontsize()</td><td align="left">使用指定的尺寸来显示字符串</td></tr><tr><td align="left">fromCharCode()</td><td align="left">从字符编码创建一个字符串</td></tr><tr><td align="left">indexOf()</td><td align="left">检索字符串</td></tr><tr><td align="left">italics()</td><td align="left">使用斜体显示字符串</td></tr><tr><td align="left">lastIndexOf()</td><td align="left">从后向前搜索字符串</td></tr><tr><td align="left">link()</td><td align="left">将字符串显示为链接</td></tr><tr><td align="left">localeCompare()</td><td align="left">用本地特定的顺序来比较两个字符串</td></tr><tr><td align="left">match()</td><td align="left">找到一个或多个正则表达式的匹配</td></tr><tr><td align="left">replace()</td><td align="left">替换与正则表达式匹配的子串</td></tr><tr><td align="left">search()</td><td align="left">检索与正则表达式相匹配的值</td></tr><tr><td align="left">slice()</td><td align="left">提取字符串的片断，并在新的字符串中返回被提取的部分</td></tr><tr><td align="left">small()</td><td align="left">使用小字号来显示字符串</td></tr><tr><td align="left">split()</td><td align="left">把字符串分割为字符串数组</td></tr><tr><td align="left">strike()</td><td align="left">使用删除线来显示字符串</td></tr><tr><td align="left">sub()</td><td align="left">把字符串显示为下标</td></tr><tr><td align="left">substr()</td><td align="left">从起始索引号提取字符串中指定数目的字符</td></tr><tr><td align="left">substring()</td><td align="left">提取字符串中两个指定的索引号之间的字符</td></tr><tr><td align="left">sup()</td><td align="left">把字符串显示为上标</td></tr><tr><td align="left">toLocaleLowerCase()</td><td align="left">把字符串转换为小写</td></tr><tr><td align="left">toLocaleUpperCase()</td><td align="left">把字符串转换为大写</td></tr><tr><td align="left">toLowerCase()</td><td align="left">把字符串转换为小写</td></tr><tr><td align="left">toUpperCase()</td><td align="left">把字符串转换为大写</td></tr><tr><td align="left">toSource()</td><td align="left">代表对象的源代码</td></tr><tr><td align="left">toString()</td><td align="left">返回字符串</td></tr><tr><td align="left">valueOf()</td><td align="left">返回某个字符串对象的原始值</td></tr></tbody></table><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>        <span class="token comment" spellcheck="true">//anchor()</span>        <span class="token keyword">var</span> txt <span class="token operator">=</span> <span class="token string">"Hello world!"</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"anchor() 创建 HTML 锚 :  "</span><span class="token operator">+</span>txt<span class="token punctuation">.</span><span class="token function">anchor</span><span class="token punctuation">(</span><span class="token string">"myanchor"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//big()</span>        <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"Hello world!"</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"big() 用大号字体显示字符串 : "</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">big</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//blink()</span>        <span class="token keyword">var</span> str2<span class="token operator">=</span><span class="token string">"Hello world!"</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"blink() 显示闪动字符串 : "</span><span class="token operator">+</span>str2<span class="token punctuation">.</span><span class="token function">blink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//bold()</span>        <span class="token keyword">var</span> str3 <span class="token operator">=</span><span class="token string">"Hello world!"</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"bold() 使用粗体显示字符串 : "</span><span class="token operator">+</span>str3<span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//charAt()</span>        <span class="token keyword">var</span> str4<span class="token operator">=</span><span class="token string">"Hello world!"</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"charAt() 返回在指定位置(1)的字符 : "</span><span class="token operator">+</span>str4<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//charCodeAt()</span>        <span class="token keyword">var</span> str5<span class="token operator">=</span><span class="token string">"Hello world!"</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"charCodeAt() 返回在指定的位置的字符的 Unicode 编码 : "</span><span class="token operator">+</span>str5<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//concat()</span>        <span class="token keyword">var</span> str6<span class="token operator">=</span><span class="token string">"Hello "</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> str7<span class="token operator">=</span><span class="token string">"world!"</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"concat() 连接字符串 : "</span><span class="token operator">+</span>str6<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>str7<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//fixed()</span>        <span class="token keyword">var</span> str8<span class="token operator">=</span><span class="token string">"Hello world!"</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"fixed() 以打字机文本显示字符串 : "</span><span class="token operator">+</span>str8<span class="token punctuation">.</span><span class="token function">fixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//fontcolor()</span>        <span class="token keyword">var</span> str9<span class="token operator">=</span><span class="token string">"Hello world!"</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"fontcolor() 使用指定的颜色来显示字符串 : "</span><span class="token operator">+</span>str9<span class="token punctuation">.</span><span class="token function">fontcolor</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//fontsize()</span>        <span class="token keyword">var</span> str10<span class="token operator">=</span><span class="token string">"Hello world!"</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"fontsize() 使用指定的尺寸来显示字符串 : "</span><span class="token operator">+</span>str10<span class="token punctuation">.</span><span class="token function">fontsize</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//fromCharCode()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"fromCharCode() 从字符编码创建一个字符串 : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">72</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">79</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"、"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//indexOf()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"indexOf() 检索字符串 : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> str11<span class="token operator">=</span><span class="token string">"Hello world!"</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str11<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"、"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str11<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"、"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str11<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//italics()</span>        <span class="token keyword">var</span> str12<span class="token operator">=</span><span class="token string">"Hello world!"</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"italics() 使用斜体显示字符串 : "</span><span class="token operator">+</span>str12<span class="token punctuation">.</span><span class="token function">italics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//lastIndexOf()</span>        <span class="token keyword">var</span> str13<span class="token operator">=</span><span class="token string">"Hello world!"</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"lastIndexOf() 从后向前搜索字符串 : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str13<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"、"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str13<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"、"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str13<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//link()</span>        <span class="token keyword">var</span> str14<span class="token operator">=</span><span class="token string">"Personal blog!"</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"link() 将字符串显示为链接 : "</span><span class="token operator">+</span>str14<span class="token punctuation">.</span><span class="token function">link</span><span class="token punctuation">(</span><span class="token string">"http://Sanscan.top/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//localeCompare()</span>        <span class="token comment" spellcheck="true">// var str15;</span>        <span class="token comment" spellcheck="true">// document.write("localeCompare() 用本地特定的顺序来比较两个字符串 : "+str15.sort (a.localeCompare(b)) );</span>        <span class="token comment" spellcheck="true">// document.write("&lt;br/>&lt;br/>");</span>        <span class="token comment" spellcheck="true">//match()</span>        <span class="token keyword">var</span> str16 <span class="token operator">=</span> <span class="token string">"Hello world!"</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"match() 找到一个或多个正则表达式的匹配 : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str16<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"、"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str16<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"、"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str16<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">"worlld"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"、"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str16<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">"world!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//replace()</span>        <span class="token keyword">var</span> str17 <span class="token operator">=</span><span class="token string">"Visit Microsoft!"</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"replace() 替换与正则表达式匹配的子串 : "</span><span class="token operator">+</span>str17<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/Microsoft/</span><span class="token punctuation">,</span> <span class="token string">"Sanscan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//search()</span>        <span class="token keyword">var</span> str18<span class="token operator">=</span><span class="token string">"Visit Sanscan!"</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"search() 检索与正则表达式相匹配的值 : "</span><span class="token operator">+</span>str18<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex">/Sanscan/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//slice()</span>        <span class="token keyword">var</span> str19<span class="token operator">=</span><span class="token string">"Hello happy world!"</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"slice() 提取字符串的片断，并在新的字符串中返回被提取的部分 : "</span><span class="token operator">+</span>str19<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//small()</span>        <span class="token keyword">var</span> str20<span class="token operator">=</span><span class="token string">"Hello world!"</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"small() 使用小字号来显示字符串 : "</span><span class="token operator">+</span>str20<span class="token punctuation">.</span><span class="token function">small</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//split()</span>        <span class="token keyword">var</span> str21<span class="token operator">=</span><span class="token string">"How are you doing today?"</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"split() 把字符串分割为字符串数组 : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str21<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"、"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str21<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"、"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str21<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//strike()</span>        <span class="token keyword">var</span> str22<span class="token operator">=</span><span class="token string">"Hello world!"</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"strike() 使用删除线来显示字符串 : "</span><span class="token operator">+</span>str22<span class="token punctuation">.</span><span class="token function">strike</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//sub()</span>        <span class="token keyword">var</span> str23<span class="token operator">=</span><span class="token string">"Hello world!"</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"sub() 把字符串显示为下标 : "</span><span class="token operator">+</span>str23<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//substr()</span>        <span class="token keyword">var</span> str24<span class="token operator">=</span><span class="token string">"Hello world!"</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"substr() 从起始索引号提取字符串中指定数目(3)的字符 : "</span><span class="token operator">+</span>str24<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//substring()</span>        <span class="token keyword">var</span> str25<span class="token operator">=</span><span class="token string">"Hello world!"</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"substring() 提取字符串中两个指定的索引号之间的字符(3) ： "</span><span class="token operator">+</span>str25<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//sup()</span>        <span class="token keyword">var</span> str26<span class="token operator">=</span><span class="token string">"Hello world!"</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"sup() 把字符串显示为上标 : "</span><span class="token operator">+</span>str26<span class="token punctuation">.</span><span class="token function">sup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//toLocaleLowerCase()</span>        <span class="token keyword">var</span> str27<span class="token operator">=</span><span class="token string">"Hello World!"</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"toLocaleLowerCase() 把字符串转换为小写 : "</span><span class="token operator">+</span>str27<span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//toLocaleUpperCase()</span>        <span class="token keyword">var</span> str28<span class="token operator">=</span><span class="token string">"Hello World!"</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"toLocaleUpperCase() 把字符串转换为大写 : "</span><span class="token operator">+</span>str28<span class="token punctuation">.</span><span class="token function">toLocaleUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//toLowerCase()</span>        <span class="token keyword">var</span> str29<span class="token operator">=</span><span class="token string">"Hello World!"</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"toLowerCase() 把字符串转换为小写 : "</span><span class="token operator">+</span>str29<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//toUpperCase()</span>        <span class="token keyword">var</span> str30<span class="token operator">=</span><span class="token string">"Hello World!"</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"toUpperCase() 把字符串转换为大写 : "</span><span class="token operator">+</span>str30<span class="token punctuation">.</span><span class="token function">toLocaleUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h2><p>实现对日期和时间的控制。</p><h3 id="Date-对象创建"><a href="#Date-对象创建" class="headerlink" title="Date 对象创建"></a>Date 对象创建</h3><pre class="line-numbers language-javascript"><code class="language-javascript">dateObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>dateObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>date Val<span class="token punctuation">)</span>dateObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>year <span class="token punctuation">,</span> month <span class="token punctuation">,</span> date<span class="token punctuation">[</span><span class="token punctuation">,</span>hours<span class="token punctuation">[</span><span class="token punctuation">,</span>minutes<span class="token punctuation">[</span><span class="token punctuation">,</span>seconds<span class="token punctuation">[</span><span class="token punctuation">,</span>ms<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参数说明：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>dateObj</td><td>要赋值为Date对象的变量名</td></tr><tr><td>dateVal</td><td>是<strong>数字</strong>，则为时间戳；是<strong>字符串</strong>，则按照parsc方法进行解析</td></tr><tr><td>year</td><td>年份</td></tr><tr><td>month</td><td>月份</td></tr><tr><td>date</td><td>日期</td></tr><tr><td>hours</td><td>小时，范围：0 ~ 23 的整数</td></tr><tr><td>minutes</td><td>分钟，范围：0~59 的整数</td></tr><tr><td>seconds</td><td>秒，范围：0~59 的整数</td></tr><tr><td>ms</td><td>毫秒，范围：0~999 的整数</td></tr></tbody></table><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token comment" spellcheck="true">//现在日期和时间</span>    <span class="token keyword">var</span> dat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>dat<span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//自定日期</span>    <span class="token keyword">var</span> dat2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2008</span> <span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>dat2<span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//自定日期和时间</span>    <span class="token keyword">var</span> dat3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2008</span> <span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>dat3<span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//完整精确</span>    <span class="token keyword">var</span> dat4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"Jan 2,2008 19:18:50"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>dat4<span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Date-对象属性"><a href="#Date-对象属性" class="headerlink" title="Date 对象属性"></a>Date 对象属性</h3><p><font color =#05ffdc>constructor</font> 属性。判断是否为日期对象</p><pre class="line-numbers language-javascript"><code class="language-javascript">（thedate对象本身）thedate<span class="token punctuation">.</span>constructor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>        <span class="token keyword">var</span> dat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dat <span class="token operator">==</span> Date<span class="token punctuation">)</span><span class="token punctuation">{</span>            document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>dat<span class="token operator">+</span><span class="token string">"是日期对象！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>dat<span class="token operator">+</span><span class="token string">"不是日期对象！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color =#05ffdc>prototype</font> 属性。自定义属性来记录当前日期是本周的几周</p><pre class="line-numbers language-javascript"><code class="language-javascript">dateName<span class="token punctuation">.</span>prototype<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>参数说明：<br><strong>dateName</strong>：对象名称<br><strong>prototype</strong>：提供对象的类的一组新的基本功能</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>        <span class="token keyword">var</span> dat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//向对象中添加属性</span>        Date<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>mark <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//向对象的属性赋值</span>        dat<span class="token punctuation">.</span>mark <span class="token operator">=</span> dat<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"今周的周"</span><span class="token operator">+</span>dat<span class="token punctuation">.</span>mark<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Date-对象方法"><a href="#Date-对象方法" class="headerlink" title="Date 对象方法"></a>Date 对象方法</h3><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">Date()</td><td align="left">返回当日的日期和时间</td></tr><tr><td align="left">getDate()</td><td align="left">从 Date 对象返回一个月中的某一天 (1 ~ 31)</td></tr><tr><td align="left">getDay()</td><td align="left">从 Date 对象返回一周中的某一天 (0 ~ 6)</td></tr><tr><td align="left">getMonth()</td><td align="left">从 Date 对象返回月份 (0 ~ 11)</td></tr><tr><td align="left">getFullYear()</td><td align="left">从 Date 对象以四位数字返回年份</td></tr><tr><td align="left">getYear()</td><td align="left">从 Date 对象以两位或四位数字返回年份</td></tr><tr><td align="left">getHours()</td><td align="left">返回 Date 对象的小时 (0 ~ 23)</td></tr><tr><td align="left">getMinutes()</td><td align="left">返回 Date 对象的分钟 (0 ~ 59)</td></tr><tr><td align="left">getSeconds()</td><td align="left">返回 Date 对象的秒数 (0 ~ 59)</td></tr><tr><td align="left">getMilliseconds()</td><td align="left">返回 Date 对象的毫秒(0 ~ 999)</td></tr><tr><td align="left">getTime()</td><td align="left">返回 1970 年 1 月 1 日至今的毫秒数</td></tr><tr><td align="left">getTimezoneOffset()</td><td align="left">返回本地时间与格林威治标准时间 (GMT) 的分钟差</td></tr><tr><td align="left">getUTCDate()</td><td align="left">根据世界时从 Date 对象返回月中的一天 (1 ~ 31)</td></tr><tr><td align="left">getUTCDay()</td><td align="left">根据世界时从 Date 对象返回周中的一天 (0 ~ 6)</td></tr><tr><td align="left">getUTCMonth()</td><td align="left">根据世界时从 Date 对象返回月份 (0 ~ 11)</td></tr><tr><td align="left">getUTCFullYear()</td><td align="left">根据世界时从 Date 对象返回四位数的年份</td></tr><tr><td align="left">getUTCHours()</td><td align="left">根据世界时返回 Date 对象的小时 (0 ~ 23)</td></tr><tr><td align="left">getUTCMinutes()</td><td align="left">根据世界时返回 Date 对象的分钟 (0 ~ 59)</td></tr><tr><td align="left">getUTCSeconds()</td><td align="left">根据世界时返回 Date 对象的秒钟 (0 ~ 59)</td></tr><tr><td align="left">getUTCMilliseconds()</td><td align="left">根据世界时返回 Date 对象的毫秒(0 ~ 999)</td></tr><tr><td align="left">parse()</td><td align="left">返回1970年1月1日午夜到指定日期（字符串）的毫秒数</td></tr><tr><td align="left">setDate()</td><td align="left">设置 Date 对象中月的某一天 (1 ~ 31)</td></tr><tr><td align="left">setMonth()</td><td align="left">设置 Date 对象中月份 (0 ~ 11)</td></tr><tr><td align="left">setFullYear()</td><td align="left">设置 Date 对象中的年份（四位数字）</td></tr><tr><td align="left">setYear()</td><td align="left">设置 Date 对象中的年份（四位数字）</td></tr><tr><td align="left">setHours()</td><td align="left">设置 Date 对象中的小时 (0 ~ 23)</td></tr><tr><td align="left">setMinutes()</td><td align="left">设置 Date 对象中的分钟 (0 ~ 59)</td></tr><tr><td align="left">setSeconds()</td><td align="left">设置 Date 对象中的秒钟 (0 ~ 59)</td></tr><tr><td align="left">setMilliseconds()</td><td align="left">设置 Date 对象中的毫秒 (0 ~ 999)</td></tr><tr><td align="left">setTime()</td><td align="left">以毫秒设置 Date 对象</td></tr><tr><td align="left">setUTCDate()</td><td align="left">根据世界时设置 Date 对象中月份的一天 (1 ~ 31)</td></tr><tr><td align="left">setUTCMonth()</td><td align="left">根据世界时设置 Date 对象中的月份 (0 ~ 11)</td></tr><tr><td align="left">setUTCFullYear()</td><td align="left">根据世界时设置 Date 对象中的年份（四位数字）</td></tr><tr><td align="left">setUTCHours()</td><td align="left">根据世界时设置 Date 对象中的小时 (0 ~ 23)</td></tr><tr><td align="left">setUTCMinutes()</td><td align="left">根据世界时设置 Date 对象中的分钟 (0 ~ 59)</td></tr><tr><td align="left">setUTCSeconds()</td><td align="left">根据世界时设置 Date 对象中的秒钟 (0 ~ 59)</td></tr><tr><td align="left">setUTCMilliseconds()</td><td align="left">根据世界时设置 Date 对象中的毫秒 (0 ~ 999)</td></tr><tr><td align="left">toSource()</td><td align="left">返回该对象的源代码</td></tr><tr><td align="left">toString()</td><td align="left">把 Date 对象转换为字符串</td></tr><tr><td align="left">toTimeString()</td><td align="left">把 Date 对象的时间部分转换为字符串</td></tr><tr><td align="left">toDateString()</td><td align="left">把 Date 对象的日期部分转换为字符串</td></tr><tr><td align="left">toGMTString()</td><td align="left">根据世界时，把 Date 对象转换为字符串</td></tr><tr><td align="left">toUTCString()</td><td align="left">根据世界时，把 Date 对象转换为字符串</td></tr><tr><td align="left">toLocaleString()</td><td align="left">根据本地时间格式，把 Date 对象转换为字符串</td></tr><tr><td align="left">toLocaleTimeString()</td><td align="left">根据本地时间格式，把 Date 对象的时间部分转换为字符串</td></tr><tr><td align="left">toLocaleDateString()</td><td align="left">根据本地时间格式，把 Date 对象的日期部分转换为字符串</td></tr><tr><td align="left">UTC()</td><td align="left">根据世界时返回 1970 年 1 月 1 日 到指定日期的毫秒数</td></tr><tr><td align="left">valueOf()</td><td align="left">返回 Date 对象的原始值</td></tr></tbody></table><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>        <span class="token comment" spellcheck="true">//Date()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Date()  返回当日的日期和时间 : "</span><span class="token operator">+</span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//getDate()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"getDate()  从 Date 对象返回一个月中的某一天 (1 ~ 31) : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//getDay()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"getDay() 从 Date 对象返回一周中的某一天 (0 ~ 6) : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//getMonth()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"getMonth() 从 Date 对象返回月份 (0 ~ 11) :  "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//getFullYear()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"getFullYear() 从 Date 对象以四位数字返回年份 : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//getYear()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"getYear() 从 Date 对象以两位或四位数字返回年份 : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//getHours()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"getHours() 返回 Date 对象的小时 (0 ~ 23) : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//getMinutes()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"getMinutes() 返回 Date 对象的分钟 (0 ~ 59) : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//getSeconds()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"getSeconds() 返回 Date 对象的秒数 (0 ~ 59) : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//getMilliseconds()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"getMilliseconds() 返回 Date 对象的毫秒(0 ~ 999) : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//getTime()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"getTime() 返回 1970 年 1 月 1 日至今的毫秒数 : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//getTimezoneOffset()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"getTimezoneOffset() 返回本地时间与格林威治标准时间 (GMT) 的分钟差  : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTimezoneOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//getUTCDate()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"getUTCDate() 根据世界时从 Date 对象返回月中的一天 (1 ~ 31) : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUTCDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//getUTCDay()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"getUTCDay() 根据世界时从 Date 对象返回周中的一天 (0 ~ 6) : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUTCDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//getUTCMonth()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"getUTCMonth() 根据世界时从 Date 对象返回月份 (0 ~ 11) : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUTCMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//getUTCFullYear()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"getUTCFullYear() 根据世界时从 Date 对象返回四位数的年份 : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUTCFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//getUTCHours()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"getUTCHours() 根据世界时返回 Date 对象的小时 (0 ~ 23) : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUTCHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//getUTCMinutes()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"getUTCMinutes() 根据世界时返回 Date 对象的分钟 (0 ~ 59) : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUTCMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//getUTCSeconds()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"getUTCSeconds() 根据世界时返回 Date 对象的秒钟 (0 ~ 59) : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUTCSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//getUTCMilliseconds()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"getUTCMilliseconds() 根据世界时返回 Date 对象的毫秒(0 ~ 999) : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUTCMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//parse()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"parse() 返回1970年1月1日午夜到指定日期（字符串）的毫秒数 : "</span><span class="token operator">+</span>Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"Jul 8, 2005"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//setDate()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"setDate() 设置 Date 对象中月的某一天 (1 ~ 31) : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//setMonth()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"setMonth() 设置 Date 对象中月份 (0 ~ 11) : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMonth</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//setFullYear()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"setFullYear() 设置 Date 对象中的年份（四位数字）: "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setFullYear</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//setYear()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"setYear() 设置 Date 对象中的年份（四位数字） : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setYear</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//setHours()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"setHours() 设置 Date 对象中的小时 (0 ~ 23)  : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setHours</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//setMinutes()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"setMinutes() 设置 Date 对象中的分钟 (0 ~ 59): "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMinutes</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//setSeconds()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"setSeconds() 设置 Date 对象中的秒钟 (0 ~ 59) : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSeconds</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//setMilliseconds()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"setMilliseconds() 设置 Date 对象中的毫秒 (0 ~ 999) : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMilliseconds</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//setTime()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"setTime() 以毫秒设置 Date 对象 : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//setUTCDate()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"setUTCDate() 根据世界时设置 Date 对象中月份的一天 (1 ~ 31) : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setUTCDate</span><span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//setUTCMonth()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"setUTCMonth() 根据世界时设置 Date 对象中的月份 (0 ~ 11) : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setUTCMonth</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//setUTCFullYear()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"setUTCFullYear() 根据世界时设置 Date 对象中的年份（四位数字） : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setUTCFullYear</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//setUTCHours()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"setUTCHours() 根据世界时设置 Date 对象中的小时 (0 ~ 23) : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setUTCHours</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//setUTCMinutes()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"setUTCMinutes() 根据世界时设置 Date 对象中的分钟 (0 ~ 59) : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setUTCMinutes</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//setUTCSeconds()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"setUTCSeconds() 根据世界时设置 Date 对象中的秒钟 (0 ~ 59) : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setUTCSeconds</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//setUTCMilliseconds()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"setUTCMilliseconds() 根据世界时设置 Date 对象中的毫秒 (0 ~ 999) : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setUTCMilliseconds</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//toSource()</span>        <span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>job<span class="token punctuation">,</span>born<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>job <span class="token operator">=</span> job<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>born <span class="token operator">=</span> born<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">"Sanscan"</span><span class="token punctuation">,</span><span class="token string">"Student"</span><span class="token punctuation">,</span><span class="token number">2020</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// document.write("toSource() 返回该对象的源代码 : "+str.toSource());</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//toString()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"toString() 把 Date 对象转换为字符串 : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//toTimeString()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"toTimeString() 把 Date 对象的时间部分转换为字符串 : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//toDateString()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"toDateString() 把 Date 对象的日期部分转换为字符串 : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//toGMTString()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"toGMTString() 根据世界时，把 Date 对象转换为字符串 : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toGMTString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//toUTCString()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"toUTCString() 根据世界时，把 Date 对象转换为字符串 : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUTCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//toLocaleString()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"toLocaleString() 根据本地时间格式，把 Date 对象转换为字符串 : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//toLocaleTimeString()</span>        <span class="token comment" spellcheck="true">// document.write("toLocaleTimeString() 根据本地时间格式，把 Date 对象的时间部分转换为字符串 : "+new Date().DtoLocaleTimeString());</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//toLocaleDateString()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"toLocaleDateString() 根据本地时间格式，把 Date 对象的日期部分转换为字符串 : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//UTC()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"UTC() 根据世界时返回 1970 年 1 月 1 日 到指定日期的毫秒数 : "</span><span class="token operator">+</span>Date<span class="token punctuation">.</span><span class="token function">UTC</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//valueOf()</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"valueOf() 方法返回 Date 对象的原始值  : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="event对象"><a href="#event对象" class="headerlink" title="event对象"></a>event对象</h2><p>用来描述JavaScript的事件。事件一旦发生，便会生成event对象</p><h3 id="event-对象引用"><a href="#event-对象引用" class="headerlink" title="event 对象引用"></a>event 对象引用</h3><p><strong>window对象属性的访问</strong>：</p><pre class="line-numbers language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span>event<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>全局引用对待event对象</strong>：</p><pre class="line-numbers language-javascript"><code class="language-javascript">event<span class="token punctuation">.</span>propertyName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>事件处理时没有特殊情况的话，都可以访问event对象</p><h3 id="W3C的引用"><a href="#W3C的引用" class="headerlink" title="W3C的引用"></a>W3C的引用</h3><p>将 event对象 作为一个参数传递到事件处理函数中。</p><p>将事件处理函数与对象绑定的前提要把 event对象 作为参数传递 。例子：</p><pre class="line-numbers language-javascript"><code class="language-javascript">onKeyUp <span class="token operator">=</span> <span class="token string">"example(event)"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在W3C模型中全局引用 event对象 的方式</p><p>多参数，例子：</p><pre class="line-numbers language-javascript"><code class="language-javascript">onKeyUp <span class="token operator">=</span> <span class="token string">"example(this.event)"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将事件处理函数的引用 赋值给文档中需要的对象，例子：</p><pre class="line-numbers language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>someButton<span class="token punctuation">.</span>onKeyUp <span class="token operator">=</span> example<span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementByld</span><span class="token punctuation">(</span><span class="token string">"myButton"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"KeyUp"</span> <span class="token punctuation">,</span> example <span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="event-对象属性"><a href="#event-对象属性" class="headerlink" title="event 对象属性"></a>event 对象属性</h3><p><font color = #05ffdc>AltLeft </font>  属性。获取左 Alt键 的状态，返回布尔值：true 关闭，false 不关闭</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">[</span>window<span class="token punctuation">.</span><span class="token punctuation">]</span>event<span class="token punctuation">.</span>altLeft<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font color = #05ffdc>CtrlLeft </font> 属性。获取左 Ctrl键 的状态，返回布尔值：true 关闭，false 不关闭</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">[</span>window<span class="token punctuation">.</span><span class="token punctuation">]</span>event<span class="token punctuation">.</span>CtrlLeft<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font color = #05ffdc>ShiftLeft </font> 属性。获取左 Shift键 的状态，返回布尔值：true 关闭，false 不关闭</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">[</span>window<span class="token punctuation">.</span><span class="token punctuation">]</span>event<span class="token punctuation">.</span>ShiftLeft<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示范例子：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">//定义函数</span>        <span class="token keyword">function</span> <span class="token function">exa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//按下按钮的条件</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ctrlKey <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span>event<span class="token punctuation">.</span>altKey <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span>event<span class="token punctuation">.</span>shiftKey<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"快乐学习，JS！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//链接 URL 路径</span>                window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'http://www.baidu.com'</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ctrlKey<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ctrlKey<span class="token operator">+</span><span class="token string">" , 按下了Ctrl键"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//应用 onkeydown 事件输出函数中的内容</span>        document<span class="token punctuation">.</span>onkeydown <span class="token operator">=</span> exa<span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span> 按下 Ctrl键 + Alt键 + Shift键 百度搜！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color = #05ffdc> button </font> 属性。获取事件发生时用户所按的 鼠标键 </p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">[</span>window<span class="token punctuation">.</span><span class="token punctuation">]</span>event<span class="token punctuation">.</span>button<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>属性值</strong>： </p><table><thead><tr><th>button 值</th><th>说明</th></tr></thead><tbody><tr><td>0</td><td>没有 按键</td></tr><tr><td>1</td><td>按下 左键（主键）</td></tr><tr><td>2</td><td>按下 右键</td></tr><tr><td>3</td><td>同时按下 左键 和 右键</td></tr><tr><td>4</td><td>按下 中键</td></tr><tr><td>5</td><td>同时按下 左键 和 中键</td></tr><tr><td>6</td><td>同时按下 左键 和 中键</td></tr><tr><td>7</td><td>同时按下 左键 、中键 、 右键</td></tr></tbody></table><p>个人测试的 button值</p><table><thead><tr><th>button 值</th><th>说明</th></tr></thead><tbody><tr><td>0</td><td>按下 左键（主键）</td></tr><tr><td>1</td><td>按下 中键</td></tr><tr><td>2</td><td>按下 右键</td></tr><tr><td>3</td><td>按下 侧键5号键</td></tr><tr><td>4</td><td>按下 侧键4号键</td></tr></tbody></table><blockquote><p> <font color = red>注意 </font>： </p><p>如果同时按下两个按键执行的特殊动作，会干扰到目标行为。</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">function</span> <span class="token function">sanscan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取鼠标右键时激活</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>button <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"欢迎来到柏竹博客"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//将指定资源加载到新的或现有的浏览上下文</span>                window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"http://sanscan.top"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//onmousedown事件 当用户使用任一鼠标按钮单击对象时触发</span>        document<span class="token punctuation">.</span>onmousedown <span class="token operator">=</span> sanscan<span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>鼠标右键可以进入我的博客！！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color = #05ffdc>clientX </font> 属性。获取 鼠标在浏览器窗口的 X坐标 ，只能获取信息不能更改</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">[</span>window<span class="token punctuation">.</span><span class="token punctuation">]</span>event<span class="token punctuation">.</span>clientX<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font color = #05ffdc>clientY </font> 属性。获取 鼠标在浏览器窗口的 Y坐标 ，只能获取信息不能更改</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">[</span>window<span class="token punctuation">.</span><span class="token punctuation">]</span>event<span class="token punctuation">.</span>clientY<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> x <span class="token punctuation">,</span> y <span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">zuobiao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>            x <span class="token operator">=</span> window<span class="token punctuation">.</span>event<span class="token punctuation">.</span>clientX<span class="token punctuation">;</span>            y <span class="token operator">=</span> window<span class="token punctuation">.</span>event<span class="token punctuation">.</span>clientY<span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"x : "</span><span class="token operator">+</span>x <span class="token operator">+</span><span class="token string">"\n y : "</span><span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    document<span class="token punctuation">.</span>onmousedown <span class="token operator">=</span> zuobiao <span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>点击鼠标<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color = #05ffdc>X </font> 属性。设置或获取鼠标位置，非定位元素 则以body元素作参照对象（鼠标在窗口外则：-1）</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">[</span>window<span class="token punctuation">.</span><span class="token punctuation">]</span>event<span class="token punctuation">.</span>X<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font color = #05ffdc>Y </font> 属性。设置或获取鼠标位置，非 定位元素 则以body元素作参照对象（鼠标在窗口外则：-1）</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">[</span>window<span class="token punctuation">.</span><span class="token punctuation">]</span>event<span class="token punctuation">.</span>Y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font color = #05ffdc>cancelBubble </font> 属性。检测是否接受上层元素的控制，控制为false，非控制true （默认：false）</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">[</span>window<span class="token punctuation">.</span><span class="token punctuation">]</span>event<span class="token punctuation">.</span>cancelBubble<span class="token punctuation">[</span> <span class="token operator">=</span> cancelBubble<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font color = #05ffdc>srcElement </font> 属性。设置或获取触发的事件的对象 ,初始目标为HTML元素。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">[</span>window<span class="token punctuation">.</span><span class="token punctuation">]</span>event<span class="token punctuation">.</span>srcElement<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaScript初识&quot;&gt;&lt;a href=&quot;#JavaScript初识&quot; class=&quot;headerlink&quot; title=&quot;JavaScript初识&quot;&gt;&lt;/a&gt;JavaScript初识&lt;/h1&gt;&lt;p&gt;JavaScript是Web页面中的一种脚本编程语言，也是一
      
    
    </summary>
    
    
      <category term="脚本语言" scheme="https://Sanscan12.github.io/categories/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="笔记" scheme="https://Sanscan12.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="https://Sanscan12.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>群辉DSM端口</title>
    <link href="https://sanscan12.github.io/posts/96bc.html"/>
    <id>https://sanscan12.github.io/posts/96bc.html</id>
    <published>2020-04-20T16:00:00.000Z</published>
    <updated>2020-05-25T14:25:43.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="群晖DSM使用端口大全（转载）"><a href="#群晖DSM使用端口大全（转载）" class="headerlink" title="群晖DSM使用端口大全（转载）"></a>群晖DSM使用端口大全（转载）</h1><table><thead><tr><th>设置工具</th><th></th><th></th></tr></thead><tbody><tr><td><strong>类型</strong></td><td><strong>端口号码</strong></td><td><strong>协议</strong></td></tr><tr><td>Synology Assistant</td><td>9999、9998、9997</td><td>UDP</td></tr></tbody></table><table><thead><tr><th>备份</th><th></th><th></th></tr></thead><tbody><tr><td><strong>类型</strong></td><td><strong>端口号码</strong></td><td><strong>协议</strong></td></tr><tr><td>Data Replicator、Data Replicator II、Data Replicator III</td><td>9999、9998、9997、137、138、139、445</td><td>TCP</td></tr><tr><td>网络备份</td><td>873（数据）、3260（iSCSI LUN）</td><td>TCP</td></tr><tr><td>加密的网络备份（远程 Time Backup）</td><td>22</td><td>TCP</td></tr></tbody></table><table><thead><tr><th>下载</th><th></th><th></th></tr></thead><tbody><tr><td><strong>类型</strong></td><td><strong>端口号码</strong></td><td><strong>协议</strong></td></tr><tr><td>eMule</td><td>4662（TCP）、4672（UDP）</td><td>TCP/UDP</td></tr><tr><td>BT</td><td>6890 ~ 6999（用于 DSM 版本早于 v2.0.1-3.0401 的机型）；  16881（用于 DSM 版本 v2.0.1 以上的机型）</td><td>TCP/UDP</td></tr></tbody></table><table><thead><tr><th>网页应用程序</th><th></th><th></th></tr></thead><tbody><tr><td><strong>类型</strong></td><td><strong>端口号码</strong></td><td><strong>协议</strong></td></tr><tr><td>DSM</td><td>5000（HTTP）、5001（HTTPS）</td><td>TCP</td></tr><tr><td>Download Station</td><td>5000</td><td>TCP</td></tr><tr><td>Photo Station、Web Station</td><td>80（可添加另外的端口）、443（HTTPS）</td><td>TCP</td></tr><tr><td>Mail Station</td><td>80（HTTP）、443（HTTPS）</td><td>TCP</td></tr><tr><td>Audio Station</td><td>5000（HTTP，可添加另外的端口）、5001（HTTPS，可添加另外的端口）、5353（Bonjour 服务）、6001-6010（AirPlay 控制/定时）</td><td>TCP/UDP</td></tr><tr><td>File Station</td><td>5000（HTTP，可添加另外的端口）、5001（HTTPS，可添加另外的端口）</td><td>TCP</td></tr><tr><td>Surveillance Station</td><td>9900（HTTP）、9901（HTTPS）</td><td>TCP</td></tr><tr><td>媒体服务器</td><td>1900（UPnP）、50001（内容浏览）、50002（内容串流）</td><td>TCP/UDP</td></tr></tbody></table><table><thead><tr><th>邮件服务器</th><th></th><th></th></tr></thead><tbody><tr><td><strong>类型</strong></td><td><strong>端口号码</strong></td><td><strong>协议</strong></td></tr><tr><td>SMTP</td><td>25</td><td>TCP</td></tr><tr><td>POP3</td><td>110</td><td>TCP</td></tr><tr><td>IMAP</td><td>143</td><td>TCP</td></tr><tr><td>IMAP 含 SSL/TLS</td><td>993</td><td>TCP</td></tr><tr><td>POP3 含 SSL/TLS</td><td>995</td><td>TCP</td></tr></tbody></table><table><thead><tr><th>文件传输</th><th></th><th></th></tr></thead><tbody><tr><td><strong>类型</strong></td><td><strong>端口号码</strong></td><td><strong>协议</strong></td></tr><tr><td>FTP、FTP 含 SSL、FTP 含 TLS</td><td>21（命令）、20（主动模式的数据连接）、55536-55663（被动模式的数据连接）</td><td>TCP</td></tr><tr><td>AFP</td><td>548</td><td>TCP</td></tr><tr><td>CIFS</td><td>smbd：139（netbios-ssn）、445（microsoft-ds）</td><td>TCP/UDP</td></tr><tr><td>Nmbd：137、138</td><td>UDP</td><td></td></tr><tr><td>NFS</td><td>111、892、2049</td><td>TCP/UDP</td></tr><tr><td>WebDAV、CalDAV</td><td>5005、5006（HTTPS）</td><td>TCP</td></tr><tr><td>iSCSI</td><td>3260</td><td>TCP</td></tr><tr><td>TFTP</td><td>69</td><td>UDP</td></tr></tbody></table><table><thead><tr><th>套件</th><th></th><th></th></tr></thead><tbody><tr><td><strong>类型</strong></td><td><strong>端口号码</strong></td><td><strong>协议</strong></td></tr><tr><td>Cloud Station</td><td>6690</td><td>TCP</td></tr><tr><td>VPN Server（OpenVPN）</td><td>1194</td><td>UDP</td></tr><tr><td>VPN Server（PPTP）</td><td>1723</td><td>TCP</td></tr><tr><td>Syslog Server</td><td>514（可添加另外的端口）</td><td>TCP/UDP</td></tr><tr><td>iTunes Server</td><td>3689</td><td>TCP</td></tr><tr><td>Directory Server</td><td>389（LDAP）、636（LDAP 含 SSL）</td><td>TCP</td></tr><tr><td>DHCP Server</td><td>67、68</td><td>UDP</td></tr></tbody></table><table><thead><tr><th>行动应用程序</th><th></th><th></th></tr></thead><tbody><tr><td><strong>类型</strong></td><td><strong>端口号码</strong></td><td><strong>协议</strong></td></tr><tr><td>DS photo+</td><td>80、443（HTTPS）</td><td>TCP</td></tr><tr><td>DS audio</td><td>5000、5001（HTTPS）</td><td>TCP</td></tr><tr><td>DS cam</td><td>5000</td><td>TCP</td></tr><tr><td>DS file</td><td>Android/iOS 设备：5005、5006（HTTPS） Windows Phone：5000</td><td>TCP</td></tr><tr><td>DS finder</td><td>5000（HTTP）、5001（HTTPS）</td><td>TCP</td></tr><tr><td>DS video</td><td>5000（HTTP）、5001（HTTPS）</td><td>TCP</td></tr><tr><td>DS download</td><td>5000（HTTP）、5001（HTTPS）</td><td>TCP</td></tr><tr><td>DS cloud</td><td>6690</td><td>TCP</td></tr></tbody></table><table><thead><tr><th><strong>打印机、UPS 和外围设备</strong></th><th></th><th></th></tr></thead><tbody><tr><td><strong>类型</strong></td><td><strong>端口号码</strong></td><td><strong>协议</strong></td></tr><tr><td>LPR</td><td>515</td><td>UDP</td></tr><tr><td>网络打印机（IPP）/CUPS</td><td>631</td><td>TCP</td></tr><tr><td>Bonjour</td><td>5353</td><td>UDP</td></tr><tr><td>网络 MFP</td><td>3240-3259</td><td>TCP</td></tr><tr><td>UPS</td><td>3493</td><td>TCP</td></tr></tbody></table><table><thead><tr><th><strong>系统</strong></th><th></th><th></th></tr></thead><tbody><tr><td><strong>类型</strong></td><td><strong>端口号码</strong></td><td><strong>协议</strong></td></tr><tr><td>SSH/SFTP</td><td>22</td><td>TCP</td></tr><tr><td>Telnet</td><td>23</td><td>TCP</td></tr><tr><td>资源监视器/SNMP</td><td>161</td><td>TCP/UDP</td></tr><tr><td>MySQL</td><td>3306</td><td>TCP</td></tr><tr><td>LDAP</td><td>389、636（SLAPD）</td><td>TCP</td></tr></tbody></table><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;群晖DSM使用端口大全（转载）&quot;&gt;&lt;a href=&quot;#群晖DSM使用端口大全（转载）&quot; class=&quot;headerlink&quot; title=&quot;群晖DSM使用端口大全（转载）&quot;&gt;&lt;/a&gt;群晖DSM使用端口大全（转载）&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;

      
    
    </summary>
    
    
      <category term="配置" scheme="https://Sanscan12.github.io/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="血的教训" scheme="https://Sanscan12.github.io/tags/%E8%A1%80%E7%9A%84%E6%95%99%E8%AE%AD/"/>
    
      <category term="群辉" scheme="https://Sanscan12.github.io/tags/%E7%BE%A4%E8%BE%89/"/>
    
  </entry>
  
  <entry>
    <title>颜色搭配</title>
    <link href="https://sanscan12.github.io/posts/a920.html"/>
    <id>https://sanscan12.github.io/posts/a920.html</id>
    <published>2020-04-20T16:00:00.000Z</published>
    <updated>2020-05-25T14:25:43.981Z</updated>
    
    <content type="html"><![CDATA[<h1 id="颜色搭配"><a href="#颜色搭配" class="headerlink" title="颜色搭配"></a><strong>颜色搭配</strong></h1><p>如果有自己喜欢的颜色可以吸一下！！！</p><h2 id="单色系"><a href="#单色系" class="headerlink" title="单色系"></a>单色系</h2><p>由单一的基本的颜色构成，将黑色、白色或灰色添加到色盘上，可以轻松地制作出具有广泛使用的一贯性的配色。</p><p><strong>舒适、雅致、中立</strong></p><p><strong><font color = #E1DCD9>#E1DCD9</font></strong><br><strong><font color = #8F8681>#8F8681</font></strong><br><strong><font color = #A67F78>#A67F78</font></strong><br><strong><font color = #32435F>#32435F</font></strong></p><p><strong>沙漠、玛瑙、暖色</strong></p><p><strong><font color = #FFD954>#FFD954 </font></strong><br><strong><font color = #E4B660>#E4B660</font></strong><br><strong><font color = #F2AB39>#F2AB39</font></strong><br><strong><font color = #69491A>#69491A</font></strong></p><p><strong>绿色、自然、翡翠</strong></p><p><strong><font color = #D1EDE1>#D1EDE1</font></strong><br><strong><font color =#7BC5AE >#7BC5AE</font></strong><br><strong><font color = #028C6A> #028C6A</font></strong><br><strong><font color = #003E19>#003E19E</font></strong></p><p><strong>柔和、多肉植物</strong></p><p><strong><font color = #D1DDDB>#D1DDDB</font></strong><br><strong><font color = #85B8CB>#85B8CB</font></strong><br><strong><font color = #1D6A96 >#1D6A96</font></strong><br><strong><font color = #283B42>#283B42</font></strong></p><p><strong>西部、优雅、低调</strong></p><p><strong><font color = #D5D2C1>#D5D2C1</font></strong><br><strong><font color = #BD8E62>#BD8E62</font></strong><br><strong><font color = #A46843>#A46843</font></strong><br><strong><font color = #370D00>#370D00</font></strong></p><p><strong>绿色，翡翠，清新</strong></p><p><strong><font color = #9BCFB8>#9BCFB8</font></strong><br><strong><font color = #7FB174>#7FB174</font></strong><br><strong><font color = #689C97>#689C97</font></strong><br><strong><font color = #072A24>#072A24</font></strong></p><p><strong>玫瑰，浪漫，花朵</strong></p><p><strong><font color = #FFC2C3>#FFC2C3</font></strong><br><strong><font color = #FE7773>#FE7 773</font></strong><br><strong><font color = #E81E25>#E81E25</font></strong><br><strong><font color = #0E0301>#0E030 1</font></strong></p><p><strong>少女、粉色，彩妆</strong></p><p><strong><font color = #ECE4E2 >#ECE4E2 </font></strong><br><strong><font color = #FCD3D1>#FCD3D1</font></strong><br><strong><font color = #FCDFF3>#FCDFF3</font></strong><br><strong><font color = #FE929F>#FE929F</font></strong></p><p><strong>紫色，时尚，神秘</strong></p><p><strong><font color = #D3B7D8>#D3B7D8</font></strong><br><strong><font color =#A13E97 >#A13E97</font></strong><br><strong><font color = #632A7E>#632A7E</font></strong><br><strong><font color = #280E3B >#280E3B </font></strong></p><h2 id="冷色系"><a href="#冷色系" class="headerlink" title="冷色系"></a>冷色系</h2><p>在设计上使用这些颜色的配色，可以表现出信赖和平静，营造安静、平静的气氛。<br>这些配色可以有效地表现对比度，与温暖的颜色搭配得很好。</p><p><strong>迷幻，彩色，旋风</strong></p><p><strong><font color = #E3A6A1>#E3A6A1</font></strong><br><strong><font color = #BC5F6A>#BC5F6A</font></strong><br><strong><font color = #19B3B1>#19B3B1</font></strong><br><strong><font color = #034B61>#034B61</font></strong></p><p><strong>星空，极光，天体绿</strong></p><p><strong><font color = #B2A59F>#B2A59F</font></strong><br><strong><font color = #023459>#023459</font></strong><br><strong><font color =#1E646E >#1E646E</font></strong><br><strong><font color = #002C2F>#002C2F</font></strong></p><p><strong>垃圾涂鸦，抽象</strong></p><p><strong><font color = #BDBDBF>#BDBDBF</font></strong><br><strong><font color = #5580A0>#5580A0</font></strong><br><strong><font color = #CC8A4D>#CC8A4D</font></strong><br><strong><font color = #32435F>#32435F</font></strong></p><p><strong>木制，温暖，红酒</strong></p><p><strong><font color = #B98D72>#B98D72</font></strong><br><strong><font color = #AE4951>#AE495 1</font></strong><br><strong><font color = #57233A>#57233A</font></strong><br><strong><font color = #161B1F>#161B1F</font></strong></p><p><strong>蛇鳞，神秘</strong></p><p><strong><font color = #EAD6BD>#EAD6BD</font></strong><br><strong><font color = #A88661>#A8866 1</font></strong><br><strong><font color = #504E63>#504E63</font></strong><br><strong><font color = #00142F>#00142F</font></strong></p><p><strong>冬日，桃花，盛开</strong></p><p><strong><font color = #CCD3D9>#CCD3D9</font></strong><br><strong><font color = #FED5D9>#FED5D9</font></strong><br><strong><font color = #7E212C>#7E212C</font></strong><br><strong><font color = #321E17>#321E17</font></strong></p><p><strong>万花筒，色彩构成</strong></p><p><strong><font color = #E4DACE>#E4DACE</font></strong><br><strong><font color = #E5BB4B>#E5BB4B</font></strong><br><strong><font color = #498EAF>#498EAF</font></strong><br><strong><font color = #631F16>#631F 16</font></strong></p><p><strong>食欲，撞色，刺激</strong></p><p><strong><font color = #F2DD66>#F2DD66</font></strong><br><strong><font color = #9A1B27>#9A1B27</font></strong><br><strong><font color = #747BA9>#747BA9</font></strong><br><strong><font color = #3B3857 >#3B3857 </font></strong></p><p><strong>海滩，度假，惬意</strong></p><p><strong><font color = #0359AE>#0359AE</font></strong><br><strong><font color = #14B09B>#14B09B</font></strong><br><strong><font color = #EBE5D9>#EBE5D9</font></strong><br><strong><font color = #CC8A56>#CC8A56</font></strong></p><p><strong>大理石，自然，纹理</strong></p><p><strong><font color = #A6C2CE>#A6C2CE</font></strong><br><strong><font color = #9C8F96>#9C8F96</font></strong><br><strong><font color = #EBC57C>#EBC57C</font></strong><br><strong><font color = #6B799E>#6B799E</font></strong></p><p><strong>翠绿，生态，环保</strong></p><p><strong><font color = #97BAA4>#97BAA4</font></strong><br><strong><font color = #499360>#499360</font></strong><br><strong><font color = #295651>#295651</font></strong><br><strong><font color = #232941>#23294 1</font></strong></p><p><strong>咖啡，纯音乐，安静</strong></p><p><strong><font color = #DCC1B0>#DCC1B0</font></strong><br><strong><font color = #869DAB>#869DAB</font></strong><br><strong><font color = #847072>#847072</font></strong><br><strong><font color = #3D313d>#3D31 3F</font></strong></p><p><strong>色素，购物，快时尚</strong></p><p><strong><font color = #B2D6CA >#B2D6CA </font></strong><br><strong><font color = #FE5858>#FE5858</font></strong><br><strong><font color = #024B40>#024B40</font></strong><br><strong><font color = #5D353E>#5D353E</font></strong></p><p><strong>水彩，文艺，阳光</strong></p><p><strong><font color = #E5E0F8>#E5E0F8</font></strong><br><strong><font color = #E29E93>#E29E93</font></strong><br><strong><font color = #EDBC7A>#EDBC7A</font></strong><br><strong><font color = #0384BD>#0384BD</font></strong></p><p><strong>极光，梦幻，奥秘</strong></p><p><strong><font color = #91D4C2>#91D4C2</font></strong><br><strong><font color = #45BB89>#45BB89</font></strong><br><strong><font color = #3D82AB>#3D82AB</font></strong><br><strong><font color = #003853>#003853</font></strong></p><p><strong>朦胧，生机，静谧</strong></p><p><strong><font color = #D9CFE7>#D9CFE7</font></strong><br><strong><font color = #A8BCBA>#A8BCBA</font></strong><br><strong><font color = #ACC66D>#ACC66D</font></strong><br><strong><font color = #50697D>#50697D</font></strong></p><p><strong>荷塘，风景，水产</strong></p><p><strong><font color = #8CA6B3>#8CA6B3</font></strong><br><strong><font color = #87C488>#87C488</font></strong><br><strong><font color = #AA641E>#AA641E</font></strong><br><strong><font color = #284651>#284651</font></strong></p><p><strong>星际，火山，科技</strong></p><p><strong><font color = #324856>#324856</font></strong><br><strong><font color = #4A746A>#4A746A</font></strong><br><strong><font color = #D18237>#D18237</font></strong><br><strong><font color = #D66C44>#D66C44</font></strong></p><p><strong>舞台，冷暖，光影</strong></p><p><strong><font color = #FFA289>#FFA289</font></strong><br><strong><font color = #6A92CC>#6A92CC</font></strong><br><strong><font color = #706FAB>#706FAB</font></strong><br><strong><font color = #50293C>#50293C</font></strong></p><p><strong>冬日，旅行，探险</strong></p><p><strong><font color = #DBDBE5>#DBDBE5</font></strong><br><strong><font color = #A5B7C1>#A5B7C1</font></strong><br><strong><font color = #535D55>#535D55</font></strong><br><strong><font color = #514644>#5 14644</font></strong></p><p><strong>碧海蓝天，旅游，度假</strong></p><p><strong><font color = #C2E6FF>#C2E6FF</font></strong><br><strong><font color = #859F3C>#859F3C</font></strong><br><strong><font color = #007F52>#007F52</font></strong><br><strong><font color = #45451F>#45451F</font></strong></p><p><strong>蜡笔，神迹，彩霞</strong></p><p><strong><font color = #EB8F90>#EB8F90</font></strong><br><strong><font color = #FFB471 >#FFB47 1 </font></strong><br><strong><font color = #ADBED2>#ADBED2</font></strong><br><strong><font color = #12406A>#12406A</font></strong></p><p><strong>传统，牛仔，温暖</strong></p><p><strong><font color = #6C838B>#6C838B</font></strong><br><strong><font color = #BB7748>#BB7 748</font></strong><br><strong><font color = #9E6D70>#9E6D70</font></strong><br><strong><font color = #7F726A>#7F7 26A</font></strong></p><p><strong>中国风，江南，烟雨</strong></p><p><strong><font color = #FDDCEF>#FDDCEF</font></strong><br><strong><font color = #D5C5E9>#D5C5E9</font></strong><br><strong><font color = #3A5A69>#3A5A69</font></strong><br><strong><font color = #030923>#030923</font></strong></p><p><strong>欧美，复古，经典</strong></p><p><strong><font color = #82BBB5>#82BBB5</font></strong><br><strong><font color = #CA884B>#CA884B</font></strong><br><strong><font color = #D1825B>#D1825B</font></strong><br><strong><font color = #CCA142>#CCA142</font></strong></p><p><strong>园林，浅秋，晨练</strong></p><p><strong><font color = #AFB3BC>#AFB3BC</font></strong><br><strong><font color = #E5BA22>#E5BA22</font></strong><br><strong><font color = #757430>#757430</font></strong><br><strong><font color = #D0B987>#D0B987</font></strong></p><p><strong>森林，度假，绿洲</strong></p><p><strong><font color = #DODAE4>#DODAE4</font></strong><br><strong><font color = #2A6078>#2A6078</font></strong><br><strong><font color = #B9CD74>#B9CD74</font></strong><br><strong><font color = #085438>#085438</font></strong></p><p><strong>梦幻，金属，未来感</strong></p><p><strong><font color = #A9DFED>#A9DFED</font></strong><br><strong><font color = #EBD6E8>#EBD6E8</font></strong><br><strong><font color = #84C0E9>#84C0E9</font></strong><br><strong><font color = #37419A>#3741 9A</font></strong></p><p><strong>居家，复古，怀旧</strong></p><p><strong><font color = #D7CBBD>#D7CBBD</font></strong><br><strong><font color = #C1893F>#C1893F</font></strong><br><strong><font color = #AF8F90>#AF8F90</font></strong><br><strong><font color = #69454F>#69454F</font></strong></p><p><strong>幻彩，岩洞，仙气</strong></p><p><strong><font color = #EFC638>#EFC638</font></strong><br><strong><font color = #416EB6>#416EB6</font></strong><br><strong><font color = #715CA8>#715CA8</font></strong><br><strong><font color = #2B103B >#2B103B </font></strong></p><p><strong>花卉、对比，设计</strong></p><p><strong><font color = #DB5A9A>#DB5A9A</font></strong><br><strong><font color = #E5A46E>#E5A46E</font></strong><br><strong><font color = #125669>#125669</font></strong><br><strong><font color = #0A5B54>#0A5B54</font></strong></p><p><strong>俄罗斯，白桦树，郊外</strong></p><p><strong><font color = #F2F4EF>#F2F4EF</font></strong><br><strong><font color = #C2E3F4>#C2E3F4</font></strong><br><strong><font color = #EFB730>#EFB730</font></strong><br><strong><font color = #030305>#030305</font></strong></p><p><strong>度假，澳洲，型男</strong></p><p><strong><font color = #7F9871>#7F987 1</font></strong><br><strong><font color = #9795A3>#9795A 3</font></strong><br><strong><font color = #C94F44>#C94F44</font></strong><br><strong><font color = #261326>#261326</font></strong></p><p><strong>壁纸，童年，儿童房</strong></p><p><strong><font color = #EDA2B6>#EDA2B6</font></strong><br><strong><font color = #ABBF4E>#ABBF4E</font></strong><br><strong><font color = #7A96A2>#7A96A2</font></strong><br><strong><font color = #252621>#25262 1</font></strong></p><p><strong>霓虹灯，深夜，街头</strong></p><p><strong><font color = #C7C5B8>#C7C5B8</font></strong><br><strong><font color = #38618F>#38618F</font></strong><br><strong><font color = #FD9735>#FD9735</font></strong><br><strong><font color = #FF6745>#FF6745</font></strong></p><h2 id="明亮色系"><a href="#明亮色系" class="headerlink" title="明亮色系"></a><strong>明亮色系</strong></h2><p><strong>&lt;font color = &gt;</font></strong><br><strong>&lt;font color = &gt;</font></strong><br><strong>&lt;font color = &gt;</font></strong><br><strong>&lt;font color = &gt;</font></strong></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;颜色搭配&quot;&gt;&lt;a href=&quot;#颜色搭配&quot; class=&quot;headerlink&quot; title=&quot;颜色搭配&quot;&gt;&lt;/a&gt;&lt;strong&gt;颜色搭配&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;如果有自己喜欢的颜色可以吸一下！！！&lt;/p&gt;
&lt;h2 id=&quot;单色系&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="其他" scheme="https://Sanscan12.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="分享" scheme="https://Sanscan12.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
      <category term="搭色" scheme="https://Sanscan12.github.io/tags/%E6%90%AD%E8%89%B2/"/>
    
  </entry>
  
  <entry>
    <title>CSS 问题</title>
    <link href="https://sanscan12.github.io/posts/3194.html"/>
    <id>https://sanscan12.github.io/posts/3194.html</id>
    <published>2020-04-19T16:00:00.000Z</published>
    <updated>2020-05-25T14:25:43.967Z</updated>
    
    <content type="html"><![CDATA[<h2 id="相邻块元素外边距合并"><a href="#相邻块元素外边距合并" class="headerlink" title="相邻块元素外边距合并"></a>相邻块元素外边距合并</h2><p>当上下两个有上下外边距的元素相邻时，则被外边距较大者覆盖。也可称<strong>外边距塌陷</strong>。*<font color=red><strong>*遇见该问题经量避免</strong></font></p><p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/Blogdecoration/wbj.png" alt=""></p><p>代码例子</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;!DOCTYPE html>&lt;html lang="en">&lt;head>&lt;meta charset="UTF-8">&lt;title>Title&lt;/title>&lt;style>    * </span><span class="token punctuation">{</span>        <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">div </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*上盒子*/</span>    <span class="token selector"><span class="token class">.no1</span> </span><span class="token punctuation">{</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#b3d4fc</span><span class="token punctuation">;</span>        <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*下盒子*/</span>    <span class="token selector"><span class="token class">.no2</span> </span><span class="token punctuation">{</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> hotpink<span class="token punctuation">;</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*结果他们之间的距离为30px*/</span>&lt;/style>&lt;/head>&lt;body>    &lt;div class=<span class="token string">"no1"</span>>&lt;/div>    &lt;div class=<span class="token string">"no2"</span>>&lt;/div>&lt;/body>&lt;/html><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="嵌套块元素外边距合并"><a href="#嵌套块元素外边距合并" class="headerlink" title="嵌套块元素外边距合并"></a>嵌套块元素外边距合并</h2><p>两个元素父子关系的块元素，父没有<strong>内边距、外边框</strong>的前提，父子的垂直外边距会被较大者覆盖，即使父元素的上外边距为0，也会发生合并。</p><p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/Blogdecoration/qt.png" alt=""></p><p>代码例子</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;!DOCTYPE html>&lt;html lang="en">&lt;head>&lt;meta charset="UTF-8">&lt;title>Title&lt;/title>&lt;style>    * </span><span class="token punctuation">{</span>        <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*父盒子*/</span>    <span class="token selector"><span class="token class">.no1</span> </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#b3d4fc</span><span class="token punctuation">;</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*子盒子*/</span>    <span class="token selector"><span class="token class">.no2</span> </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*非子块级元素*/</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*子块级元素的外边距控制父块级元素的外边距，子父外边距合并。*/</span>&lt;/style>&lt;/head>&lt;body>    &lt;div class=<span class="token string">"no1"</span>>        &lt;div class=<span class="token string">"no2"</span>>&lt;/div>    &lt;/div>&lt;/body>&lt;/html><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>解决方案：</p><ol><li>为父元素定义 1px 上边框或上内边距</li><li>为父元素添加 overflow: hidden ;(清除浮动)</li></ol></blockquote><hr><h2 id="盒子宽度和高度"><a href="#盒子宽度和高度" class="headerlink" title="盒子宽度和高度"></a>盒子宽度和高度</h2><p>盒子的大小进行控制。盒子模型的总宽度和总高度的计算原则是：</p><pre class="line-numbers language-css"><code class="language-css">  <span class="token comment" spellcheck="true">/*外盒尺寸计算（元素空间尺寸）*/</span>  Element Height = content height + padding + border + margin  Element Width = content width + padding + border + margin  <span class="token comment" spellcheck="true">/*内盒尺寸计算（元素实际大小）*/</span>  Element Height = height + padding + border  Element Width = width + padding + border<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>width 和 height 仅适用于块级元素，对行内元素无效(img标签和input除外)</li><li>计算盒子模型的总高度时，还应考虑上下两个盒子垂直外边距合并</li><li><strong>如果一个盒子没有给定宽高，则会和父盒子一样；</strong></li><li><strong>如果此盒子没有给定宽度则padding不会影响本盒子大小</strong></li></ol><hr><h2 id="盒子模型布局"><a href="#盒子模型布局" class="headerlink" title="盒子模型布局"></a>盒子模型布局</h2><p>按照优先使用  <strong>宽度</strong> (width) 其次使用<strong>内边距 **(padding) 再次</strong>外边距 **(margin)<br>$$<br>width &gt;  padding  &gt;   margin<br>$$</p><blockquote><p>原因：</p><ol><li>margin会有外边距合并还有下面margin加倍的bug所以最后使用</li><li>padding 会影响盒子大小，需要进行加减计算</li><li>width没有问题，经常使用宽度剩余法 高度剩余法来做</li></ol></blockquote><hr><h2 id="绝对定位盒子居中"><a href="#绝对定位盒子居中" class="headerlink" title="绝对定位盒子居中"></a>绝对定位盒子居中</h2><p>实现 绝对定位盒子 的居中问题！！</p><p>定位的盒子也可以<code>水平</code>或<code>垂直</code>居中，的算法</p><blockquote><ol><li>首先left: 50%   父盒子的一半大小</li><li>然后减去自身的一半宽 margin-left。</li></ol></blockquote><p>代码示范：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;!DOCTYPE html>&lt;html lang="en">&lt;head>&lt;meta charset="UTF-8">&lt;title>Title&lt;/title>&lt;style>    div </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#666</span><span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*水平居中*/</span>        <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*垂直居中*/</span>        <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span> -<span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>&lt;/style>&lt;/head>&lt;body>    &lt;div>&lt;/div>&lt;/body>&lt;/html><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="插入图片和背景的区别"><a href="#插入图片和背景的区别" class="headerlink" title="插入图片和背景的区别"></a>插入图片和背景的区别</h2><ul><li><strong>插入图片</strong>我们用的最多 ，比如产品展示类</li><li><strong>背景图片</strong>一般用于小图标<strong>背景</strong>或者<strong>超大背景图片</strong></li></ul><hr><h2 id="相邻块元素边框线叠加"><a href="#相邻块元素边框线叠加" class="headerlink" title="相邻块元素边框线叠加"></a>相邻块元素边框线叠加</h2><p>以下是浮动<code>div</code>的盒子边框线5px</p><p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/article/dj.png" alt=""></p><p>代码例子</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;!DOCTYPE html>&lt;html lang="en">&lt;head>    &lt;meta charset="UTF-8">    &lt;title>Title&lt;/title>    &lt;style>        * </span><span class="token punctuation">{</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">ul </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">250</span>px<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">li </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">250</span>px<span class="token punctuation">;</span>            <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">5</span>px solid <span class="token hexcode">#666666</span><span class="token punctuation">;</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">li<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">5</span>px solid red<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*修复代码 ， 去除以下注释代码！！！*/</span>        <span class="token comment" spellcheck="true">/*        .no2 li {            position: relative;            margin-left: -5px;        }        */</span>        <span class="token selector"><span class="token class">.no2</span> li<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>            <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    &lt;/style>&lt;/head>&lt;body>    &lt;h<span class="token number">2</span>>无更改&lt;/h<span class="token number">2</span>>    &lt;ul class=<span class="token string">"no1"</span>>        &lt;li>&lt;/li>        &lt;li>&lt;/li>        &lt;li>&lt;/li>        &lt;li>&lt;/li>    &lt;/ul>    &lt;h<span class="token number">2</span>>以更改&lt;/h<span class="token number">2</span>>    &lt;ul class=<span class="token string">"no2"</span>>        &lt;li>&lt;/li>        &lt;li>&lt;/li>        &lt;li>&lt;/li>        &lt;li>&lt;/li>    &lt;/ul>&lt;/body>&lt;/html><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="伪类高亮遮挡"><a href="#伪类高亮遮挡" class="headerlink" title="伪类高亮遮挡"></a>伪类高亮遮挡</h2><p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/article/dj3.png" alt=""></p><blockquote><p>解决方案：</p><ul><li>每个块元素添加外边距减回去 <code>margin-left: -5px</code>，-5是有由边框线的像素决定的</li><li>每个块元素添加相对定位 <code>position: relative;</code>， 防止伪类高亮遮挡</li></ul></blockquote><hr><h2 id="基线对齐底线溢出"><a href="#基线对齐底线溢出" class="headerlink" title="基线对齐底线溢出"></a>基线对齐底线溢出</h2><p>先说明字体线段基准！！！<br><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/jx.png" alt=""></p><p>在图片/表格与内容同行时底线会溢出，由于对齐时默认是基线对齐</p><p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/yc.png" alt=""></p><p>更改后</p><p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/yc2.png" alt=""></p><blockquote><p>解决方案：</p><ol><li>图片img设置： <code>vertical-align: bottom;</code> （垂直对齐：底部对齐）</li><li>内容设置： <code>border: 0;</code> 盒子边框为零</li></ol></blockquote><hr><h2 id="标签递增添加样式"><a href="#标签递增添加样式" class="headerlink" title="标签递增添加样式"></a>标签递增添加样式</h2><p>使集合中多个相同元素里的标签添加不用的样式,前提要同一子盒子内，如背景图片</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token attribute">[类名 | 选择器]</span><span class="token pseudo-class">:nth-of-type(n)</span> </span><span class="token punctuation">{</span>    样式属性的空间<span class="token punctuation">}</span><span class="token selector"><span class="token attribute">[类名 | 选择器]</span><span class="token pseudo-class">:nth-of-type(n+1)</span> </span><span class="token punctuation">{</span>    样式属性的空间<span class="token punctuation">}</span>···<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>n为相同标签的排列序号</p><p>例如：</p><p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/css10.png" alt=""></p><p>代码整体：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;!DOCTYPE html>&lt;html lang="en">&lt;head>    &lt;meta charset="UTF-8">    &lt;title>畅销书&lt;/title>    &lt;style>        * </span><span class="token punctuation">{</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to bottom, <span class="token hexcode">#f8fad0</span>,<span class="token hexcode">#ffffff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#eee</span><span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">50</span>px auto<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.box</span> h2 </span><span class="token punctuation">{</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#518700</span> <span class="token url">url("../img/bang.gif")</span> no-repeat <span class="token number">130</span>px <span class="token number">3</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">li </span><span class="token punctuation">{</span>            <span class="token property">padding-left</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">10</span>px <span class="token number">10</span>px <span class="token number">20</span>px<span class="token punctuation">;</span>            <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.box</span> li<span class="token pseudo-class">:nth-of-type(1)</span></span><span class="token punctuation">{</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url("../img/book_no01.gif")</span> no-repeat <span class="token number">0</span>px <span class="token number">1</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.box</span> li<span class="token pseudo-class">:nth-of-type(5)</span></span><span class="token punctuation">{</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url("../img/book_no05.gif")</span> no-repeat <span class="token number">0</span>px <span class="token number">4</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    &lt;/style>&lt;/head>&lt;body>    &lt;div class=<span class="token string">"box"</span>>        &lt;h<span class="token number">2</span>>畅销书排行&lt;/h<span class="token number">2</span>>        &lt;ul>            &lt;li>&lt;a href=<span class="token string">"#"</span>>不抱怨的世界<span class="token punctuation">(</span>畅<span class="token number">..</span>&lt;/a>&lt;/li>            &lt;li>&lt;a href=<span class="token string">"#"</span>>具遇见未知的自己<span class="token number">..</span>&lt;/a>&lt;/li>            &lt;li>&lt;a href=<span class="token string">"#"</span>>活法<span class="token punctuation">(</span>季羡林、<span class="token number">...</span>&lt;/a>&lt;/li>            &lt;li>&lt;a href=<span class="token string">"#"</span>>高效能人士的七个习惯&lt;/a>&lt;/li>            &lt;li>&lt;a href=<span class="token string">"#"</span>>被迫强大 <span class="token punctuation">(</span>北外女生香奈儿<span class="token number">...</span>&lt;/a>&lt;/li>            &lt;li>&lt;a href=<span class="token string">"#"</span>>遇见心想事成的自己 <span class="token punctuation">(</span>《遇<span class="token number">...</span>&lt;/a>&lt;/li>            &lt;li>&lt;a href=<span class="token string">"#"</span>>世界上最伟大的推销员<span class="token punctuation">(</span>插<span class="token number">..</span>&lt;/a>&lt;/li>            &lt;li>&lt;a href=<span class="token string">"#"</span>>我的成功可以复制 <span class="token punctuation">(</span>唐骏亲<span class="token number">...</span>&lt;/a>&lt;/li>            &lt;li>&lt;a href=<span class="token string">"#"</span>>少有人走的路<span class="token punctuation">:</span>心智成熟的<span class="token number">..</span>&lt;/a>&lt;/li>        &lt;/ul>    &lt;/div>&lt;/body>&lt;/html><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="100-宽高的使用"><a href="#100-宽高的使用" class="headerlink" title="100%宽高的使用"></a>100%宽高的使用</h2><p>100%宽高实现前提，父元素要 块级 且 大于 子盒子，否自填充父元素的内行大小。<br><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/css11.png" style="zoom:80%;" /></p><p>以上图，因填充父类 h2 的内行元素 </p><blockquote><p>解决方案：直接填写与父盒子相同大小的像素</p></blockquote><hr><h2 id="子绝父相"><a href="#子绝父相" class="headerlink" title="子绝父相"></a>子绝父相</h2><p>子绝父相，子级锁定父级基点问题，这导致 绝对定位子盒子 找不到 相对定位父盒子，则导致基点丢失，以浏览器为基点</p><p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/css12.png" alt=""></p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">* </span><span class="token punctuation">{</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">140</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> hotpink<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*修复代码，清除以下一行*/</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.w</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">960</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">140</span>px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#7c7b7b</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*修复代码，添加以下一行*/</span>           <span class="token comment" spellcheck="true">/*position: relative;*/</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#nn</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#FFFFFF</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>w<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>解决方案：绝对定位的盒子的上一级盒子的定位必须为 相对定位，上上级则无效<br>以上解决：剪切 <strong>.box类</strong> 的 <strong>position: relative;</strong> 样式到 <strong>.w</strong> ;</p></blockquote><hr><h2 id="子级浮动"><a href="#子级浮动" class="headerlink" title="子级浮动"></a>子级浮动</h2><p>在一个盒子内子级浮动会造成父级盒子为0的问题，解决方法： 父盒子清除浮动<br>清除浮动的方法</p><h3 id="额外标签法"><a href="#额外标签法" class="headerlink" title="额外标签法"></a>额外标签法</h3><p>通过在浮动元素末尾添加一个空的标签！<br><font color=red    >注意：是最后一个空的子标签</font></p><pre class="line-numbers language-css"><code class="language-css">&lt;div style=”<span class="token property">clear</span><span class="token punctuation">:</span>both”>&lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>优点：</strong> 通俗易懂，书写方便</p><p><strong>缺点：</strong> 添加许多无意义的标签，结构化较差</p><hr><h3 id="父级添加overflow属性方法"><a href="#父级添加overflow属性方法" class="headerlink" title="父级添加overflow属性方法"></a>父级添加overflow属性方法</h3><p>可以通过触发 BFC 的方式，可以实现清除浮动效果。<strong><font color=red><em>给父盒子添加！！！</em></font></strong></p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">overflow</span><span class="token punctuation">:</span> hidden | auto | scroll<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>优点：</strong>  代码简洁</p><p><strong>缺点：</strong>  内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素</p><h3 id="after伪元素清除浮动"><a href="#after伪元素清除浮动" class="headerlink" title="after伪元素清除浮动"></a>after伪元素清除浮动</h3><p><strong>:after 方式为空元素的升级版，好处是不用单独加标签了</strong> </p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>      <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>     <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>     <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>     <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token selector"><span class="token class">.clearfix</span> </span><span class="token punctuation">{</span>    *<span class="token property">zoom</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span> /*zoom <span class="token number">1</span>就是ie<span class="token number">6</span>清除浮动方式 * ie<span class="token number">7</span>以下的版本所识别* /<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>父盒子调用 <font color =8BE9FD>clearfix</font> 类使用即可</p><p><strong>优点：</strong> 符合闭合浮动思想  结构语义化正确</p><p><strong>缺点：</strong>低版本不支持</p><p><font color=#f00><strong>注意： content:”” ，尽量不要带点</strong></font></p><h3 id="使用before和after双伪元素清除浮动"><a href="#使用before和after双伪元素清除浮动" class="headerlink" title="使用before和after双伪元素清除浮动"></a>使用before和after双伪元素清除浮动</h3><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:before</span>, <span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>   <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span>table<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 这句话可以出发BFC BFC可以清除浮动,BFC我们后面讲 */</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>  <span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clearfix</span> </span><span class="token punctuation">{</span>  *<span class="token property">zoom</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>父盒子调用 <font color =8BE9FD>clearfix</font> 类使用即可<br><strong>优点：</strong>  代码更简洁</p><p><strong>缺点：</strong> 低版本不支持</p><hr><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;相邻块元素外边距合并&quot;&gt;&lt;a href=&quot;#相邻块元素外边距合并&quot; class=&quot;headerlink&quot; title=&quot;相邻块元素外边距合并&quot;&gt;&lt;/a&gt;相邻块元素外边距合并&lt;/h2&gt;&lt;p&gt;当上下两个有上下外边距的元素相邻时，则被外边距较大者覆盖。也可称&lt;stron
      
    
    </summary>
    
    
      <category term="前端" scheme="https://Sanscan12.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="https://Sanscan12.github.io/tags/css/"/>
    
      <category term="血的教训" scheme="https://Sanscan12.github.io/tags/%E8%A1%80%E7%9A%84%E6%95%99%E8%AE%AD/"/>
    
      <category term="笔记" scheme="https://Sanscan12.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>博客操作</title>
    <link href="https://sanscan12.github.io/posts/124c.html"/>
    <id>https://sanscan12.github.io/posts/124c.html</id>
    <published>2020-04-17T16:00:00.000Z</published>
    <updated>2020-05-25T14:25:43.969Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h2><p>命令要在根路经下运行！</p><ul><li><p><code>hexo server</code>  等价于 <code>hexo s</code><br>#启动本地服务器，用于预览主题。Hexo 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。</p></li><li><p><code>hexo server -s</code><br>#以静态模式启动</p></li><li><p><code>hexo server -p 5000</code><br>#更改访问端口 (默认端口为4000)</p></li><li><p><code>hexo server -i IP地址</code><br>#自定义 IP</p></li><li><p><code>hexo clean</code><br>#清除缓存。会删掉站点根目录下的public文件夹</p></li><li><p><code>hexo generate</code> 相当于<code>hexo g</code><br>#生成静态网页 （根目录下生成public文件夹, 会将” source / _posts / “ 下面的.md文件编译为.html后缀的文件,存放在”public/ “ 路径下）</p></li><li><p><code>hexo d</code><br>#自动生成网站静态文件，将本地数据部署到设定的仓库</p></li><li><p><code>hexo init</code> 文件夹名称<br>#初始化XX文件夹名称</p></li><li><p><code>npm update hexo -g</code></p><p>#升级</p></li><li><p><code>npm install hexo -g</code><br>#安装</p></li><li><p><code>node-v</code><br>#查看 node.js 版本号</p></li><li><p><code>npm -v</code><br>#查看npm版本号</p></li><li><p><code>git --version</code><br> #查看git版本号</p></li><li><p><code>hexo -v</code><br>#查看hexo版本号</p></li></ul><h2 id="文章开头布局"><a href="#文章开头布局" class="headerlink" title="文章开头布局"></a>文章开头布局</h2><p><code>author</code>：作者</p><p><code>categories</code>: 字符串<br>//文章分类，尽量一个</p><p><code>cover</code>：布尔值<br>// 需要加入到首页轮播封面中</p><p><code>coverImg</code>：url<br>//文章在首页轮播封面显示的图片路径</p><p><code>date</code>：0000-00-00 00:00:00</p><p><code>img</code>：url<br>//文章图片路径</p><p><code>keywords</code>：文章标题<br>//文章关键字</p><p><code>mathjax</code>: 布尔值<br>//是否开启数学公式支持</p><p><code>password</code>：字符串<br>//文章阅读密码</p><p><code>reprintPolicy</code>：<br>//文章转载规则</p><p><code>summary</code>: 字符串<br>//文章摘要</p><p><code>top</code>：布尔值<br>// 推荐文章（文章是否置顶）</p><p><code>title</code>： 标题</p><p><code>toc</code>: 布尔值<br>// TOC 的功能</p><p><code>tags</code>:    //文章标签,可以多个</p><pre><code>- 标签名1</code></pre><ul><li>标签名2<br>···</li></ul><h3 id="开头样板"><a href="#开头样板" class="headerlink" title="开头样板"></a>开头样板</h3><pre><code>---title: 标题date: 2000-04-16 00:00:00author: 柏竹mathjax: truetoc: truecoverImg：urlsummary: 文章摘要categories: 分类tags:  - 标签1  - 标签2---</code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;hexo常用命令&quot;&gt;&lt;a href=&quot;#hexo常用命令&quot; class=&quot;headerlink&quot; title=&quot;hexo常用命令&quot;&gt;&lt;/a&gt;hexo常用命令&lt;/h2&gt;&lt;p&gt;命令要在根路经下运行！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;hexo server&lt;
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://Sanscan12.github.io/categories/hexo/"/>
    
    
      <category term="血的教训" scheme="https://Sanscan12.github.io/tags/%E8%A1%80%E7%9A%84%E6%95%99%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>CSS API笔记</title>
    <link href="https://sanscan12.github.io/posts/5c87.html"/>
    <id>https://sanscan12.github.io/posts/5c87.html</id>
    <published>2020-04-15T16:00:00.000Z</published>
    <updated>2020-05-25T14:25:43.966Z</updated>
    
    <content type="html"><![CDATA[<p>便捷查找方式：按<code>Ctrl+F</code>可查找</p><h1 id="CSS初识"><a href="#CSS初识" class="headerlink" title="CSS初识"></a>CSS初识</h1><p>css样式表或层叠样式表（级联样式表），用与设置HTML页面的文本内容（字体，大小，对齐样式）、图片外形等外观。<br>CSS以HTML为基础，提供了丰富的功能，如字体、颜色、背景的控制及整体排版等，而且还可以针对不同的浏览器设置不同的样式。</p><h1 id="css样式表"><a href="#css样式表" class="headerlink" title="css样式表"></a>css样式表</h1><h2 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h2><p>位置在head头部标签中，并且用style标签定义属性，基本语法格式：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;head>    &lt;style type="text/CSS">            选择器 </span><span class="token punctuation">{</span>属性<span class="token property">1</span><span class="token punctuation">:</span>属性值<span class="token number">1</span><span class="token punctuation">;</span> 属性<span class="token property">2</span><span class="token punctuation">:</span>属性值<span class="token number">2</span><span class="token punctuation">;</span> 属性<span class="token property">3</span><span class="token punctuation">:</span>属性值<span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    &lt;/style>&lt;/head><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>选择器：选择标签加属性。</p><hr><h2 id="行内式（内联样式表）"><a href="#行内式（内联样式表）" class="headerlink" title="行内式（内联样式表）"></a>行内式（内联样式表）</h2><p>内联样式，又称行内样式、行间样式、内嵌样式。是通过标签的style属性来设置元素的样式，基本语法格式：</p><pre class="line-numbers language-css"><code class="language-css">&lt;标签名 style=<span class="token string">"属性1:属性值1; 属性2:属性值2; 属性3:属性值3;"</span>> 内容 &lt;/标签名><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>语法中style是标签的属性。属性和值的书写规范与CSS样式规则相同，行内式只对其所在的标签及嵌套在其中的子标签起作用。</p><hr><h2 id="外部样式表（外链式）"><a href="#外部样式表（外链式）" class="headerlink" title="外部样式表（外链式）"></a>外部样式表（外链式）</h2><p>链入式是将所有的样式放在一个或多个以CSS为扩展名的文件中，通过link标签将文件链接，基本语法格式如下：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CSS文件的路径<span class="token punctuation">"</span></span>  <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>link 必要属性</strong></p><p><font color =8BE9FD>link</font> 是个单标签，link标签需要放在head头部标签中，并且必须指定link标签的三个属性：<br><font color =8BE9FD>href</font>：URL地址，可以是相对路径或绝对路径。<br><font color =8BE9FD>type</font>t：所链接文档的类型，在这里需要指定为“text/CSS”，表示链接的外部文件为CSS样式表。<br><font color =8BE9FD>rel</font>：当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet”，表示被链接的文档是一个样式表文件。</p><h2 id="CSS样式规则"><a href="#CSS样式规则" class="headerlink" title="CSS样式规则"></a>CSS样式规则</h2><p>选择器 {属性:属性值 ; 属性2:属性值2 ; ···}<br>CSS样式规则中:<br>1.选择器用于指定CSS样式作用的HTML对象，花括号内是对该对象设置的具体样式。<br>2.属性和属性值以“键值对”的形式出现。<br>3.属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等。<br>4.属性和属性值之间用英文“:”连接。<br>5.多个“键值对”之间用英文“;”进行区分。<br>可以用段落和表格的对齐的演示。</p><h2 id="样式表总结"><a href="#样式表总结" class="headerlink" title="样式表总结"></a>样式表总结</h2><table><thead><tr><th>样式表</th><th>优点</th><th>缺点</th><th>使用情况</th><th>控制范围</th></tr></thead><tbody><tr><td>行内样式表</td><td>书写方便，权重高</td><td>没有实现样式和结构相分离</td><td>较少</td><td>控制一个标签（少）</td></tr><tr><td>内部样式表</td><td>部分结构和样式相分离</td><td>没有彻底分离</td><td>较多</td><td>控制一个页面（中）</td></tr><tr><td>外部样式表</td><td>完全实现结构和样式相分离</td><td>需要引入</td><td>最多，强烈推荐</td><td>控制整个站点（多）</td></tr></tbody></table><hr><h1 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h1><h2 id="标签选择器（元素选择器）"><a href="#标签选择器（元素选择器）" class="headerlink" title="标签选择器（元素选择器）"></a>标签选择器（元素选择器）</h2><p>标签选择器可对标签或元素指定的对象作用。<br>按标签名称和元素名分类，语法格式如下：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">标签名 | 元素名</span><span class="token punctuation">{</span>属性<span class="token property">1</span><span class="token punctuation">:</span>属性值<span class="token number">1</span><span class="token punctuation">;</span> 属性<span class="token property">2</span><span class="token punctuation">:</span>属性值<span class="token number">2</span><span class="token punctuation">;</span> 属性<span class="token property">3</span><span class="token punctuation">:</span>属性值<span class="token number">3</span><span class="token punctuation">;</span> ···<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h2><p>类选择器可对指定的对象起作用。<br>用“.”做前缀进行标识，后面紧跟类名，在style标签中，语法格式如下：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">.类名</span><span class="token punctuation">{</span>属性<span class="token property">1</span><span class="token punctuation">:</span>属性值<span class="token number">1</span><span class="token punctuation">;</span> 属性<span class="token property">2</span><span class="token punctuation">:</span>属性值<span class="token number">2</span><span class="token punctuation">;</span> 属性<span class="token property">3</span><span class="token punctuation">:</span>属性值<span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>标签调用样式时用“class”属性，值为类名，<strong>无需加“.”做前缀进行标识！</strong><br>下面例子：</p><pre class="line-numbers language-html"><code class="language-html">&lt;p class = "类名">内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>小技巧：</strong></p><ol><li>长名称或词组可以使用中横线来为选择器命名。</li><li>不建议使用“_”下划线来命名CSS选择器。</li><li>不要纯数字、中文等命名， 尽量使用英文字母来表示。</li></ol><hr><h2 id="多类名选择器"><a href="#多类名选择器" class="headerlink" title="多类名选择器"></a>多类名选择器</h2><p>多类名选择器可给标签指定多个类名，从而达到更多选择的目的。<br><strong>注意：</strong></p><ol><li>样式显示效果跟HTML元素中的类名先后顺序没有关系,受CSS样式书写的上下顺序有关。</li><li>各个类名中间用空格隔开。</li></ol><p>多类名选择器的使用，前提先定义了类：<em>（类名之间用空格隔开）</em></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>类名1 类名2 ···<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h2><p><font color =#05ffdc>id</font> 选择器只对一个对象起作用。<br>用“#”做前缀进行标识，后面紧跟id名，id选择器只能对一个标签使用。<em>（可多个食用，建议不要多个使用）</em><br>基本语法格式如下： <em>（语法结构基本和类选择器相同。）</em></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token id">#id</span>名</span><span class="token punctuation">{</span>属性<span class="token property">1</span><span class="token punctuation">:</span>属性值<span class="token number">1</span><span class="token punctuation">;</span> 属性<span class="token property">2</span><span class="token punctuation">:</span>属性值<span class="token number">2</span><span class="token punctuation">;</span> 属性<span class="token property">3</span><span class="token punctuation">:</span>属性值<span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><p><strong>id选择器和类选择器区别</strong></p><p><strong><em>id选择器和类选择器最大的不同在于 使用次数上。</em></strong></p><hr><h2 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h2><p>通配符选择器用“ * ”号表示，是所有选择器中作用范围最广的，能匹配页面中所有的元素。<em>（ 星号代表所有的意思）</em><br>基本语法格式如下：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">*</span><span class="token punctuation">{</span> 属性<span class="token property">1</span><span class="token punctuation">:</span>属性值<span class="token number">1</span><span class="token punctuation">;</span> 属性<span class="token property">2</span><span class="token punctuation">:</span>属性值<span class="token number">2</span><span class="token punctuation">;</span> ···<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="选择器总结"><a href="#选择器总结" class="headerlink" title="选择器总结"></a>选择器总结</h2><table><thead><tr><th>选择器</th><th>优点</th><th>缺点</th><th>使用范围</th></tr></thead><tbody><tr><td>标签选择器</td><td>快速在同一类型的标签添加样式</td><td>不能在同一标签设置不同样式</td><td>限制于设置的标签</td></tr><tr><td>类选择器</td><td>可为对象单独定义样式，也可多标签</td><td></td><td>广泛</td></tr><tr><td>id选择器</td><td>可为对象单独定义样式</td><td>不能多标签共用</td><td>一个标签的范围</td></tr><tr><td>通配符选择器</td><td>能匹配页面中所有的元素</td><td>不能单独定义样式</td><td>范围最广</td></tr></tbody></table><hr><h1 id="CSS字体样式属性"><a href="#CSS字体样式属性" class="headerlink" title="CSS字体样式属性"></a>CSS字体样式属性</h1><h2 id="字号大小-font-size"><a href="#字号大小-font-size" class="headerlink" title="字号大小 (font-size)"></a>字号大小 (font-size)</h2><p><font color =#05ffdc>font-size</font>属性用于设置字号大小。<br>属性值设置相对长度单位，也设置绝对长度单位，详细：</p><table><thead><tr><th>属性值的相对长度单位</th><th>说明</th></tr></thead><tbody><tr><td>em</td><td>相对于当前对象内文本的字体尺寸</td></tr><tr><td>px</td><td>像素<em>（常用，建议使用）</em></td></tr></tbody></table><table><thead><tr><th>属性值的绝对长度单位</th><th>说明</th></tr></thead><tbody><tr><td>in</td><td>英尺</td></tr><tr><td>cm</td><td>厘米</td></tr><tr><td>mm</td><td>毫米</td></tr><tr><td>pt</td><td>点</td></tr></tbody></table><hr><h2 id="字体类型-font-family"><a href="#字体类型-font-family" class="headerlink" title="字体类型 (font-family)"></a>字体类型 (font-family)</h2><p><font color =#05ffdc>font-family</font>属性用于设置字体。<br>可同时指定多个字体，中间以逗号隔开，如果浏览器不支持第一个字体，则会尝试下一个，直到找到合适的字体。</p><p><strong>常用技巧：</strong></p><ol><li>现在网页中普遍使用14px+。</li><li>尽量使用偶数的数字字号大小。ie6等老式浏览器支持奇数会有bug。</li><li>各种字体之间必须使用英文状态下的逗号隔开。</li><li>中文字体需要加英文状态下的引号，英文字体一般不需要加引号。当需要设置英文字体时，英文字体名必须位于中文字体名之前。</li><li>如果字体名中包含空格、#、$等符号，则该字体必须加英文状态下的单引号或双引号，例如font-family: “Times New Roman”;。</li><li>尽量使用系统默认字体，保证在任何用户的浏览器中都能正确显示。</li></ol><hr><h2 id="字体编码-CSS-Unicode"><a href="#字体编码-CSS-Unicode" class="headerlink" title="字体编码 (CSS Unicode)"></a>字体编码 (CSS Unicode)</h2><p>在 CSS 中设置字体名称，直接写中文是可以的。但是在文件编码（GB2312、UTF-8 等）不匹配时会产生乱码的错误。xp 系统不支持类似微软雅黑的中文。<em>(尽量只使用宋体和微软雅黑中文字体)</em><br><strong>提高兼容性的解决方案：</strong></p><ol><li>用英文来替代字体名称</li><li>直接使用 Unicode 编码来写字体名称可以避免这些错误</li></ol><table><thead><tr><th>字体名称</th><th>英文名称</th><th>Unicode 编码</th></tr></thead><tbody><tr><td>宋体</td><td>SimSun</td><td>\5B8B\4F53</td></tr><tr><td>新宋体</td><td>NSimSun</td><td>\65B0\5B8B\4F53</td></tr><tr><td>黑体</td><td>SimHei</td><td>\9ED1\4F53</td></tr><tr><td>微软雅黑</td><td>Microsoft YaHei</td><td>\5FAE\8F6F\96C5\9ED1</td></tr><tr><td>楷体_GB2312</td><td>KaiTi_GB2312</td><td>\6977\4F53_GB2312</td></tr><tr><td>隶书</td><td>LiSu</td><td>\96B6\4E66</td></tr><tr><td>幼园</td><td>YouYuan</td><td>\5E7C\5706</td></tr><tr><td>华文细黑</td><td>STXihei</td><td>\534E\6587\7EC6\9ED1</td></tr><tr><td>细明体</td><td>MingLiU</td><td>\7EC6\660E\4F53</td></tr><tr><td>新细明体</td><td>PMingLiU</td><td>\65B0\7EC6\660E\4F53</td></tr></tbody></table><hr><h2 id="字体粗细-font-weight"><a href="#字体粗细-font-weight" class="headerlink" title="字体粗细 (font-weight)"></a>字体粗细 (font-weight)</h2><p><font color =#05ffdc>font-weight</font>属性用于设置字体粗细。<br>字体加粗除了用 b(粗体)和 strong(语气更强的强调)标签之外，也用CSS来实现，但是CSS 是没有语义的。<em>（尽量用数值代表细粗）</em><br>font-weight的属性值：</p><table><thead><tr><th>font-weight 属性值</th><th>说明</th></tr></thead><tbody><tr><td>normal  （默认值） == 400</td><td>正常字体</td></tr><tr><td>bold      == 700</td><td>粗体</td></tr><tr><td>bolder</td><td>特粗体</td></tr><tr><td>lighter</td><td>细体</td></tr><tr><td>100 ~ 900</td><td>100的整倍数</td></tr></tbody></table><hr><h2 id="倾斜字体-font-style"><a href="#倾斜字体-font-style" class="headerlink" title="倾斜字体 (font-style)"></a>倾斜字体 (font-style)</h2><p><font color =#05ffdc>font-style</font>属性用倾斜字体。<br>字体倾斜除了用 i(倾斜)和 em(强调)标签之外可用CSS 来实现，但是CSS 是没有语义的。</p><table><thead><tr><th>font-style 属性值</th><th>说明</th></tr></thead><tbody><tr><td>normal（默认值）</td><td>标准的字体样式</td></tr><tr><td>italic</td><td>斜体的字体样式</td></tr><tr><td>oblique</td><td>倾斜的字体样式</td></tr></tbody></table><hr><h2 id="字体连写样式-font"><a href="#字体连写样式-font" class="headerlink" title="字体连写样式  (font)"></a>字体连写样式  (font)</h2><p>font属性用于对字体样式进行综合设置。<br>基本语法格式如下：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">选择器</span><span class="token punctuation">{</span><span class="token property">font</span><span class="token punctuation">:</span> <span class="token function">font-style</span><span class="token punctuation">(</span>倾斜字体<span class="token punctuation">)</span>  <span class="token function">font-weight</span><span class="token punctuation">(</span>字体粗细<span class="token punctuation">)</span>  <span class="token function">font-size</span><span class="token punctuation">(</span>字体大小<span class="token punctuation">)</span>/<span class="token function">line-height</span><span class="token punctuation">(</span>字体行高<span class="token punctuation">)</span>  <span class="token function">font-family</span><span class="token punctuation">(</span>字体类型<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>or：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">选择器</span><span class="token punctuation">{</span><span class="token property">font</span><span class="token punctuation">:</span> normal  <span class="token number">400</span>  <span class="token number">100</span>px  <span class="token string">"微软雅黑"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token selector">选择器</span><span class="token punctuation">{</span><span class="token property">font</span><span class="token punctuation">:</span> 斜体 粗细 大小 类型<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>要点：</strong></p><ol><li>使用font属性时，必须按上面语法格式中的顺序书写，不能更换顺序，各个属性以空格隔开。</li><li>不需要设置的属性可以省略属性值（取默认值），但必须保留font-size(字体大小)和font-family(字体类型)属性，否则font属性将不起作用。</li></ol><hr><h1 id="CSS外观样式属性"><a href="#CSS外观样式属性" class="headerlink" title="CSS外观样式属性"></a>CSS外观样式属性</h1><h2 id="文本颜色-color"><a href="#文本颜色-color" class="headerlink" title="文本颜色 (color)"></a>文本颜色 (color)</h2><p><font color =#05ffdc>color</font>属性用于定义文本的颜色。</p><table><thead><tr><th>color 属性类型</th><th>属性值</th></tr></thead><tbody><tr><td>预定义的颜色值</td><td>red，green，blue</td></tr><tr><td>十六进制</td><td>#FF0000，#FF6600，#29D794</td></tr><tr><td>RGB代码</td><td>rgb(255,0,0)，rgb(100%,0%,0%)</td></tr></tbody></table><p><em>注意:如果使用RGB代码的百分比颜色值，取值为0时也不能省略百分号，必须写为0%。</em></p><hr><h2 id="文本行间距-line-height"><a href="#文本行间距-line-height" class="headerlink" title="文本行间距 (line-height)"></a>文本行间距 (line-height)</h2><p><font color =#05ffdc>ine-height</font>属性用于设置字符的高距。<br>行与行之间的距离，一般称为行高。<br>字体顶与最顶行的距离=(设置值 - 字体)/2（单位：px）<br>line-height常用的属性值单位有三种：</p><table><thead><tr><th>line-height 属性单位</th><th>说明</th></tr></thead><tbody><tr><td>(int)px    <em>（常用）</em></td><td>像素</td></tr><tr><td>(int)em</td><td>字体个数</td></tr><tr><td>(0~100)百分比%</td><td>正常字体的百分比</td></tr></tbody></table><hr><h2 id="文本水平间距-letter-spacing"><a href="#文本水平间距-letter-spacing" class="headerlink" title="文本水平间距 (letter-spacing)"></a>文本水平间距 (letter-spacing)</h2><p><font color =#05ffdc>letter-spacing</font>属性用于设置字符的水平间距。<br>字符与字符之间的距离，一般称为水平间距</p><table><thead><tr><th>letter-spacing 属性单位</th><th>说明</th></tr></thead><tbody><tr><td>(int)px    <em>（常用）</em></td><td>像素</td></tr><tr><td>(int)em</td><td>字体个数</td></tr><tr><td>(0~100)百分比%</td><td>正常字体的百分比</td></tr></tbody></table><hr><h2 id="文本水平对齐方式-text-align"><a href="#文本水平对齐方式-text-align" class="headerlink" title="文本水平对齐方式 (text-align)"></a>文本水平对齐方式 (text-align)</h2><p><font color =#05ffdc>text-align</font>属性用于设置指定字体水平对齐方式。<br>是让盒子里面的内容水平居中，而不是让盒子居中对齐</p><table><thead><tr><th>text-align 属性值</th><th>说明</th></tr></thead><tbody><tr><td>left <em>（默认值）</em></td><td>左对齐</td></tr><tr><td>right</td><td>右对齐</td></tr><tr><td>center</td><td>居中对齐</td></tr></tbody></table><hr><h2 id="文本首行缩进-text-indent"><a href="#文本首行缩进-text-indent" class="headerlink" title="文本首行缩进 (text-indent)"></a>文本首行缩进 (text-indent)</h2><p><font color =#05ffdc>text-indent</font>属性用于设置首行文本的缩进。</p><table><thead><tr><th>text-indent 属性单位</th><th>说明</th></tr></thead><tbody><tr><td>(int)px</td><td>像素</td></tr><tr><td>(int)em<em>（常用）</em></td><td>字体个数</td></tr><tr><td>(0~100)百分比%</td><td>浏览器窗口宽度的百分比</td></tr></tbody></table><p><em>一般情况汉字的段落， 2em 就是两个汉字的宽度</em></p><hr><h2 id="文本装饰-text-decoration"><a href="#文本装饰-text-decoration" class="headerlink" title="文本装饰 (text-decoration)"></a>文本装饰 (text-decoration)</h2><p><font color =#05ffdc>text-decoration</font>属性用于给链接修改装饰效果。</p><table><thead><tr><th>text-decoration 属性值</th><th>说明</th></tr></thead><tbody><tr><td>none<em>（默认值）</em></td><td>无装饰（无效果）</td></tr><tr><td>underline</td><td>文本下的一条线（下划线）</td></tr><tr><td>overline</td><td>文本上的一条线（上划线）</td></tr><tr><td>line-through</td><td>贯穿文本的一条线（删除线）</td></tr></tbody></table><hr><h1 id="开发者工具-chrome"><a href="#开发者工具-chrome" class="headerlink" title="开发者工具 (chrome)"></a>开发者工具 (chrome)</h1><p>此工具是我们的必备工具，以后代码出了问题，首先第一反应就是：<br>“按F12”或者是 “shift+ctrl+i”   打开 开发者工具。</p><p><strong>小技巧：</strong></p><ol><li>ctrl+滚轮 可以 放大开发者工具代码大小。</li><li>左边是HTML元素结构   右边是CSS样式。</li><li>右边CSS样式可以改动数值和颜色查看更改后效果。</li></ol><hr><h1 id="CSS复合选择器"><a href="#CSS复合选择器" class="headerlink" title="CSS复合选择器"></a>CSS复合选择器</h1><h2 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h2><p>交集选择器可指定标签添加样式。<br>交集选择器由两个选择器构成，第一个为标签选择器，第二个为class选择器，两个选择器之间不能有空格<br>基本语法格式：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">h3<span class="token class">.class</span> </span><span class="token punctuation">{</span>属性<span class="token punctuation">:</span>属性值<span class="token punctuation">;</span> ····<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>记忆技巧：</strong><br>交集选择器 是并且的意思。  即…又…的意思</p><pre class="line-numbers language-html"><code class="language-html">比如： p.one   选择的是： 类名为 .one 的段落标签。  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span>    p.class{color:red; font-size:20px}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>stley</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h2><p>并集选择器可叠加各种选择器和标签等，添加样式。<br>各个选择器通过逗号连接而成的，任何形式的选择器（包括标签选择器、class类选择器id选择器等），都可以作为并集选择器的一部分。<br>基本语法格式：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.class</span> , h3 </span><span class="token punctuation">{</span>属性<span class="token punctuation">:</span>属性值<span class="token punctuation">;</span> ····<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>记忆技巧：</strong><br>并集选择器选择器和选择器的意思，只要逗号隔开的，所有选择器都会执行后面样式。</p><p>比如  .one, p , #test {color: #F00;}  表示   .one 和 p  和 #test 这三个选择器都会执行颜色为红色。  通常用于集体声明。</p><hr><h2 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h2><p>后代选择器又称<strong>包含选择器</strong>，用来选择元素或元素组的后代。<br><strong>写法：外层标签写在前面，内层标签写在后面，中间用空格分隔</strong>。<em>当标签发生嵌套时，内层标签就成为外层标签的后代。</em><br>基本语法格式：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">类名选择器 标记选择器</span><span class="token punctuation">{</span>属性<span class="token number">1</span>，属性值<span class="token number">1</span>；属性<span class="token number">2</span>，属性值<span class="token number">2</span>,···<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>or：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;style>    <span class="token class">.class</span> h3</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">20</span>px<span class="token punctuation">}</span>    <span class="token selector">div p</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">20</span>px<span class="token punctuation">}</span>&lt;/stley>><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="子代选择器"><a href="#子代选择器" class="headerlink" title="子代选择器"></a>子代选择器</h2><p>子代选择器又称<strong>子元素选择器</strong>，只能选择作为某元素子元素的元素。<br>写法：父级标签写在前面，子级标签写在后面，中间跟一个 &gt; 进行连接。 <em>注意，符号左右两侧各保留一个空格。</em><br>基本语法：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">类别选择器 > 标记选择器</span><span class="token punctuation">{</span>属性<span class="token number">1</span>，属性值<span class="token number">1</span>；属性<span class="token number">2</span>，属性值<span class="token number">2</span>,···<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>or：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;style>    <span class="token class">.class</span> > h3</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">20</span>px<span class="token punctuation">}</span>     <span class="token selector">div > p</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">20</span>px<span class="token punctuation">}</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><p>伪类选择器用于向某些选择器添加特殊的效果。<br>用“:”做前缀进行标识，后面紧跟伪类名，在style标签中，基本语法格式如下：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;style>    :伪类选择器</span><span class="token punctuation">{</span>属性<span class="token property">1</span><span class="token punctuation">:</span>属性值<span class="token number">1</span><span class="token punctuation">;</span> 属性<span class="token property">2</span><span class="token punctuation">:</span>属性值<span class="token number">2</span><span class="token punctuation">;</span> ··· <span class="token punctuation">}</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="链接伪类选择器"><a href="#链接伪类选择器" class="headerlink" title="链接伪类选择器"></a>链接伪类选择器</h3><table><thead><tr><th>选择器</th><th>链接显示情况</th></tr></thead><tbody><tr><td><font color =8BE9FD>link</font></td><td>未访问的链接</td></tr><tr><td><font color =8BE9FD>visited</font></td><td>已访问的链接</td></tr><tr><td><font color =8BE9FD>hover</font></td><td>鼠标移动到链接上</td></tr><tr><td><font color =8BE9FD>active</font></td><td>选定的链接</td></tr></tbody></table><p>注意写的时候，他们的顺序，<strong>尽量不要颠倒</strong>，按照  lvha的顺序。</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">a </span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* a是标签选择器  所有的链接 */</span>        <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">700</span><span class="token punctuation">;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token selector">a<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* :hover 是鼠标经过时*/</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*  鼠标经过的时候，由原来的灰色变成了红色 */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="快捷方式"><a href="#快捷方式" class="headerlink" title="快捷方式"></a>快捷方式</h2><ol><li><p>生成标签 直接输入标签名 按tab键即可   比如  div   然后tab 键， 就可以生成 <div></div></p></li><li><p>如果想要生成多个相同标签  加上 * 就可以了 比如   div*3  就可以快速生成3个div</p></li><li><p>如果有父子级关系的标签，可以用 &gt;  比如   ul &gt; li就可以了</p></li><li><p>如果有兄弟关系的标签，用  +  就可以了 比如 div+p  </p></li><li><p>如果生成带有类名或者id名字的，  直接写  .demo  或者  #two   tab 键就可以了</p></li></ol><hr><h1 id="标签显示模式-display"><a href="#标签显示模式-display" class="headerlink" title="标签显示模式 (display)"></a>标签显示模式 (display)</h1><h2 id="块级元素-block-level"><a href="#块级元素-block-level" class="headerlink" title="块级元素 (block-level)"></a>块级元素 (block-level)</h2><p><font color =#05ffdc>block-level</font>块元素通常都会占一整行或多整行。<br>块级元素可以设置宽度、高度、对齐等··属性，常用于网页布局和网页结构的搭建。</p><p>常见的块元素有<code>&lt;h1&gt;</code>~<code>&lt;h6&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;div&gt;</code>、<code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;li&gt;</code>等，其中<code>&lt;div&gt;</code>标签是最典型的块元素。</p><p> <strong>块级元素的特点：</strong></p><ol><li>总是从新行开始</li><li>高度，行高、外边距以及内边距都可以控制。</li><li>宽度默认是100%    </li><li>可以容纳内联元素和其他块元素。</li></ol><hr><h2 id="行内元素-inline-level"><a href="#行内元素-inline-level" class="headerlink" title="行内元素 (inline-level)"></a>行内元素 (inline-level)</h2><p><font color =#05ffdc>inline-level</font>行内元素又称内联元素，单纯字体空间。<br>自身的字体大小和图像尺寸来支撑结构，<strong>一般不可以设置宽度、高度、对齐等属性，常用于控制页面中文本的样式。</strong></p><p>常见的行内元素有<code>&lt;a&gt;</code>、<code>&lt;strong&gt;</code>、<code>&lt;b&gt;</code>、<code>&lt;em&gt;</code>、<code>&lt;i&gt;</code>、<code>&lt;del&gt;</code>、<code>&lt;s&gt;</code>、<code>&lt;ins&gt;</code>、<code>&lt;u&gt;</code>、<code>&lt;span&gt;</code>等，其中<code>&lt;span&gt;</code>标签最典型的行内元素。</p><p><strong>行内元素的特点：</strong></p><ol><li>和相邻行内元素在一行上。</li><li>高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效。</li><li>行内元素只能容纳文本或则其他行内元素。（a特殊）</li><li>注意：只有文字才能组成段落 因此 p  里面不能放块级元素。链接里面不能再放链接。*</li></ol><hr><h2 id="行内块元素-inline-block"><a href="#行内块元素-inline-block" class="headerlink" title="行内块元素 (inline-block)"></a>行内块元素 (inline-block)</h2><p><font color =#05ffdc>inline-block</font>：范围只限于内容范围的大小<br><strong>行内块元素的特点：</strong></p><ol><li>和相邻行内元素（行内块）在一行上,但是之间会有空白缝隙。</li><li>默认宽度就是它本身内容的宽度。</li><li>高度，行高、外边距以及内边距都可以控制。</li></ol><h2 id="显示模式转换-display"><a href="#显示模式转换-display" class="headerlink" title="显示模式转换 (display)"></a>显示模式转换 (display)</h2><p>块级元素 转 行内元素：display : inline;<br>行内元素 转 块级元素：display : block;<br>块、行内元素 转 行内块元素： display : inline-block;</p><h2 id="标签显示总结"><a href="#标签显示总结" class="headerlink" title="标签显示总结"></a>标签显示总结</h2><table><thead><tr><th>元素</th><th>特点</th></tr></thead><tbody><tr><td>行内元素</td><td>总是从新行开始<br/>高度，行高、外边距以及内边距都可以控制。<br/>宽度默认是容器的100%<br/>可以容纳内联元素和其他块元素。</td></tr><tr><td>块级元素</td><td>和相邻行内元素在一行上。<br/>高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效。<br/>默认宽度就是它本身内容的宽度。<br/>行内元素只能容纳文本或则其他行内元素。</td></tr><tr><td>行内块元素</td><td>和相邻行内元素（行内块）在一行上,但是之间会有空白缝隙。<br/>默认宽度就是它本身内容的宽度。<br/>高度，行高、外边距以及内边距都可以控制。</td></tr></tbody></table><hr><h1 id="CSS书写规范"><a href="#CSS书写规范" class="headerlink" title="CSS书写规范"></a>CSS书写规范</h1><h2 id="空格规范"><a href="#空格规范" class="headerlink" title="空格规范"></a>空格规范</h2><p>【强制】 选择器 与 { 之间必须包含空格。</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.selector</span> </span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>【强制】 属性名 与之后的 : 之间不允许包含空格， : 与 属性值 之间必须包含空格。</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="选择器规范"><a href="#选择器规范" class="headerlink" title="选择器规范"></a>选择器规范</h2><p>【强制】 当一个样式包含多个选择器时，每个选择器声明必须独占一行。</p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*好习惯*/</span><span class="token selector"><span class="token class">.post</span>,<span class="token class">.page</span>,<span class="token class">.comment</span> </span><span class="token punctuation">{</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">1.5</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*坏习惯*/</span><span class="token selector"><span class="token class">.post</span>, <span class="token class">.page</span>, <span class="token class">.comment</span> </span><span class="token punctuation">{</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">1.5</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>选择器的嵌套层级不大于 3 级，位置靠后的限定条件应尽可能精确。</p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 好习惯 */</span><span class="token selector"><span class="token id">#username</span> input </span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.comment</span> <span class="token class">.avatar</span> </span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 坏习惯 */</span><span class="token selector"><span class="token class">.page</span> <span class="token class">.header</span> <span class="token class">.login</span> <span class="token id">#username</span> input </span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.comment</span> div * </span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="属性规范"><a href="#属性规范" class="headerlink" title="属性规范"></a>属性规范</h2><p>【强制】 属性定义必须另起一行。<br>【强制】 属性定义后必须以分号结尾。</p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 好习惯 */</span><span class="token selector"><span class="token class">.selector</span> </span><span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 坏习惯 */</span><span class="token selector"><span class="token class">.selector</span> </span><span class="token punctuation">{</span> <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="高度格式"><a href="#高度格式" class="headerlink" title="高度格式"></a>高度格式</h2><p>顶线(字体最高)，中线(字体中间)，基线(字体底部)，底线(最底部)<br>基线与基线的距离为行高。<br>字体上距离=(设置值 - 字体) / 2（单位：px）</p><h1 id="CSS-三大特性"><a href="#CSS-三大特性" class="headerlink" title="CSS 三大特性"></a>CSS 三大特性</h1><h2 id="CSS层叠性"><a href="#CSS层叠性" class="headerlink" title="CSS层叠性"></a>CSS层叠性</h2><p>一般情况下，如果出现样式冲突，则会按照CSS书写的顺序，以最后的样式为准。</p><ol><li>样式冲突，遵循的原则是就近原则。 那个样式离着结构近，就执行那个样式。</li><li>样式不冲突，不会层叠</li></ol><h2 id="CSS继承性"><a href="#CSS继承性" class="headerlink" title="CSS继承性"></a>CSS继承性</h2><p>子标签会继承父标签的某些样式。想要设置一个可继承的属性，只需将它应用于父元素即可。<br><em>恰当地使用继承可以简化代码，降低CSS样式的复杂性。子元素可以继承父元素的样式</em></p><h2 id="CSS优先级"><a href="#CSS优先级" class="headerlink" title="CSS优先级"></a>CSS优先级</h2><p>出现两个或更多规则应用在同一元素上，这时就会出现优先级的问题。注意的特殊情况：</p><ol><li>继承样式的权重为0！！！</li><li>行内样式优先。</li><li>权重相同时，CSS遵循就近原则。</li><li>CSS定义了一个!important命令，该命令被赋予最大的优先级。</li></ol><h2 id="CSS特殊性"><a href="#CSS特殊性" class="headerlink" title="CSS特殊性"></a>CSS特殊性</h2><p>关于CSS权重，需要一套计算公式来去计算，这个就是 CSS Specificity，是衡量CSS值优先级的一个标准。<br>specificity用一个四位的数字串(CSS2是三位)来表示，更像四个级别，值从左到右，左面的最大，一级大于一级，数位之间没有进制，级别之间不可超越。 </p><table><thead><tr><th>继承的贡献值（权重）</th><th>0,0,0,0</th></tr></thead><tbody><tr><td>* 全部</td><td>0,0,0,0</td></tr><tr><td>每个元素（标签）</td><td>0,0,0,1</td></tr><tr><td>每个类，伪类</td><td>0,0,1,0</td></tr><tr><td>每个ID</td><td>0,1,0,0</td></tr><tr><td>每个行内样式</td><td>1,0,0,0</td></tr><tr><td>每个!important（重要的）</td><td>∞ 无穷大</td></tr></tbody></table><p>权重是可以叠加的<br>比如的例子：</p><pre><code>div ul  li   ------&gt;      0,0,0,3.nav ul li   ------&gt;      0,0,1,2a:hover      -----—&gt;      0,0,1,1.nav a       ------&gt;      0,0,1,1   #nav p       -----&gt;       0,1,0,1</code></pre><p><strong>数位之间没有进制</strong>。比如说： 0,0,0,5 + 0,0,0,5 =0,0,0,10 而不是 0,0, 1, 0， 所以不会存在10个div能赶上一个类选择器的情况。</p><h3 id="权重总结"><a href="#权重总结" class="headerlink" title="权重总结"></a>权重总结</h3><ol><li>使用了!important声明的规则。</li><li>内嵌在HTML元素的style属性里面的声明。</li><li>使用了ID 选择器的规则。</li><li>使用了类选择器、属性选择器、伪元素和伪类选择器的规则。</li><li>使用了元素选择器的规则。</li><li>只包含一个通用选择器的规则。</li><li>同一类选择器则遵循就近原则。</li></ol><p><strong><em>权重是优先级的算法，层叠是优先级的表现</em></strong></p><hr><h1 id="背景-background"><a href="#背景-background" class="headerlink" title="背景 (background)"></a>背景 (background)</h1><p>可以添加背景颜色和背景图片，以及来进行图片设置</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><font color =8BE9FD>background-color</font></td><td>背景颜色</td></tr><tr><td><font color =8BE9FD>background-image</font></td><td>背景图片地址</td></tr><tr><td><font color =8BE9FD>background-repeat</font></td><td>是否平铺</td></tr><tr><td><font color =8BE9FD>background-position</font></td><td>背景位置</td></tr><tr><td><font color =8BE9FD>background-attachment</font></td><td>背景固定还是滚动</td></tr><tr><td>背景的合写（复合属性）</td><td></td></tr><tr><td><font color =8BE9FD>background</font>:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置</td><td></td></tr></tbody></table><h2 id="背景图片-image"><a href="#背景图片-image" class="headerlink" title="背景图片 (image)"></a>背景图片 (image)</h2><p><font color =#05ffdc>background-image</font>属性允许指定一个图片展示在背景中<br>可以和background-color连用。如果图片不重复地话，图片覆盖不到地地方都会被背景色填充。 如果有背景图片平铺，则会覆盖背景颜色。语法格式：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">background-image</span> <span class="token punctuation">:</span> none | url<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>none : 　无背景图（默认的）<br>url : 　使用绝对或相对地址指定背景图像<br><em>背景图片后面的地址，url不要加引号</em></p><hr><h2 id="背景平铺-repeat"><a href="#背景平铺-repeat" class="headerlink" title="背景平铺 (repeat)"></a>背景平铺 (repeat)</h2><p><font color =#05ffdc>background-repeat  </font>背景布局形式！语法格式：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">background-repeat</span> <span class="token punctuation">:</span> repeat | no-repeat | repeat-x | repeat-y <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>repeat 属性值</th><th>说明</th></tr></thead><tbody><tr><td>repeat （默认的）</td><td>图像在纵向和横向上平铺</td></tr><tr><td>no-repeat</td><td>图像不平铺</td></tr><tr><td>repeat-x</td><td>图像在横向上平铺</td></tr><tr><td>repeat-y</td><td>背景图像在纵向平铺</td></tr></tbody></table><p><em>设置背景图片时，默认把图片在水平和垂直方向平铺以铺满整个元素</em></p><hr><h2 id="背景位置-position"><a href="#背景位置-position" class="headerlink" title="背景位置 (position)"></a>背景位置 (position)</h2><p><font color =#05ffdc>background-position</font>背景坐标，语法格式：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">background-position</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>length | position<span class="token punctuation">)</span> <span class="token punctuation">(</span>length | position<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>position 属性值</th><th>说明</th></tr></thead><tbody><tr><td>length(精确位置)</td><td>百分数、浮点数字、单位标识符组成的长度值</td></tr><tr><td>position(方位名词)</td><td>top (上)、center (中心)、bottom (底)、left (左)、right (右)</td></tr></tbody></table><p>length属性值，如果只指定了一个值，该值将用于横坐标。纵坐标将默认为50%。第二个值将用于纵坐标。<br>注意：</p><ol><li>position 后面是x坐标和y坐标。 可以使用方位名词或者精确单位。</li><li>如果和精确单位和方位名字混合使用，则必须是x坐标在前，y坐标后面。<br>比如background-position: 15px top;   则 15px 一定是  x坐标   top是 y坐标。</li></ol><p><em>实际工作用的最多的，就是背景图片居中对齐了</em></p><hr><h2 id="背景附着-attachment"><a href="#背景附着-attachment" class="headerlink" title="背景附着 (attachment)"></a>背景附着 (attachment)</h2><p><font color =#05ffdc>background-attachment</font> 是否随滚动条移动。语法格式：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">background-attachment</span> <span class="token punctuation">:</span> scroll | fixed <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font color =8BE9FD>scroll </font>: 　背景图像是随对象内容滚动（默认）<br> <font color =8BE9FD>fixed</font>: 　背景图像固定 0<br><em>设置或检索背景图像是随对象内容滚动还是固定的</em></p><hr><h2 id="背景连写"><a href="#背景连写" class="headerlink" title="背景连写"></a>背景连写</h2><p><font color =#05ffdc>background</font>属性的值的书写顺序没有强制标准的。语法格式：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">background</span><span class="token punctuation">:</span> transparent <span class="token url">url(路径)</span> repeat-y  scroll <span class="token number">50%</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span>背景颜色 背景图片地址 背景平铺 背景滚动 背景位置<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="背景透明-rgba"><a href="#背景透明-rgba" class="headerlink" title="背景透明 (rgba)"></a>背景透明 (rgba)</h2><p><font color =#05ffdc>rgba</font>背景半透明的写法语法格式是 :</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后一个参数是 <code>透明度</code>  取值范围 0~1之间<br><em>背景半透明是指盒子背景半透明， 盒子里面的内容不受影响</em></p><hr><h1 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h1><p>盒子模型就是把HTML页面中的元素看作是一个矩形的盒子，也就是一个盛装内容的容器。每个矩形都由元素的内容、内边距（padding）、边框（border）和外边距（margin）组成。</p><h2 id="盒子模型-Box-Model"><a href="#盒子模型-Box-Model" class="headerlink" title="盒子模型 (Box Model)"></a>盒子模型 (Box Model)</h2><p>元素框（element box），它描述了一个文档元素再网页布局汇总所占的位置大小。因此，<strong style="color: #f00;">每个盒子除了有自己大小和位置外，还影响着其他盒子的大小和位置。</strong></p><hr><h2 id="盒子边框-border"><a href="#盒子边框-border" class="headerlink" title="盒子边框 (border)"></a>盒子边框 (border)</h2><p><font color =#05ffdc>border</font> 盒子的外边框，语法格式：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">border-width</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>int<span class="token punctuation">)</span> ||<span class="token property">border-style</span><span class="token punctuation">:</span> 样式 || <span class="token property">border-color</span><span class="token punctuation">:</span> 颜色<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>border 属性</th><th>说明</th></tr></thead><tbody><tr><td>border-width</td><td>边框的粗细</td></tr><tr><td>border-style</td><td>边框的样式(虚线，实线··)</td></tr><tr><td>border-color</td><td>边框的颜色</td></tr></tbody></table><p>border-style默认无边框（none），它有的样式：hidden（隐藏边框）、solid（实线边框）、dashed（虚线）、dotted（点线）、double（双实线）。<br><strong style="color: #f00;">如果border：0则清除所有边框！！！</strong><br><strong>连写：</strong></p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">border</span> <span class="token punctuation">:</span> 边框的粗细 边框的样式 边框的颜色<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font color = #b3d4fc>顺序无要求！</font></p><h2 id="盒子边框写法总结表"><a href="#盒子边框写法总结表" class="headerlink" title="盒子边框写法总结表"></a>盒子边框写法总结表</h2><table><thead><tr><th>设置内容</th><th>样式属性</th><th>常用属性值</th></tr></thead><tbody><tr><td>上边框</td><td>border-top-style:样式; border-top-width:宽度;border-top-color:颜色;border-top:宽度 样式 颜色;</td><td></td></tr><tr><td>下边框</td><td>border-bottom-style:样式;border- bottom-width:宽度;border- bottom-color:颜色;border-bottom:宽度 样式 颜色;</td><td></td></tr><tr><td>左边框</td><td>border-left-style:样式; border-left-width:宽度;border-left-color:颜色;border-left:宽度 样式 颜色;</td><td></td></tr><tr><td>右边框</td><td>border-right-style:样式;border-right-width:宽度;border-right-color:颜色;border-right:宽度 样式 颜色;</td><td></td></tr><tr><td>样式综合设置</td><td>border-style:上边 [右边 下边 左边];</td><td>none无（默认）、solid单实线、dashed虚线、dotted点线、double双实线</td></tr><tr><td>宽度综合设置</td><td>border-width:上边 [右边 下边 左边];</td><td>像素值</td></tr><tr><td>颜色综合设置</td><td>border-color:上边 [右边 下边 左边];</td><td>颜色值、#十六进制、rgb(r,g,b)、rgb(r%,g%,b%)</td></tr><tr><td>边框综合设置</td><td>border:四边宽度 四边样式 四边颜色;</td><td></td></tr></tbody></table><hr><h2 id="盒子表格边框线合并-collapse"><a href="#盒子表格边框线合并-collapse" class="headerlink" title="盒子表格边框线合并 (collapse)"></a>盒子表格边框线合并 (collapse)</h2><p><font color =#05ffdc>border-collapse</font> <code>table</code>表格标签 ，表示相邻边框合并在一起的css语句：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">border-collapse</span><span class="token punctuation">:</span> collapse<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="盒子圆角边框-radius"><a href="#盒子圆角边框-radius" class="headerlink" title="盒子圆角边框 (radius)"></a>盒子圆角边框 (radius)</h2><p><font color =#05ffdc>border-radius</font> 使边角变圆角，radius 半径（距离）。语法格式：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">border-radius</span><span class="token punctuation">:</span> 左上角  右上角  右下角  左下角<span class="token punctuation">;</span><span class="token property">ro</span><span class="token punctuation">:</span><span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="盒子内边距-padding"><a href="#盒子内边距-padding" class="headerlink" title="盒子内边距 (padding)"></a>盒子内边距 (padding)</h2><p><font color =#05ffdc>padding</font> 属性用于设置内边距。  指边框与内容之间的距离。</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><font color =8BE9FD>padding-top</font></td><td>上内边距</td></tr><tr><td><font color =8BE9FD>padding-right</font></td><td>右内边距</td></tr><tr><td><font color =8BE9FD>padding-bottom</font></td><td>下内边距</td></tr><tr><td><font color =8BE9FD>padding-left</font></td><td>左内边距</td></tr></tbody></table><p><font color=#f00>padding属性参数如果是多个这由一下表格说明：</font></p><table><thead><tr><th>参数值的个数</th><th>表达意思</th></tr></thead><tbody><tr><td>1个值</td><td>padding:上下左右边距 比如padding: 3px;</td></tr><tr><td>2个值</td><td>padding:上下边距 左右边距 比如 padding: 3px 5px;</td></tr><tr><td>3个值</td><td>padding:上边距 左右边距 下边距 比如 padding: 3px 5px 10px;</td></tr><tr><td>4个值</td><td>padding:上内边距 右内边距 下内边距 左内边距 比如: padding: 3px 5px 10px 15px;</td></tr></tbody></table><p><font color=#f00><strong>注意：padding属性会撑破盒子原有的大小，适当食用。</strong></font></p><hr><h2 id="盒子外边距-margin"><a href="#盒子外边距-margin" class="headerlink" title="盒子外边距 (margin)"></a>盒子外边距 (margin)</h2><p><font color =#05ffdc>margin</font>用于设置外边距。  设置外边距会在元素之间创建“空白”， 这段空白通常不能放置其他内容。</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><font color =8BE9FD>margin-top</font></td><td>上内边距</td></tr><tr><td><font color =8BE9FD>margin-right</font></td><td>右内边距</td></tr><tr><td><font color =8BE9FD>margin-bottom</font></td><td>下内边距</td></tr><tr><td><font color =8BE9FD>margin-left</font></td><td>左内边距</td></tr><tr><td><font color =8BE9FD>margin</font></td><td>上 右 下 左</td></tr></tbody></table><p><font color=#f00>margin属性参数如果是多个使用方式和padding属性相同</font></p><h2 id="盒子阴影-box-shadow"><a href="#盒子阴影-box-shadow" class="headerlink" title="盒子阴影 (box-shadow)"></a>盒子阴影 (box-shadow)</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token property">box-shadow</span><span class="token punctuation">:</span> 水平阴影 垂直阴影 模糊距离 阴影尺寸 阴影颜色  内/外阴影；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td>h-shadow</td><td>必须。水平阴影位置（正右负左）</td></tr><tr><td>v-shadow</td><td>必须。垂直阴影位置（正下负上）</td></tr><tr><td>blur</td><td>模糊距离</td></tr><tr><td>spread</td><td>阴影尺寸</td></tr><tr><td>color</td><td>阴影颜色</td></tr><tr><td>inset</td><td>将外阴影（默认）改为内阴影</td></tr></tbody></table><h2 id="盒子外边距实现居中"><a href="#盒子外边距实现居中" class="headerlink" title="盒子外边距实现居中"></a>盒子外边距实现居中</h2><p>可以让一个盒子实现水平居中，需要满足一下两个条件：</p><ol><li>必须是块级元素。     </li><li>盒子必须指定了宽度（width）</li></ol><p>然后就给<strong>左右的外边距都设置为auto</strong>，就可使块级元素水平居中。例子：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.header</span></span><span class="token punctuation">{</span>     <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">960</span>px<span class="token punctuation">;</span>     <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="盒子和文本的居中"><a href="#盒子和文本的居中" class="headerlink" title="盒子和文本的居中"></a>盒子和文本的居中</h2><p>文字水平居中是 text-align: center<br>盒子水平居中 左右margin 改为 auto </p><h2 id="清除元素的默认内外边距"><a href="#清除元素的默认内外边距" class="headerlink" title="清除元素的默认内外边距"></a>清除元素的默认内外边距</h2><p>为了更方便地控制网页中的元素，制作网页时，可使用如下代码清除元素的默认内外边距： </p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">* </span><span class="token punctuation">{</span>   <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/* 清除内边距 */</span>   <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/* 清除外边距 */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><font color=red>行内元素是只有左右外边距的，是没有上下外边距的，尽量不要给行内元素指定上下的内外边距就好了</font></p><hr><h1 id="浮动-float"><a href="#浮动-float" class="headerlink" title="浮动 (float)"></a>浮动 (float)</h1><p>CSS的定位机制有3种：普通流（标准流）、浮动和定位。</p><p><font color =#05ffdc>float</font> 属性来定义浮动，语法格式：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">选择器</span><span class="token punctuation">{</span>    <span class="token property">float</span><span class="token punctuation">:</span> 属性值<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>left</td><td>向右浮动</td></tr><tr><td>right</td><td>向左浮动</td></tr><tr><td>none（默认）</td><td>不浮动</td></tr></tbody></table><h2 id="浮动特性"><a href="#浮动特性" class="headerlink" title="浮动特性"></a>浮动特性</h2><p>浮动脱离标准流，不占位置，会影响标准流。浮动只有左右浮动。</p><ol><li>如果在一个父类盒子内浮动的子类盒子，浮动的子类盒子不会超出浮动范围</li><li>一个父盒子里面的子盒子，如果其中一个子级有浮动的，则其他子级都需要浮动。这样才能一行对齐显示</li><li>元素添加浮动后，元素会具有行内块元素的特性</li></ol><p><strong>浮动目的</strong></p><p>浮动的目的就是为了让多个块级元素同一行上显示。</p><p><strong>float      浮 漏 特</strong> </p><p>浮：    加了浮动的元素盒子是浮起来的，漂浮在其他的标准流盒子上面。<br>漏：    加了浮动的盒子，不占位置的，它浮起来了，它原来的位置漏 给了标准流的盒子。<br>特：    特别注意，首先浮动的盒子需要和标准流的父级搭配使用， 其次 特别的注意浮动可以使元素显示模式体现为行内块特性。</p><h2 id="浮动清除"><a href="#浮动清除" class="headerlink" title="浮动清除"></a>浮动清除</h2><p>清除浮动主要为了解决父级元素因为子级浮动引起内部高度为 0 的问题。就是把浮动的盒子圈到里面，让父盒子闭合出口和入口不让他们出来影响其他元素。<br><strong>清除浮动：</strong></p><pre class="line-numbers language-css"><code class="language-css"> <span class="token property">clear</span><span class="token punctuation">:</span> 属性值<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td>left</td><td>不允许左侧有浮动元素（清除左侧浮动的影响）</td></tr><tr><td>right</td><td>不允许右侧有浮动元素（清除右侧浮动的影响）</td></tr><tr><td>both</td><td>同时清除左右两侧浮动的影响</td></tr></tbody></table><h3 id="额外标签法"><a href="#额外标签法" class="headerlink" title="额外标签法"></a>额外标签法</h3><p>通过在浮动元素末尾添加一个空的标签！<br><font color=red    >注意：是最后一个空的子标签</font></p><pre class="line-numbers language-css"><code class="language-css">&lt;div style=”<span class="token property">clear</span><span class="token punctuation">:</span>both”>&lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>优点：</strong> 通俗易懂，书写方便</p><p><strong>缺点：</strong> 添加许多无意义的标签，结构化较差</p><hr><h3 id="父级添加overflow属性方法"><a href="#父级添加overflow属性方法" class="headerlink" title="父级添加overflow属性方法"></a>父级添加overflow属性方法</h3><p>可以通过触发 BFC 的方式，可以实现清除浮动效果。<strong><font color=red><em>给父盒子添加！！！</em></font></strong></p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">overflow</span><span class="token punctuation">:</span> hidden|auto|scroll<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>优点：</strong>  代码简洁</p><p><strong>缺点：</strong>  内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素</p><hr><h3 id="after伪元素清除浮动"><a href="#after伪元素清除浮动" class="headerlink" title="after伪元素清除浮动"></a>after伪元素清除浮动</h3><p><strong>:after 方式为空元素的升级版，好处是不用单独加标签了</strong> </p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>      <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>     <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>     <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>     <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token selector"><span class="token class">.clearfix</span> </span><span class="token punctuation">{</span>    *<span class="token property">zoom</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span> /*zoom <span class="token number">1</span>就是ie<span class="token number">6</span>清除浮动方式 * ie<span class="token number">7</span>以下的版本所识别* /<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>父盒子调用 <font color =8BE9FD>clearfix</font> 类使用即可</p><p><strong>优点：</strong> 符合闭合浮动思想  结构语义化正确</p><p><strong>缺点：</strong>低版本不支持</p><p><font color=#f00><strong>注意： content:”” ，尽量不要带点</strong></font></p><hr><h3 id="使用before和after双伪元素清除浮动"><a href="#使用before和after双伪元素清除浮动" class="headerlink" title="使用before和after双伪元素清除浮动"></a>使用before和after双伪元素清除浮动</h3><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:before</span>, <span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>   <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span>table<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 这句话可以出发BFC BFC可以清除浮动,BFC我们后面讲 */</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>  <span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clearfix</span> </span><span class="token punctuation">{</span>  *<span class="token property">zoom</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>父盒子调用 <font color =8BE9FD>clearfix</font> 类使用即可<br><strong>优点：</strong>  代码更简洁</p><p><strong>缺点：</strong> 低版本不支持</p><hr><h1 id="版心和布局流程"><a href="#版心和布局流程" class="headerlink" title="版心和布局流程"></a>版心和布局流程</h1><h2 id="版心"><a href="#版心" class="headerlink" title="版心"></a>版心</h2><p>是指网页中主体内容所在的区域。一般在浏览器窗口中水平居中显示，常见的宽度值为960px、980px、1000px、1200px等。</p><h2 id="布局流程"><a href="#布局流程" class="headerlink" title="布局流程"></a>布局流程</h2><p>布局时通常需要遵守一定的布局流程，具体如下：</p><ol><li>确定页面的版心（可视区）</li><li>分析页面中的行模块，以及每个行模块中的列模块</li><li>制作HTML结构 </li><li>CSS初始化，然后开始运用盒子模型的原理，通过DIV+CSS布局来控制网页的各个模块。</li></ol><hr><h1 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h1><p>定位可以实现<code>标准流</code>和<code>浮动</code>难以实现的结果简单化。</p><h2 id="元素的定位属性"><a href="#元素的定位属性" class="headerlink" title="元素的定位属性"></a>元素的定位属性</h2><p>元素的定位属性主要包括定<code>位模式</code>和<code>边偏移</code>两部分。</p><p><strong>1、边偏移</strong></p><table><thead><tr><th>边偏移属性</th><th>说明</th></tr></thead><tbody><tr><td>top</td><td>顶端，定义元素相对于其父元素上边线的距离</td></tr><tr><td>bottom</td><td>底部，定义元素相对于其父元素下边线的距离</td></tr><tr><td>left</td><td>左侧，定义元素相对于其父元素左边线的距离</td></tr><tr><td>right</td><td>右侧，定义元素相对于其父元素右边线的距离</td></tr></tbody></table><p><strong>2、定位模式 (定位的分类)</strong></p><p><font color =#05ffdc>position</font> 属性用于定义元素的 定位模式 ，语法格式如下：</p><pre><code>选择器{position: 属性值;}</code></pre><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>static</td><td>静态定位（默认）</td></tr><tr><td>relative</td><td>相对定位，相对于其原文档流的位置进行定位</td></tr><tr><td>absolute</td><td>绝对定位，相对于其上一个已经定位的父元素进行定位</td></tr><tr><td>fixed</td><td>固定定位，相对于浏览器窗口进行定位</td></tr></tbody></table><hr><h2 id="静态定位-static"><a href="#静态定位-static" class="headerlink" title="静态定位 (static)"></a>静态定位 (static)</h2><p><font color =#05ffdc>position: static;</font> HTML文档流中默认样式</p><blockquote><ol><li>无法偏移</li><li>可取消定位</li><li>跟随滚动</li></ol></blockquote><hr><h2 id="相对定位-relative"><a href="#相对定位-relative" class="headerlink" title="相对定位 (relative)"></a>相对定位 (relative)</h2><p><font color =#05ffdc>position: relative; </font> 多个元素一个搞定，盒子打包</p><blockquote><ol><li>可偏移，原有位置继续占有</li><li>移动位置，是以元素左上角为基点移动</li><li>跟随滚动</li></ol></blockquote><hr><h2 id="绝对定位-absolute"><a href="#绝对定位-absolute" class="headerlink" title="绝对定位 (absolute)"></a>绝对定位 (absolute)</h2><p><font color =#05ffdc>position: absolute; </font> 不占空间的漂浮元素</p><blockquote><ol><li>可偏移，原有位置不占有</li><li>无父级，以浏览器为基准</li><li>有父级，以父级盒子为基准</li><li>跟随滚动</li></ol></blockquote><p><strong>口诀技巧</strong></p><ol><li><strong>子绝父相</strong><br>子级盒子是绝对定位，父级盒子是相对定位</li><li><strong>子绝父绝</strong><br>父级盒子是绝对定位，子级盒子是绝对定位</li></ol><hr><h2 id="固定定位-fixed"><a href="#固定定位-fixed" class="headerlink" title="固定定位 (fixed)"></a>固定定位 (fixed)</h2><p><font color =#05ffdc>position: fixed; </font> 始终在窗口展示的元素</p><blockquote><ol><li>跟父亲没有关系，只认浏览器</li><li>完全脱标，不占有位置</li><li>不随滚动</li></ol></blockquote><hr><h2 id="叠放次序-z-index"><a href="#叠放次序-z-index" class="headerlink" title="叠放次序 (z-index)"></a>叠放次序 (z-index)</h2><p><font color =#05ffdc>z-index: 4; </font> 调整重叠定位元素的堆叠顺序</p><blockquote><ol><li>默认属性值：0，值越大越靠顶层</li><li>取值相同，书写顺序，后者居上</li><li>没有单位</li><li>除了静态，只能用于定位，其他类型，则无效</li></ol></blockquote><hr><h2 id="定位总结"><a href="#定位总结" class="headerlink" title="定位总结"></a>定位总结</h2><table><thead><tr><th>定位模式</th><th>是否脱标占有位置</th><th>是否可以使用边偏移</th><th>移动位置基准</th></tr></thead><tbody><tr><td>静态 static</td><td>不脱标，正常模式</td><td>不可以</td><td>正常模式</td></tr><tr><td>相对定位 relative</td><td>脱标，占位置</td><td>可以</td><td>相对自身位置移动</td></tr><tr><td>绝对定位 absolute</td><td>脱标，不占位置</td><td>可以</td><td>相对于定位父级移动位置</td></tr><tr><td>固定定位 fixed</td><td>脱标，不占位置</td><td>可以</td><td>相对于浏览器移动位置</td></tr></tbody></table><hr><h1 id="元素显示与隐藏"><a href="#元素显示与隐藏" class="headerlink" title="元素显示与隐藏"></a>元素显示与隐藏</h1><p>主要目的是让一个元素在页面中消失，但是不在文档源码中删除</p><h2 id="显示-display"><a href="#显示-display" class="headerlink" title="显示 (display)"></a>显示 (display)</h2><p><font color =#05ffdc>display</font> 设置元素如何显示</p><p><font color =#05ffdc>display : none;</font> 隐藏对象 、不保留位置</p><hr><h2 id="可见性-visibility"><a href="#可见性-visibility" class="headerlink" title="可见性 (visibility)"></a>可见性 (visibility)</h2><p><font color =#05ffdc>visibility</font> 设置元素否显示</p><table><thead><tr><th>visibility属性值</th><th>说明</th></tr></thead><tbody><tr><td>visible（默认）</td><td>对象可视</td></tr><tr><td>hidden</td><td>对象隐藏 、保留位置</td></tr></tbody></table><hr><h2 id="溢出隐藏-overflow"><a href="#溢出隐藏-overflow" class="headerlink" title="溢出隐藏 (overflow)"></a>溢出隐藏 (overflow)</h2><p><font color =#05ffdc>overflow</font> 当对象的内容超过指定的高度和宽度则隐藏</p><table><thead><tr><th>overflow属性值</th><th>说明</th></tr></thead><tbody><tr><td>visible （默认）</td><td>不剪切内容也不添加滚动条</td></tr><tr><td>auto</td><td>超出自动显示滚动条，不超不显示</td></tr><tr><td>hidden</td><td>超出内容隐藏掉</td></tr><tr><td>scroll</td><td>总是显示滚动条</td></tr></tbody></table><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/wt3.png" style="zoom:50%;" /><hr><h1 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h1><h2 id="鼠标样式-cursor"><a href="#鼠标样式-cursor" class="headerlink" title="鼠标样式 (cursor)"></a>鼠标样式 (cursor)</h2><p><font color =#05ffdc>cursor</font> 鼠标移到对象上更换预定义光标形状</p><p>常用的鼠标样式：</p><table><thead><tr><th>cursor属性值</th><th>说明</th></tr></thead><tbody><tr><td>default</td><td>默认</td></tr><tr><td>pointer</td><td>小手</td></tr><tr><td>move</td><td>移动</td></tr><tr><td>text</td><td>文本</td></tr></tbody></table><hr><h2 id="轮廓-outline"><a href="#轮廓-outline" class="headerlink" title="轮廓 (outline)"></a>轮廓 (outline)</h2><p><font color =#05ffdc>outline</font> 边框边缘的外围，可起到突出元素的作用</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">outline</span><span class="token punctuation">:</span> color style width<span class="token property">outline</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span> solid <span class="token number">1</span>px<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p> 参数：<br>color: 选择颜色<br>style：样式<br>width: 宽度</p></blockquote><p>一般情况，我们只关心的直接写法是 <code>outline: 0;</code>、<code>outline: none;</code></p><hr><h2 id="文本域固定-resize"><a href="#文本域固定-resize" class="headerlink" title="文本域固定 (resize)"></a>文本域固定 (resize)</h2><p><font color =#05ffdc>resize</font> 调节文本域尺寸大小或固定</p><table><thead><tr><th>resize属性值</th><th>说明</th></tr></thead><tbody><tr><td>none</td><td>固定大小</td></tr><tr><td>both</td><td>可调节大小</td></tr><tr><td>horizontal</td><td>只可以调节宽</td></tr><tr><td>vertical</td><td>只可以调节高</td></tr></tbody></table><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/wt2.png" style="zoom: 50%;" /><hr><h2 id="垂直对齐-vertical-align"><a href="#垂直对齐-vertical-align" class="headerlink" title="垂直对齐 (vertical-align)"></a>垂直对齐 (vertical-align)</h2><p><font color =#05ffdc>vertical-align</font> 设置内容与图片\表单的对齐方式</p><table><thead><tr><th>vertical-align属性值</th><th>说明</th></tr></thead><tbody><tr><td>baseline （默认）</td><td>基线对齐</td></tr><tr><td>top</td><td>顶部对齐</td></tr><tr><td>middle</td><td>居中对齐</td></tr><tr><td>bottom</td><td>底部对齐</td></tr></tbody></table><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/wt1.png" style="zoom:50%;" ><hr><h1 id="溢出的文字隐藏"><a href="#溢出的文字隐藏" class="headerlink" title="溢出的文字隐藏"></a>溢出的文字隐藏</h1><h2 id="自动换行-word-break"><a href="#自动换行-word-break" class="headerlink" title="自动换行 (word-break)"></a>自动换行 (word-break)</h2><p><font color =#05ffdc>word-break</font> 设置文本换行行为</p><table><thead><tr><th>word-break属性值</th><th>说明</th></tr></thead><tbody><tr><td>normal（默认）</td><td>强制显示所有文本</td></tr><tr><td>keep-all</td><td>只能在半角空格或连字符处换行（处理英文）</td></tr><tr><td>break-all</td><td>遇边界断行，不考虑单词完整</td></tr><tr><td>break-word</td><td>遇边界断行，考虑单词完整</td></tr></tbody></table><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/1.png" style="zoom: 67%;" /><hr><h2 id="空格换行-white-space"><a href="#空格换行-white-space" class="headerlink" title="空格换行 (white-space)"></a>空格换行 (white-space)</h2><p><font color =#05ffdc>white-space</font> 对元素内容的空格处理！br可换行！！！</p><table><thead><tr><th>white-space属性值</th><th>说明</th></tr></thead><tbody><tr><td>normal （默认）</td><td>默认处理</td></tr><tr><td>pre</td><td>超出边界不断行</td></tr><tr><td>pre-wrap</td><td>空白距离不合并，碰边断行</td></tr><tr><td>pre-line</td><td>合并多余空白，碰边断行</td></tr><tr><td>nowrap</td><td>合并多余空白，结束换行</td></tr></tbody></table><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/css1.png" style="zoom:50%;" /><hr><h2 id="文字溢出-text-overflow"><a href="#文字溢出-text-overflow" class="headerlink" title="文字溢出 (text-overflow)"></a>文字溢出 (text-overflow)</h2><p><font color =#05ffdc>text-overflow</font>  将元素内容溢出时用自定义字符代替</p><table><thead><tr><th>text-overflow属性值</th><th>说明</th></tr></thead><tbody><tr><td>clip</td><td>切掉溢出部分</td></tr><tr><td>ellipsis</td><td>溢出部分替换为（…）</td></tr></tbody></table><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;!DOCTYPE html>&lt;html lang="en">&lt;head>    &lt;meta charset="UTF-8">    &lt;title>Title&lt;/title>    &lt;style>        div </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid red<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>            <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.no1</span> </span><span class="token punctuation">{</span>            <span class="token property">text-overflow</span><span class="token punctuation">:</span> clip<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.no2</span> </span><span class="token punctuation">{</span>            <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    &lt;/style>&lt;/head>&lt;body>&lt;ul>    &lt;li>clip&lt;div class=<span class="token string">"no1"</span>>内容内容内容内容内容内容&lt;/div>&lt;/li>    &lt;li>ellipsis&lt;div class=<span class="token string">"no2"</span>>内容内容内容内容内容内容&lt;/div>&lt;/li>&lt;/ul>&lt;/body>&lt;/html><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/css2.png" alt=""></p><blockquote><p><font color=red><strong>生效前提：</strong></font></p><ol><li>元素宽度小于内容</li><li>超出内容隐藏的属性<code>overflow: hidden</code></li><li>操出边界不换行的属性<code>white-space:( pre | nowrap )</code></li></ol></blockquote><hr><h1 id="精灵图"><a href="#精灵图" class="headerlink" title="精灵图"></a>精灵图</h1><p>由很多小的背景图像合成的大图被称为 精灵图。可以减少浏览器与服务器数据交换的次数。</p><p><strong>精灵图运用</strong></p><p>根据大小查找图片,锁定位置。</p><p>精灵图在css使用到的属性有</p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*背景连写*/</span>background<span class="token comment" spellcheck="true">/*背景图片*/</span><span class="token property">background-image</span><span class="token punctuation">:</span> none | url<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*背景平铺 */</span><span class="token property">background-repeat</span><span class="token punctuation">:</span> repeat | no-repeat | repeat-x | repeat-y <span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*背景位置*/</span><span class="token property">background-position</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>length | position<span class="token punctuation">)</span> <span class="token punctuation">(</span>length | position<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*length: 精准坐标、position: 方位名词*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原图调用 ：（京东精灵图）</p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/css4.png" style="zoom:50%;" /><p>示范代码：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;!DOCTYPE html>&lt;html lang="en">&lt;head>    &lt;meta charset="UTF-8">    &lt;title>Title&lt;/title>    &lt;style>        li </span><span class="token punctuation">{</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.no1</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">26</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url("img/jd.png")</span> no-repeat<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.no2</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">22</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url("img/jd.png")</span> no-repeat <span class="token number">0</span> -<span class="token number">68</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.no3</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">230</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">52</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url("img/jd.png")</span> no-repeat <span class="token number">0</span> -<span class="token number">134</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.no4</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">26</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url("img/jd.png")</span> no-repeat <span class="token number">0</span> -<span class="token number">408</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.no5</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">42</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">44</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url("img/jd.png")</span> no-repeat <span class="token number">0</span> -<span class="token number">442</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    &lt;/style>&lt;/head>&lt;body>&lt;ul>    &lt;li class=<span class="token string">"no1"</span>>&lt;/li>    &lt;li class=<span class="token string">"no2"</span>>&lt;/li>    &lt;li class=<span class="token string">"no3"</span>>&lt;/li>    &lt;li class=<span class="token string">"no4"</span>>&lt;/li>    &lt;li class=<span class="token string">"no5"</span>>&lt;/li>&lt;/ul>&lt;/body>&lt;/html><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果图示</p><p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/css3.png" alt=""></p><hr><h1 id="滑动门"><a href="#滑动门" class="headerlink" title="滑动门"></a>滑动门</h1><p>为网页元素设置特殊形状的背景。<br>以下我网站例子：</p><p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/css5.png" alt=""></p><p>背景原型：</p><p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/css7.png" alt=""><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/css8.png" /></p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/css11.jpg" style="zoom:50%;" /><p>滑动门应用：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">* </span><span class="token punctuation">{</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">body </span><span class="token punctuation">{</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">1000</span>px<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*背景*/</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url("img/wx.jpg")</span> repeat-x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.box</span> li </span><span class="token punctuation">{</span>            <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>            <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.box</span> a </span><span class="token punctuation">{</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">33</span>px<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">33</span>px<span class="token punctuation">;</span>            <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*按钮样式背景（左）*/</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url("img/to.png")</span> no-repeat<span class="token punctuation">;</span>            <span class="token property">padding-left</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.box</span> span </span><span class="token punctuation">{</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">33</span>px<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*按钮样式背景（右）*/</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url("img/to.png")</span> right<span class="token punctuation">;</span>            <span class="token property">padding-right</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*鼠标指定时高亮*/</span>        <span class="token selector"><span class="token class">.box</span> a<span class="token pseudo-class">:hover</span> span </span><span class="token punctuation">{</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url("img/ao.png")</span> right<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.box</span> a<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url("img/ao.png")</span> no-repeat<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>PC平台<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>开放平台<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>帮助与反馈<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Sanscan12/img/img/css9.png" alt=""></p><blockquote><p>说明：</p><ol><li>a 设置背景左侧，内边距撑开左框中的宽度</li><li>span 设置背景右侧，内边距撑开有边框的宽度，左边有内容</li><li>a包含span是因为整体是可以点击的缘故</li></ol></blockquote><hr><h1 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h1><p>字体图标是以特殊形式的字体呈现出来的图标，可透明、旋转、改颜色等····</p><blockquote><p><strong>使用流程：</strong></p><ol><li>获取svg格式的效果图</li><li>上传生成兼容性的字体文件包</li><li>下载到本地的兼容字体文件包</li><li>字体文件包引入到HTML页面中</li></ol></blockquote><p><strong>引入网页：</strong></p><ol><li><p>创建fonts文件夹在根路经里</p></li><li><p>在样式里声明字体图标，声明代码可在下载的项目里获取！！！</p><p>以下是例子：<font color=red><strong>（不同来源网站不同声明代码！！！）</strong></font></p><pre class="line-numbers language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'icomoon'</span><span class="token punctuation">;</span>  <span class="token property">src</span><span class="token punctuation">:</span>  <span class="token url">url('fonts/icomoon.eot?7kkyc2')</span><span class="token punctuation">;</span>  <span class="token property">src</span><span class="token punctuation">:</span>  <span class="token url">url('fonts/icomoon.eot?7kkyc2#iefix')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'embedded-opentype'</span><span class="token punctuation">)</span>,    <span class="token url">url('fonts/icomoon.ttf?7kkyc2')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span>,    <span class="token url">url('fonts/icomoon.woff?7kkyc2')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'woff'</span><span class="token punctuation">)</span>,    <span class="token url">url('fonts/icomoon.svg?7kkyc2#icomoon')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'svg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*清除粗细*/</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*清除倾斜*/</span>  <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>盒子使用字体</p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*盒子字体可用*/</span><span class="token selector">span </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*icomoon: 字体图标的名称*/</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"icomoon"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>盒子里添加结构，图标编码可在项目里获取！</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">span<span class="token pseudo-element">::before</span> </span><span class="token punctuation">{</span>         <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"\e900"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*或者 （一下是特殊字体图标）*/</span>&lt;span>&amp;#xe<span class="token number">613</span><span class="token punctuation">;</span>&lt;/span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>本人学时：5个月</p><p>本站对你有用，欢迎在以下留言评论，反馈问题也是可以的！!</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;便捷查找方式：按&lt;code&gt;Ctrl+F&lt;/code&gt;可查找&lt;/p&gt;
&lt;h1 id=&quot;CSS初识&quot;&gt;&lt;a href=&quot;#CSS初识&quot; class=&quot;headerlink&quot; title=&quot;CSS初识&quot;&gt;&lt;/a&gt;CSS初识&lt;/h1&gt;&lt;p&gt;css样式表或层叠样式表（级联样式表），
      
    
    </summary>
    
    
      <category term="前端" scheme="https://Sanscan12.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="https://Sanscan12.github.io/tags/css/"/>
    
      <category term="笔记" scheme="https://Sanscan12.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>MySQL API笔记</title>
    <link href="https://sanscan12.github.io/posts/53d1.html"/>
    <id>https://sanscan12.github.io/posts/53d1.html</id>
    <published>2020-04-15T16:00:00.000Z</published>
    <updated>2020-06-16T23:34:05.448Z</updated>
    
    <content type="html"><![CDATA[<p>便捷查找方式：按<code>Ctrl+F</code>可查找<br>搜索方法查找方法：数据名+操作方式</p><blockquote><p>例子： 字段删除、表修改</p></blockquote><hr><h1 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h1><h2 id="数据库创建"><a href="#数据库创建" class="headerlink" title="数据库创建"></a>数据库创建</h2><pre class="line-numbers language-mysql"><code class="language-mysql">CREATE DATABASE [IF NOT EXISTS] 数据库名 [编码集设置];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>编码集设置:<br>CHARACTER SET 字符集名 [校对规则]<br>校对规则:<br>COLLATE 校对名</p></blockquote><p><strong>IF NOT EXISTS</strong>：检查是否已存在的状态<br><strong>CHARACTER SET</strong>：编码集设置<br><strong>COLLATE</strong>：校对规则 （在字符集内用于比较字符的一套规则）</p><h2 id="数据库查看"><a href="#数据库查看" class="headerlink" title="数据库查看"></a>数据库查看</h2><p>显示数据库:</p><pre class="line-numbers language-mysql"><code class="language-mysql">SHOW DATABASES;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示数据库创建语句:</p><pre class="line-numbers language-mysql"><code class="language-mysql">SHOW CREATE DATABASE 数据库名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看当前所选的数据库：</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT DATABASE();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="数据库修改"><a href="#数据库修改" class="headerlink" title="数据库修改"></a>数据库修改</h2><pre class="line-numbers language-mysql"><code class="language-mysql">ALTER DATABASE [IF NOT EXISTS] 数据库名 [编码集设置];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>编码集设置:<br>CHARACTER SET 字符集名 [校对规则]<br>校对规则:<br>COLLATE 校对名</p></blockquote><h2 id="数据库删除"><a href="#数据库删除" class="headerlink" title="数据库删除"></a>数据库删除</h2><pre class="line-numbers language-MYSQL"><code class="language-MYSQL">DROP DATABASE [IF EXISTS]  数据库名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="数据库选择"><a href="#数据库选择" class="headerlink" title="数据库选择"></a>数据库选择</h2><pre class="line-numbers language-MYSQL"><code class="language-MYSQL">USE 数据库名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="整型数据"><a href="#整型数据" class="headerlink" title="整型数据"></a>整型数据</h2><table><thead><tr><th>整型数据</th><th>字节数</th><th>无符号的取值范围</th><th>有符号的取值范围</th></tr></thead><tbody><tr><td>TINYINT</td><td>1</td><td>0~225</td><td>-125~127</td></tr><tr><td>SMALLINT</td><td>2</td><td>0-65535</td><td>-32768~32768</td></tr><tr><td>MEDIUMINT</td><td>3</td><td>0~16777215</td><td>···</td></tr><tr><td>INT</td><td>4</td><td>0-4294967295</td><td>···</td></tr><tr><td>BIGINT</td><td>8</td><td>0~18446744073709551615</td><td></td></tr></tbody></table><h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><table><thead><tr><th>浮点型数据</th><th>字节数</th></tr></thead><tbody><tr><td>FLOAT</td><td>4</td></tr><tr><td>DOUBLE</td><td>8</td></tr><tr><td><strong>定点数型数据</strong></td><td></td></tr><tr><td>DECIMAL（（）M , 2）</td><td>M+2</td></tr></tbody></table><h2 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h2><table><thead><tr><th>数据类型</th><th>字节数</th><th>取值范围</th><th>日期格式</th><th>零值</th></tr></thead><tbody><tr><td>YEAR</td><td>1</td><td>1901~2155</td><td>YYYY</td><td>0000</td></tr><tr><td>DATE</td><td>4</td><td>1000-01-01-9999-12-3</td><td>YYYY-MM-DD</td><td>0000-00-00</td></tr><tr><td>TIME</td><td>3</td><td>-838:59:59-838:59:59</td><td>HH:MM:SS</td><td>00:00:00</td></tr><tr><td>DATETIME</td><td>8</td><td>11</td><td>YYYY-MM-DD、HH:MM:SS</td><td>0000-00-00 00:00:00</td></tr><tr><td>TIMESTAMP</td><td>4</td><td>1970-01-01 00:00:01~2038-01-19 03:14:07</td><td>YYYY-MM-DD、HH:MM:SS</td><td>0000-00-00 00:00:00</td></tr></tbody></table><h2 id="字符串型"><a href="#字符串型" class="headerlink" title="字符串型"></a>字符串型</h2><table><thead><tr><th>字符串类型(单位：字节)</th><th>字节状态</th><th>优点</th></tr></thead><tbody><tr><td>CHAR（（int）Max）</td><td>固定</td><td>查询快</td></tr><tr><td>VARCHAR（（int）Max）</td><td>动态</td><td>省空间</td></tr></tbody></table><h2 id="二进制数据类型"><a href="#二进制数据类型" class="headerlink" title="二进制数据类型"></a>二进制数据类型</h2><table><thead><tr><th>二进制数据类型（单位：长度）</th><th>长度状态</th></tr></thead><tbody><tr><td>BINARY（（int）Max）</td><td>固定</td></tr><tr><td>VARBINARY（（int）Max）</td><td>动态</td></tr></tbody></table><p><em>BINARY类型的长度是固定的，如果长度不足最大长度,后面用“0”对齐，直到指定长度。</em></p><h2 id="大文本数据类型"><a href="#大文本数据类型" class="headerlink" title="大文本数据类型"></a>大文本数据类型</h2><table><thead><tr><th>大文本数据类型</th><th>存储范围（单位：字节）</th></tr></thead><tbody><tr><td>TINYTEXT</td><td>0~255字节</td></tr><tr><td>TEXT</td><td>0~65535字节</td></tr><tr><td>MEDIUMTEXT</td><td>0~16777215字节</td></tr><tr><td>LONGTEXT</td><td>0~4294967295字节</td></tr></tbody></table><h2 id="大数据二进制类型"><a href="#大数据二进制类型" class="headerlink" title="大数据二进制类型"></a>大数据二进制类型</h2><table><thead><tr><th>特殊二进制类型</th><th>存储范围（单位：字节）</th></tr></thead><tbody><tr><td>TINYBLOB</td><td>0~255字节</td></tr><tr><td>BLOB</td><td>0-65535字节</td></tr><tr><td>MEDIUMBLOB</td><td>0~16777215字节</td></tr><tr><td>LONGBLOB</td><td>0-4294967295字节</td></tr></tbody></table><h2 id="枚举型"><a href="#枚举型" class="headerlink" title="枚举型"></a>枚举型</h2><p>ENUM枚举型，单选项</p><pre class="line-numbers language-mysql"><code class="language-mysql">ENUM('值1','值2'···'值n')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="多选项"><a href="#多选项" class="headerlink" title="多选项"></a>多选项</h2><pre class="line-numbers language-mysql"><code class="language-mysql">SET('值1','值2'···'值n')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h1><h2 id="表创建"><a href="#表创建" class="headerlink" title="表创建"></a>表创建</h2><pre class="line-numbers language-mysql"><code class="language-mysql">CREATE TABLE 表名(   字段名1 数据类型 [完整性约束条件] [COMMENT '内容'],   字段名2 数据类型 [完整性约束条件] [COMMENT '内容'],   ·······   字段名n 数据类型 [完整性约束条件] [COMMENT '内容'],   [完整性约束条件](字段1,字段2,·····,字段n))[编码集设置];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql"><code class="language-mysql">CREATE TABLE 表名(    ···);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>编码集设置:<br>CHARACTER SET 字符集名 [校对规则]<br>校对规则:<br>COLLATE 校对名</p></blockquote><p><font color = red> <strong>建议不要在数据库中设置太多字符集名和校对规则</strong></font> </p><h2 id="表查看"><a href="#表查看" class="headerlink" title="表查看"></a>表查看</h2><p>查看表结构：</p><pre class="line-numbers language-mysql"><code class="language-mysql">DESC 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看所有表:</p><pre class="line-numbers language-mysql"><code class="language-mysql">SHOW TABLES;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看表的详细结构：</p><pre class="line-numbers language-mysql"><code class="language-mysql">SHOW CREATE TABLE 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="表修改"><a href="#表修改" class="headerlink" title="表修改"></a>表修改</h2><h3 id="字段增加"><a href="#字段增加" class="headerlink" title="字段增加"></a>字段增加</h3><pre class="line-numbers language-mysql"><code class="language-mysql">ALTER TABLE 表名 ADD 字段名 数据类型;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="字段-修改-与-顺序"><a href="#字段-修改-与-顺序" class="headerlink" title="字段 修改 与 顺序"></a>字段 修改 与 顺序</h3><pre class="line-numbers language-mysql"><code class="language-mysql">ALTER TABLE 表名 MODIFY 字段名 数据类型 [更改字段循序 | 完整性约束条件] [COMMENT '内容'];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql"><code class="language-mysql">ALTER TABLE 表名 MODIFY ···;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>更改字段循序:<br>FIRST | （AFTER 字段名2）</p></blockquote><p><strong>FIRST</strong>：将字段1更改为表的第一个字段<br><strong>AFTER</strong>：将字段1插入字段2的后面</p><h3 id="字段名修改"><a href="#字段名修改" class="headerlink" title="字段名修改"></a>字段名修改</h3><pre class="line-numbers language-mysql"><code class="language-mysql">ALTER TABLE 表名 CHANGE 字段名 新字段名 字段类型;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="表名修改"><a href="#表名修改" class="headerlink" title="表名修改"></a>表名修改</h3><pre class="line-numbers language-mysql"><code class="language-mysql">RENAME TABLE 表名 to 新表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="表字符集修改"><a href="#表字符集修改" class="headerlink" title="表字符集修改"></a>表字符集修改</h3><pre class="line-numbers language-mysql"><code class="language-mysql">ALTER TABLE 表名 CHARACTER SET 字符集类型;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="字段删除"><a href="#字段删除" class="headerlink" title="字段删除"></a>字段删除</h3><pre class="line-numbers language-mysql"><code class="language-mysql">ALTER TABLE 表名 DROP 字段名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="表删除"><a href="#表删除" class="headerlink" title="表删除"></a>表删除</h2><pre class="line-numbers language-mysql"><code class="language-mysql">DROP TABLE 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="表约束"><a href="#表约束" class="headerlink" title="表约束"></a>表约束</h2><p>为了防止数据表中插入错误的数据。</p><table><thead><tr><th>约束条件</th><th>说明</th></tr></thead><tbody><tr><td>PRIMARY KEY</td><td>主键约束，用于唯一标识对应的记录</td></tr><tr><td>FOREIGN KEY</td><td>外键约束</td></tr><tr><td>NOT NULL</td><td>非空约束</td></tr><tr><td>UNIQUE</td><td>唯一性约束</td></tr><tr><td>DEFAULT</td><td>默认值约束，用于设置字段的默认值</td></tr><tr><td>CHECK</td><td>约束取值范围</td></tr><tr><td>UNSIGNED</td><td>无符号约束</td></tr></tbody></table><p><strong>无符号约束：</strong></p><pre class="line-numbers language-mysql"><code class="language-mysql">字段名 数据类型 UNSIGNED<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>约束范围：</strong></p><pre class="line-numbers language-mysql"><code class="language-mysql">字段名 数据类型 CHECK (字段值>0 and 字段值<=100)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>单字段主键：</strong></p><p>是由一个字段构成的主键，语法格式:</p><pre class="line-numbers language-mysql"><code class="language-mysql">字段名 数据类型 PRIMARY KEY<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>多字段主键：</strong><br>是多个字段组合而成的主键，语法格式:</p><pre class="line-numbers language-mysql"><code class="language-mysql">PRIMARY KEY {字段名1，字段名2，···字段名n}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em>每个数据表中最多只能有一个主键约束，定义为PRIMARY KEY的字段不能有重复值也不能为NULL值。</em><br><strong>非空约束：</strong><br>是字段的值不能为NULL（空），语法格式:</p><pre class="line-numbers language-mysql"><code class="language-mysql">字段名 数据类型 NOT NULL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>唯一约束：</strong><br>用于保证数据表中字段的<strong>唯一性</strong>,使表中字段的值不能重复出现。语法格式:</p><pre class="line-numbers language-mysql"><code class="language-mysql">字段名 数据类型 UNIQUE<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <strong>默认约束：</strong><br>用于给数据表中的字段指定默认值，当在表中插入新记录时，如果字段没有赋值，系统会自动为字段插入默认值。语法格式:</p><pre class="line-numbers language-mysql"><code class="language-mysql">字段名 数据类型 DEFAULT 默认值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="字段自动增加"><a href="#字段自动增加" class="headerlink" title="字段自动增加"></a>字段自动增加</h2><p>在数据表中，若想为表中插入的新记录自动生成<strong>唯一的 ID</strong>,可以使用自增约束来实现。AUTO_ INCREMENT约束的字段可以是任何整数类型。默认情况下，该字段的值是从1开始自增的。使用AUTO_ INCREMENT设置表字段值自动增加的基本语法格式:      <em>该字段是唯一性类型</em></p><pre class="line-numbers language-mysql"><code class="language-mysql">字段名 数据类型 AUTO_INCREMENT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><h2 id="普通索引-INDEX"><a href="#普通索引-INDEX" class="headerlink" title="普通索引 (INDEX)"></a>普通索引 (INDEX)</h2><p><font color = #05ffdc>INDEX </font> 。可以创建在任何数据类型中，值是否唯一和非空没有固定的要求。</p><pre class="line-numbers language-mysql"><code class="language-mysql">INDEX(字段名)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql"><code class="language-mysql">CREATE INDEX 索引名 ON 表名 (字段名);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql"><code class="language-mysql">ALTER TABLE 表名 ADD INDEX 索引名 (字段名);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="唯一索引-UNIQUE"><a href="#唯一索引-UNIQUE" class="headerlink" title="唯一索引 (UNIQUE )"></a>唯一索引 (UNIQUE )</h2><p><font color = #05ffdc>UNIQUE </font> 。该索引所在字段的值必须是唯一的。</p><pre class="line-numbers language-mysql"><code class="language-mysql">UNIQUE INDEX 索引名 (字段名 (ASC | DESC))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql"><code class="language-mysql">CREATE UNIQUE INDEX 索引名 ON 表名 (字段名);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql"><code class="language-mysql">ALTER TABLE 表名 ADD UNIQUE INDEX 索引名 (字段名);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="全文索引-FULLTEXT"><a href="#全文索引-FULLTEXT" class="headerlink" title="全文索引 (FULLTEXT)"></a>全文索引 (FULLTEXT)</h2><p><font color = #05ffdc>FULLTEXT </font> 。它只能创建在CHAR、VARCHAR或TEXT类型的字段上，现在只有<strong>MyISAM存储引擎</strong>支持全文索引。</p><pre class="line-numbers language-mysql"><code class="language-mysql">FULLTEXT INDEX 索引名 (字段名)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql"><code class="language-mysql">CREATE FULLTEXT INDEX 索引名 ON 表名 (字段名);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql"><code class="language-mysql">ALTER TABLE 表名 ADD FULLTEXT INDEX 索引名 (字段名);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><em>PS:后面需存储引擎(ENGINE =MyISAM)</em></strong></p><h2 id="单列索引"><a href="#单列索引" class="headerlink" title="单列索引"></a>单列索引</h2><p>在表中单个字段上创建索引，它可以是普通索引、唯一索引或者全文素引， 只要保证该索引只对应表中一个字段即可。</p><pre class="line-numbers language-mysql"><code class="language-mysql">INDEX 索引名 (字段名)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql"><code class="language-mysql">CREATE INDEX 索引名 ON 表名 (字段名);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql"><code class="language-mysql">ALTER TABLE 表名 ADD INDEX 索引名 (字段名);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="多列索引"><a href="#多列索引" class="headerlink" title="多列索引"></a>多列索引</h2><p>多列索引指的是在表中多个字段上创建索引，只有在查询条件中使用了这些字段中的第一个字段时,该索引才会被使用。</p><pre class="line-numbers language-mysql"><code class="language-mysql">INDEX 索引名 (字段名1,字段名2,···字段名n)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql"><code class="language-mysql">CREATE INDEX 索引名 ON 表名 (字段名1,字段名2,···字段名n);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql"><code class="language-mysql">ALTER TABLE 表名 ADD INDEX 索引名  (字段名1,字段名2,···字段名n);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="空间索引-SPATIAL"><a href="#空间索引-SPATIAL" class="headerlink" title="空间索引 (SPATIAL)"></a>空间索引 (SPATIAL)</h2><p><font color = #05ffdc>SPATIAL </font> 。它只能创建在空间数据类型的字段上。MySQL中的空间数据类型有4种,分别是<strong>LGEOMETRY、POINT、 LINESTRING和POLYGON</strong>，空间索引只能在存储引擎为<strong>MyISAM</strong>的表中创建。</p><pre class="line-numbers language-mysql"><code class="language-mysql">SPATIAL INDEX 索引名 (字段名)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql"><code class="language-mysql">CREATE SPATIAL INDEX 索引名 ON 表名 (字段名);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql"><code class="language-mysql">ALTER TABLE 表名 ADD SPATIAL INDEX 索引名 (字段名);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>*PS:后面需存储引擎（ENGINE =MyISAM）</strong></p><h2 id="索引创建"><a href="#索引创建" class="headerlink" title="索引创建"></a>索引创建</h2><p><strong>建表时创建索引：</strong></p><pre class="line-numbers language-mysql"><code class="language-mysql">CREATE TABLE 表名(    字段名1 数据类型 [完整性约束条件]，    字段名2 数据类型 [完整性约束条件]，     ·····    字段名n 数据类型[UNIQUE | FULLTEXT | SPATIAL] INDEX | KEY    [索引名] (字段名1 [(长度)]) [ASC | DESC]))[存储引擎];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>已经创建表后创建索引：</strong><br>使用<strong>CREATE INDEX</strong>语句，语法格式:</p><pre class="line-numbers language-mysql"><code class="language-mysql">CREATE [UNIQUE | FULLTEXT | SPATIAL] INDEX 索引名 ON 表名 (字段名[(长度)] [ASC | DESC])[存储引擎];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用<strong>ALTER TABLE</strong>语句，语法格式:</p><pre class="line-numbers language-mysql"><code class="language-mysql">ALTER TABLE 表名 ADD [UNIQUE | FULLTEXT | SPATIAL] INDEX 索引名 (字段名[(长度)] [ASC | DESC])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>UNIQUE</strong>： 可选参数，表示唯一性约束<br><strong>FULLTEXT</strong>：可选参数，表示全文约束<br><strong>SPATIAL</strong>： 可选参数，表示空间约束<br><strong>INDEX</strong> 和 <strong>KEY</strong>：用来表示字段的索引，二者选一即可<br><strong>索引名</strong>：可选参数，表示创建的索引的名称<br><strong>字段名1</strong>：指定索引对应字段的名称<br><strong>长度</strong>：可选参数，用于表示索引的长度<br><strong>ASC</strong> 和 <strong>DESC</strong>：可选参数，其中，ASC表示升序排列，DESC表示降序排列</p><h2 id="索引删除"><a href="#索引删除" class="headerlink" title="索引删除"></a>索引删除</h2><p>使用<strong>ALTER TABLE</strong>语句删除索引，语法格式:</p><pre class="line-numbers language-mysql"><code class="language-mysql">ALTER TABLE 表名 DROP INDEX 索引名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用<strong>DROP INDEX</strong>删除索引，语法格式:</p><pre class="line-numbers language-mysql"><code class="language-mysql">DROP INDEX 索引名 ON 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="数据添加"><a href="#数据添加" class="headerlink" title="数据添加"></a>数据添加</h1><h2 id="数据新增-INSERT"><a href="#数据新增-INSERT" class="headerlink" title="数据新增 (INSERT)"></a>数据新增 (INSERT)</h2><p>使用INSERT语句向表插入数据</p><pre class="line-numbers language-mysql"><code class="language-mysql">INSERT INTO 表名 [(字段名1 [，字段名2. . .])] VALUES(值1 [,值2. . .]);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em>插入的数据应与字段的数据类型相同。</em><br><em>数据的大小应在字段的数据类型规定范围内。</em><br><strong><em>在VALUES中列出的数据位置必须与被加入的字段的排列位置相对应。</em></strong><br><em>字符和日期型数据应包含在<strong>单引号</strong>中。</em><br><em>插入空值:不指定或 INSERT INTO 表名 VALUES(NULL)；</em><br><em>如果要插入所有字段可以省写字段，直接按表中字段顺序写值。</em></p><h2 id="数据更新-UPDATE"><a href="#数据更新-UPDATE" class="headerlink" title="数据更新 (UPDATE)"></a>数据更新 (UPDATE)</h2><p>使用UPDATE语句修改表中的数据</p><pre class="line-numbers language-mysql"><code class="language-mysql">UPDATE 表名 SET 字段名1 = 值1 [,字段名2 = 值2..] [WHERE 条件表达式];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>条件表达式:<br>指定字段行的数据更改，如 id = 112 、name = ‘刘邦’<br><strong>UPDATE</strong>：可以用新值更新原有表行中的各列<br><strong>SET</strong>：指示要修改哪些列和要给予哪些值。<br><strong>WHERE</strong>：指定更新哪些行。没有WHERE子句，<strong><em>则更新所有的行</em></strong>。</p><h2 id="数据删除-DELETE"><a href="#数据删除-DELETE" class="headerlink" title="数据删除 (DELETE)"></a>数据删除 (DELETE)</h2><p>使用DELETE语句删除表中数据</p><pre class="line-numbers language-mysql"><code class="language-mysql">DELETE FROM 表名 [WHERE 条件表达式];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><em>如果不使用where子句，将删除表中所有数据。</em></strong><br>DELETE语句不能删除某一列的值 ( 可使用update)<br>使用DELETE语句仅删除记录，不删除表本身<br>从一个表中删除记录将引起其它表的参照完整性<br><strong><em>外键约束</em></strong><br>删除表中数据也可使用TRUNCATE语句，它和delete有所<br>不同，格式化数据！！！</p><pre class="line-numbers language-mysql"><code class="language-mysql">TRUNCATE 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><p><strong>SELECT的语法结构：</strong></p><pre class="line-numbers language-MYSQL"><code class="language-MYSQL">SELECT [DISTINCT] (* | {字段名1 [别名][,字段名2[别名]····,字段名n[别名]]} ) FROM 表名 [可选参数];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT * FROM 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>可选参数:<br>    [WHERE 条件表达式];<br>高级查询的语句:<br>    [GROUP BY 字段名 [HAVING 条件表达式2]] ;<br>    [ORDER BY 字段名 [ASC | DESC]] ;<br>    [LIMIT [OFFSET] (int)记录数];</p></blockquote><p><strong>SELECT</strong>：指定查询那个字段数据<br><strong>*：</strong>查询所有字段(列)的意思<br><strong>{字段1,字段2,字段3..}:</strong> 指定查询字段<br>    字段里可进行运算，前提类型符合 ，但底层数据不会被修改！！！<br><strong>别名</strong>：代替字段名<br> <strong>FROM</strong>：指定查询的表<br>可选参数：<br><strong>DISTINCT：</strong>过滤表字段中重复的值（数据），如果指定是多个字段，而且指定的字段值相同，则过滤重复的值！！！<br><strong>WHERE：</strong>指定查询条件<br><strong>GROUP BY：</strong>将查询结果按指定字段进行分组<br>    <strong>HAVING：</strong>对分组后的结果进行过滤<br><strong>ORDER BY：</strong>将查询结果按指定字段进行排序，排列方式有参数ASC（升序）、DESC（降序）控制，默认为ASC（升序）<br><strong>LIMIT：</strong>限制查询结果的数量，后面有可有两个参数，<br>    <strong>OFFSET：</strong>表示偏移量，如果偏移量为0则从第一条开始,。不指定参数1，其默认值为0。<br>    <strong>记录数：</strong>表示返回查询记录的条数</p><table><thead><tr><th>运算符</th><th>展示</th><th>说明</th></tr></thead><tbody><tr><td>比较运算符</td><td>&gt;,&lt;,&lt;=,&gt;=,=,&lt;&gt;</td><td>···</td></tr><tr><td></td><td>字段 BETWEEN(int)值AND(int)值</td><td>显示某个区域的值</td></tr><tr><td></td><td>字段 IN（值1,值2,···）</td><td>显示在字段里的值</td></tr><tr><td></td><td>字段 LIKE ’张%’</td><td>模糊查询%_</td></tr><tr><td></td><td>字段 IS NULL</td><td>判断是否为空</td></tr><tr><td>逻辑运算符</td><td>AND</td><td>多个条件同时成立</td></tr><tr><td></td><td>OR</td><td>多个条件任一个成立</td></tr><tr><td></td><td>NOT</td><td>不成立， 例如：where not(salary&gt;100);</td></tr></tbody></table><h2 id="普通查询"><a href="#普通查询" class="headerlink" title="普通查询"></a>普通查询</h2><h3 id="条件查询-WHERE"><a href="#条件查询-WHERE" class="headerlink" title="条件查询 (WHERE)"></a>条件查询 (WHERE)</h3><p><font color = #05ffdc>SELECT </font> 的语法里的可选参数，满足条件的查询，基本语法：</p><pre class="line-numbers language-mysql"><code class="language-mysql">可选参数:··· WHERE (条件表达式);如:··· WHERE Engilsh > 80;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="指定查询-IN"><a href="#指定查询-IN" class="headerlink" title="指定查询 (IN)"></a>指定查询 (IN)</h3><p>用于查指定的数值，语法格式：</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT * | {字段1,字段2...字段n} FROM 表名 WHERE 字段名 [NOT] IN (值1，值2，···);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="范围查询-BETWEEN-AND"><a href="#范围查询-BETWEEN-AND" class="headerlink" title="范围查询 (BETWEEN  AND)"></a>范围查询 (BETWEEN  AND)</h3><p>用于查询指定范围值，语法格式：</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT * | {字段1,字段2...字段n}FROM 表名 WHERE 字段名 [NOT] BETWEEN (int)值1 AND (int)值2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><em>查询字段名的值1和值2的范围，前提*</em>2值必须大于1值***</p><h3 id="空值查询-NULL"><a href="#空值查询-NULL" class="headerlink" title="空值查询 (NULL)"></a>空值查询 (NULL)</h3><p>空值查询一判断某些列是否有NULL值。语法格式：</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT * | {字段1,字段2...字段n}FROM 表名 WHERE 字段名 IS [NOT] NULL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="过滤查询-DISTINCT"><a href="#过滤查询-DISTINCT" class="headerlink" title="过滤查询 (DISTINCT )"></a>过滤查询 (DISTINCT )</h3><p>去除重复的字段值。语法格式：</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT DISTINCT * | {字段1,字段2...字段n} FROM 表名 [···];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="模糊查询-LIKE"><a href="#模糊查询-LIKE" class="headerlink" title="模糊查询 (LIKE)"></a>模糊查询 (LIKE)</h3><p>寻找匹配的字符串。语法格式：</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT * | {字段1,字段2...字段n} FROM 表名 WHERE 字段名 [NOT] LIKE '匹配字符串%_';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>注意：</strong><font color = red>Like语句中，‘ % ’代表零个或多个任意字符，‘ _ ’代表一个字符，通配符前缀需右斜线‘ \ ’进行转义，“%”为‘ % ’。</font></p><pre class="line-numbers language-mysql"><code class="language-mysql">例子：字段名 LIKE'_a%\%';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="多条件查询-AND"><a href="#多条件查询-AND" class="headerlink" title="多条件查询  (AND)"></a>多条件查询  (AND)</h3><p>（交集）连接两个或者多个查询条件。语法格式：</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT * | {字段1,字段2...字段n} FROM 表名 WHERE 条件表达式1 [AND 条件表达式2 [··· AND 条件表达式n]];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="多条件查询-OR"><a href="#多条件查询-OR" class="headerlink" title="多条件查询 (OR)"></a>多条件查询 (OR)</h3><p>（并集）记录满足任意一个条件即被查出。语法格式：</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT * | {字段1,字段2...字段n}FROM 表名 WHERE 条件表达式1 [OR 条件表达式2 [··· OR 条件表达式n]];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>OR和AND一起用的情况：</strong><br><font color = #b3d4fc>AND的优先级高于OR，因此当两者在一起使用时，应该先运算AND两边的条件表达式，再运算OR两边的条件表达式。</font></p><h2 id="高级查询"><a href="#高级查询" class="headerlink" title="高级查询"></a>高级查询</h2><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><h4 id="记数函数-COUNT（）"><a href="#记数函数-COUNT（）" class="headerlink" title="记数函数 (COUNT（）)"></a>记数函数 (COUNT（）)</h4><p>用来统计记录的条数，语法格式:</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT COUNT((*) | (字段名)) FROM 表名 [WHERE 条件表达式];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="求和函数-SUM-）"><a href="#求和函数-SUM-）" class="headerlink" title="求和函数 (SUM()）"></a>求和函数 (SUM()）</h4><p>用于求出表中某个字段所有值的总和，语法格式:</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT SUM(字段名1)[,SUM(字段名2)...,SUM(字段名n)] FROM 表名[WHERE 条件表达式];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><font color = #b3d4fc>SUM里面的字段可进行运算，前提类型符合 ，但底层数据不会被修改！！！</font></p><h4 id="平均值函数-AVG（）"><a href="#平均值函数-AVG（）" class="headerlink" title="平均值函数 (AVG（）)"></a>平均值函数 (AVG（）)</h4><p>用于求出某个字段所有值的平均值，语法格式:</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT AVG(字段名1)[,AVG(字段名2)...,AVG(字段名n)] FROM 表名 [WHERE 条件表达式];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><font color = #b3d4fc>AVG里面的字段可进行运算，前提类型符合 ，但底层数据不会被修改！！！</font></p><h4 id="最大值函数-MAX（）"><a href="#最大值函数-MAX（）" class="headerlink" title="最大值函数 (MAX（）)"></a>最大值函数 (MAX（）)</h4><p>用于求出某个字段的最大值，语法格式:</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT MAX(字段名1)[,MAX(字段名2)...,MAX(字段名n)] FROM 表名 [WHERE 条件表达式];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><font color = #b3d4fc>MAX里面的字段可进行运算，前提类型符合 ，但底层数据不会被修改！！！</font></p><h4 id="最小值函数-MIN（）"><a href="#最小值函数-MIN（）" class="headerlink" title="最小值函数 (MIN（）)"></a>最小值函数 (MIN（）)</h4><p>用于求出某个字段的最小值，语法格式:</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT MIN(字段名1)[,MIN(字段名2)...,MIN(字段名n)] FROM 表名 [WHERE 条件表达式];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><font color = #b3d4fc>MAX里面的字段可进行运算，前提类型符合 ，但底层数据不会被修改！！！</font><br><font color = red> 函数后面的字段和所有要有小号包括，否则无法识别要记录的数</font></p><h3 id="顺序查询-ORDER-BY"><a href="#顺序查询-ORDER-BY" class="headerlink" title="顺序查询 (ORDER BY)"></a>顺序查询 (ORDER BY)</h3><p>对查询结果进行排序，语法格式:</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT * | {字段1,字段2...字段n} FROM 表名 ORDER BY 字段名1 [ASC | DESC][,字段名2 [ASC| DESC]...,字段名n [ASC | DESC]];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>ORDER BY：指定字段进行排序<br>SELECT：指定查询的字段<br>ASC升序（默认）、DESC降序<br><font color = red>ORDER BY子句应位于SELECT语句的结尾。</font><br><font color = #b3d4fc>指定字段升序排列时，如果某条字段值为NULL,则这条记录会在第一条显示，这是因为NULL值可以被认为是最小值</font></p><h3 id="分组查询-GROUP-BY"><a href="#分组查询-GROUP-BY" class="headerlink" title="分组查询 (GROUP BY)"></a>分组查询 (GROUP BY)</h3><p>对字段值进行<strong>分组查询</strong>，语法格式:</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT 字段名1 | 聚合函数[,字段2 | 聚合函数...,字段n|聚合函数]FROM 表名GROUP BY 字段名1,字段2,···[HAVING 条件表达式];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>SELECT 后面的字段是要查询的字段。<br>GROUP BY 后面的字段为要分组的字段<br>使用方式：</p><ol><li><p><strong>单独使用GROUP BY</strong></p><p>查询的是每个分组中的一条记录。</p></li><li><p><strong>GROUP BY和聚合函数一起使用</strong><br>可以统计出某个或者某些字段在一个分组中的最大值、最小值、平均值等。</p></li><li><p><strong>GROUP BY和HAVING一起使用</strong><br>HAVING和WHERE都用于设置条件对查询结果进行过滤。</p></li></ol><p><font color=red><strong><em>WHERE语句可以进行过滤,他是分组之前进行过滤, WHERE语句中是不允许使用聚合函数的，如果想在分组之后进行过滤必须使用HAVING语句来进行, HAVING语句中是可以使用聚合函数的</em></strong></font></p><h3 id="限制查询-LIMIT"><a href="#限制查询-LIMIT" class="headerlink" title="限制查询 (LIMIT)"></a>限制查询 (LIMIT)</h3><p>限制查询结果的数量，语法格式:</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT 字段名1[,字段名2,...字段n] FROM 表名LIMIT [(int)OFFSET，](int)记录数;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>OFFSET</strong>：偏移量(从哪里开始的意思)，如果偏移量为0则从查询结果的第一条记录开始一以此类推，如果不指定默认值为0 “记录数”表示返回查询记录的条数。</p><h3 id="为表和字段取别名"><a href="#为表和字段取别名" class="headerlink" title="为表和字段取别名"></a>为表和字段取别名</h3><p>在查询数据时，可以为表和字段取别名，这个别名可以代替其指定的表和字段。</p><h4 id="表别名"><a href="#表别名" class="headerlink" title="表别名"></a>表别名</h4><p>可以为表取一个别名,用这个别名来代替表的名称。别名格式: </p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT (* | 字段) FROM 表名 别名 [...];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>AS:用于指定表名的别名,它可以省略不写。</p><h4 id="字段取别名"><a href="#字段取别名" class="headerlink" title="字段取别名"></a>字段取别名</h4><p>为字段取一个别名,用这个别名来代替表的名称。别名格式: </p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT (* | 字段名1 [别名][,字段名2[别名]····,字段名n[别名]]) FROM 表名 [...];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h2><table><thead><tr><th>函数名称</th><th>作用</th></tr></thead><tbody><tr><td>ABS（x）</td><td>返回x的绝对值</td></tr><tr><td>SQRT（x）</td><td>返回x的非负2次方根</td></tr><tr><td>MOD（x , y）</td><td>返回x被y除后的余数</td></tr><tr><td>CEILING（x）</td><td>返回不小于x的最小整数</td></tr><tr><td>FLOOR（x）</td><td>返回不大于x的最大整数</td></tr><tr><td>ROUND（x , y）</td><td>对x进行四舍五入操作，小数点后保留y位</td></tr><tr><td>TRUNCATE（x）</td><td>舍去x中小数点y位后面的的数</td></tr><tr><td>SIGN（x）</td><td>返回x的符号，-1、0或者1</td></tr></tbody></table><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><table><thead><tr><th>函数名称</th><th>作用</th></tr></thead><tbody><tr><td>LENGTH（str）</td><td>返回字符串str的长度</td></tr><tr><td>CONCAT（s1 , s2 , …..）</td><td>返回一个或者多个字符串连接产生的新的字符串</td></tr><tr><td>TRIM（str）</td><td>删除字符串两侧的空格</td></tr><tr><td>REPLACE（str , s1 , s2）</td><td>使用字符串s2替换字符串str中所有的字符串s1</td></tr><tr><td>SUBSTRING（tr , n , len）</td><td>返回字符串st的子串，起始位置为n,长度为len</td></tr><tr><td>REVERSE（str）</td><td>返回字符串反转后的结果</td></tr><tr><td>LOCATE（s1 , str）</td><td>返回子串s1在字符串str中的起始位置</td></tr></tbody></table><h2 id="日期与时间的函数"><a href="#日期与时间的函数" class="headerlink" title="日期与时间的函数"></a>日期与时间的函数</h2><table><thead><tr><th>函数名称</th><th>作用</th></tr></thead><tbody><tr><td>CURDATE（）</td><td>获取系统当前日期</td></tr><tr><td>CURTIME（）</td><td>获取系统当前时间</td></tr><tr><td>SYSDATE（）</td><td>获取当前系统日期和时间</td></tr><tr><td>TIME_ _TO_SEC（）</td><td>返回将时间转换成秒的结果</td></tr><tr><td>ADDDATE（）</td><td>执行日期的加运算</td></tr><tr><td>SBUDATE（）</td><td>执行日期的减运算</td></tr><tr><td>DATE_ FORMAT（）</td><td>格式化输出日期和时间值</td></tr></tbody></table><h2 id="条件判断函数"><a href="#条件判断函数" class="headerlink" title="条件判断函数"></a>条件判断函数</h2><table><thead><tr><th>函数名称</th><th>作用</th></tr></thead><tbody><tr><td>IF（expr , v1 , v2）</td><td>如果expr表达式为true返回v1,否则返回v2</td></tr><tr><td>IFNULL（v1 , v2）</td><td>如果v1不为NULL返回v1,否则返回v2</td></tr><tr><td>CASE expr WHEN v1 THEN r1 [WHEN v2 THEN r2……] [ELSE m] END</td><td>如果expr值等于v1、v2等,则返回对应位置THEN后面的结果，否则返回ELSE后的结果m</td></tr></tbody></table><h2 id="加密函数"><a href="#加密函数" class="headerlink" title="加密函数"></a>加密函数</h2><table><thead><tr><th>函数名称</th><th>作用</th></tr></thead><tbody><tr><td>MD5（str）</td><td>对字符串 str 进行MD5加密</td></tr><tr><td>ENCODE（str , pwd stu）</td><td>使用pwd作为密码加密字符串str</td></tr><tr><td>DECODE（str , pwd str）</td><td>使用pwd作为密码解密字符串str</td></tr></tbody></table><h1 id="多表操作"><a href="#多表操作" class="headerlink" title="多表操作"></a>多表操作</h1><h2 id="外键添加"><a href="#外键添加" class="headerlink" title="外键添加"></a>外键添加</h2><p>外键是指<strong>引用另一个表中的一个字段或多个字段</strong>。建立、加强两个表数据之间的链接</p><ol><li>主表是被外键引用的字段，应具有主键约束或唯一性约束</li><li>被引用是<strong>主表</strong>，引用外键的表是<strong>从表</strong>，两表是主从关系</li><li>引入外键后，从表 外键字段只能插入主表被引用字段的值必须存在，如果 从表 的外键字段引用 到主表被引用的字段，则主表被引用字段无法删除，保证数据的完整性</li></ol><p><strong>创建表时定义外键的语法结构：</strong></p><pre class="line-numbers language-mysql"><code class="language-mysql">CREATE TABLE 表名(   字段名1 数据类型 [完整性约束条件],   字段名2 数据类型 [完整性约束条件],   ·······   FOREIGN KEY (外键字段名) REFERENCES 外表表名(主键 / 唯一 字段名));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>创建表后定义外键的语法结构：</strong></p><pre class="line-numbers language-mysql"><code class="language-mysql">ALTER  TABLE 表名 ADD CONSTRAINT 外键名 FOREIGN KEY (外键字段名) REFERENCES 外表表名(主键 / 唯一 字段名);[ON DELETE { CASCADE | SET NULL | NO ACTION | RESTRICT }][NO UPDATE { CASCADE | SET NULL | NO ACTION | RESTRICT }]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>CASCADE</td><td>删除包含与删除键值的所有记录</td></tr><tr><td>SET NULL</td><td>修改包含与已删除键值有的所有记录，使用NULL值替换(不能用于已标记为NOT NULL的字段)</td></tr><tr><td>NO ACTION</td><td>不进行任何操作中</td></tr><tr><td>RESTRICT</td><td>拒绝主表删除或修改外键关联字段。(在不定义ON DELETE和ON UPDATE子句时，这是默认设置，也是最安全的设置)</td></tr></tbody></table><blockquote><p><strong>注意事项：</strong></p><ul><li>建立外键的表必须是InnoDB型不能是临时表。因为MySQL中只有InnoDB型的表才支持外键</li><li>定义外键名时，不能加引号。如: constraint ‘FK_ ID’ 或constraint” FK_ID “都是错误的</li></ul></blockquote><h2 id="外键删除"><a href="#外键删除" class="headerlink" title="外键删除"></a>外键删除</h2><p>根据逻辑的需求，需要解除两个表之间的关联关系时，就需要删除外键约束。语法格式：</p><pre class="line-numbers language-mysql"><code class="language-mysql">ALTER TABLE 表名 DROP FOREIGN KEY 外键名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="关联表数据添加"><a href="#关联表数据添加" class="headerlink" title="关联表数据添加"></a>关联表数据添加</h2><h3 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h3><p>在多对一的表关系中，应将外键建在多的一方。</p><h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><p>为了实现数据表多对多的关系，需要定义一张<strong>第三方中间表</strong>，该表保存两个关系表的外键。</p><h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><p>一对一的对应关系中，<strong>需要分清主从关系</strong>，通常在从表中建立外键。</p><p><font color=red>在从表添加数据时，外键字段的值与外表引用字段的值相同且存在的前提下添加数据，否则受约束！</font> </p><h2 id="关联表数据删除"><a href="#关联表数据删除" class="headerlink" title="关联表数据删除"></a>关联表数据删除</h2><p><strong><font color=red>删除也如此，先删除从表有关联的数据，在删除主表数据</font></strong> </p><h2 id="交叉连接"><a href="#交叉连接" class="headerlink" title="交叉连接"></a>交叉连接</h2><p>交叉连接又称 笛卡尔积 ，返回结果的是<strong>被连接的两个表中所有数据行的乘积</strong>。语法格式：</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT * FROM 表1 CROSS JOIN 表2 [WHERE 条件表达式];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>or：（简写）</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT * FROM 表1,表2 [WHERE 条件表达式];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="内连接-INNER-JOIN"><a href="#内连接-INNER-JOIN" class="headerlink" title="内连接 (INNER JOIN)"></a>内连接 (INNER JOIN)</h2><p>内连接(INNER JOIN)又称 简单连接 或 自然连接 ，内连接使用 比较运算符 对两个表中的数据进行比较，列出与连接条件匹配的数据行，组合成新的记录。语法格式：(INNER有无误差)</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT {* | 查询字段} FROM 表1 [INNER] JOIN 表2 ON 表1.关系字段 = 表2.关系字段 [WHERE 条件表达式];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>or：（简写）</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT {* | 查询字段} FROM 表1,表2 WHERE 表1.关系字段 = 表2.关系字段;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="外连接-OUTER-JOIN"><a href="#外连接-OUTER-JOIN" class="headerlink" title="外连接 (OUTER JOIN)"></a>外连接 (OUTER JOIN)</h2><p>(OUTER有无误差)</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT {* | 查询字段} FROM 表1 { LEFT | RIGHT } [OUTER] JOIN 表2 ON 表1.关系字段 = 表2.关系字段 [WHERE 条件表达式];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="左连接-LEFT-JOIN"><a href="#左连接-LEFT-JOIN" class="headerlink" title="左连接 (LEFT JOIN)"></a>左连接 (LEFT JOIN)</h3><p>指定左表的所有记录,和所有满足连接条件的记录。如果左表的某条记录在右表中不存在,则在右表中显示为空值。</p><h3 id="右连接-RIGHT-JOIN"><a href="#右连接-RIGHT-JOIN" class="headerlink" title="右连接 (RIGHT JOIN)"></a>右连接 (RIGHT JOIN)</h3><p>右连接与左连接正好相反，返回右表中所有指定的记录和所有满足连接条件的记录。如果右表的某条记录在左表中没有匹配，则左表将返回空值。</p><h2 id="复合条件连接-UNION"><a href="#复合条件连接-UNION" class="headerlink" title="复合条件连接 (UNION)"></a>复合条件连接 (UNION)</h2><p>复合条件连接又称<strong>全外连接</strong>，就是在连接查询的过程中，通过添加过滤条件来限制查询结果，使查询结果更加精确。</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT {* | 查询字段} FROM 表1 LEFT JOIN 表2 ON 表1.关系字段 = 表2.关系字段 unionSELECT {* | 查询字段} FROM 表1 RIGHT JOIN 表2 ON 表1.关系字段 = 表2.关系字段;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>练习代码：</strong></p><pre class="line-numbers language-mysql"><code class="language-mysql">CREATE TABLE `bumen` (  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '部门编号',  `name` varchar(30) DEFAULT NULL COMMENT '部门名',  PRIMARY KEY (`id`));CREATE TABLE `ygong_copy1` (  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '编号',  `mane` varchar(20) DEFAULT NULL COMMENT '姓名',  `bm` int(11) DEFAULT NULL COMMENT '部门编号',  PRIMARY KEY (`id`),  KEY `bm` (`bm`),  CONSTRAINT `ygong_copy1_ibfk_1` FOREIGN KEY (`bm`) REFERENCES `bumen` (`id`));INSERT INTO `bumen` VALUES (1, '编辑部');INSERT INTO `bumen` VALUES (2, '外联部');INSERT INTO `bumen` VALUES (3, '传媒部');INSERT INTO `bumen` VALUES (4, '艺术部');INSERT INTO `ygong_copy1` VALUES (1, '李大钊', 2);INSERT INTO `ygong_copy1` VALUES (2, '安迪生', 4);INSERT INTO `ygong_copy1` VALUES (3, '火车王', 1);INSERT INTO `ygong_copy1` VALUES (4, '小明', 3);INSERT INTO `ygong_copy1` VALUES (5, '牛顿', 4);//交叉连接SELECT * FROM ygong_copy1 CROSS JOIN bumen;SELECT * FROM ygong_copy1,bumen;//内连接 (INNER JOIN)SELECT * FROM ygong_copy1 JOIN bumen ON ygong_copy1.id = bumen.id;SELECT * FROM ygong_copy1 INNER JOIN bumen ON ygong_copy1.id = bumen.id;SELECT * FROM ygong_copy1 , bumen WHERE ygong_copy1.id = bumen.id;//外连接 (OUTER JOIN) 左连接 (LEFT JOIN)SELECT * FROM ygong_copy1 LEFT JOIN bumen ON ygong_copy1.id = bumen.id;SELECT * FROM ygong_copy1 LEFT OUTER JOIN bumen ON ygong_copy1.id = bumen.id;//调换表SELECT * FROM bumen LEFT JOIN ygong_copy1 ON ygong_copy1.id = bumen.id;SELECT * FROM bumen LEFT OUTER JOIN ygong_copy1 ON ygong_copy1.id = bumen.id;//外连接 (OUTER JOIN) 右连接 (RIGHT JOIN)SELECT * FROM ygong_copy1 RIGHT JOIN bumen ON ygong_copy1.id = bumen.id;SELECT * FROM ygong_copy1 RIGHT OUTER JOIN bumen ON ygong_copy1.id = bumen.id;//调换表SELECT * FROM bumen RIGHT JOIN ygong_copy1 ON ygong_copy1.id = bumen.id;SELECT * FROM bumen RIGHT OUTER JOIN ygong_copy1 ON ygong_copy1.id = bumen.id;//复合条件连接 (UNION)SELECT * FROM ygong_copy1 LEFT JOIN bumen ON ygong_copy1.id = bumen.idunionSELECT * FROM ygong_copy1 RIGHT JOIN bumen ON ygong_copy1.id = bumen.id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p><strong>子查询是指一个查询语句嵌套在另一个查询语句内部的查询</strong>。在执行查询语句时，首先会执行子查询中的语句，然后将返回的结果作为外层查询的过滤条件。<br><font color=red><strong>NOT：反向查询！！！</strong></font></p><h3 id="IN"><a href="#IN" class="headerlink" title="IN"></a>IN</h3><p>IN关键字进行子查询时，内层查询语句仅仅返回一个数据字段，这个数据字段中的值将供外层查询语句进行比较操作。</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT {* | 查询字段} FROM 表名1 WHERE 字段 [NOT] IN(SELECT 字段 FROM 表名2 WHERE 条件表达式);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>查询前提：in后面子查询返回结果要和in前的字段匹配</p></blockquote><h3 id="EXISTS"><a href="#EXISTS" class="headerlink" title="EXISTS"></a>EXISTS</h3><p>EXISTS关键字后面的参数可以是任意一个子查询， 这个子查询的作用相当于<strong>测试</strong>，它不产生任何数据，只返回 TRUE 或 FALSE ,返回值 TRUE 时外层查询才会执行。</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT {* | 查询字段} FROM 表名1 WHERE [NOT] EXISTS (SELECT 字段 FROM 表名2 WHERE 条件表达式);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="ANY"><a href="#ANY" class="headerlink" title="ANY"></a>ANY</h3><p>ANY关键字表示满足任意一个条件 ,它允许创建一个表达式对子查询的返回值列表进行比较，只要满足内层子查询中的任意一个比较条件,就返回一个结果作为外层查询条件。</p><pre class="line-numbers language-MYSQL"><code class="language-MYSQL">SELECT * FROM 表名 WHERE [NOT] 字段 {比较运算符} ANY(SELECT 字段 FROM 表名)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>查询前提：any后面子查询返回结果要和any前的字段匹配</p></blockquote><h3 id="ALL"><a href="#ALL" class="headerlink" title="ALL"></a>ALL</h3><p>ALL关键字与ANY有点类似，只不过带ALL关键字的子查询返回的结果需同时满足<strong>所有内层查询条件</strong>。</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT * FROM 表名 WHERE [NOT] 字段 {比较运算符} ALL(SELECT 字段 FROM 表名)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>查询前提：all后面子查询返回结果要和all前的字段匹配</p></blockquote><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>ANY 和 ALL 都用到比较运算符，但还可以使用其他运算符</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT * FROM 表名 WHERE [NOT] 字段 {比较运算符} (SELECT 字段 FROM 表名)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p> 查询前提：子查询返回结果要和字段匹配</p></blockquote><h1 id="事务与存储过程"><a href="#事务与存储过程" class="headerlink" title="事务与存储过程"></a>事务与存储过程</h1><p>事务指逻辑上的一组操作，组成这组操作的各个单元，要不全部成功，要不全部不成功，<strong>同一个事务的操作具备同步优点</strong>。</p><pre class="line-numbers language-mysql"><code class="language-mysql">START TRANSACTION;·······COMMIT; ROLLBACK;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>START TRANSACTION：开启事务<font color = #b3d4fc>（执行该语句后处于事务中，不会影响数据库数据）</font><br>COMMIT ： 事务提交<font color = #b3d4fc>（事务生效后会立即影响数据库数据）</font><br>ROLLBACK：回滚事务<font color = #b3d4fc>（取消事务，不会影响数据库数据）</font></p><h2 id="事务的特性（ACID）"><a href="#事务的特性（ACID）" class="headerlink" title="事务的特性（ACID）"></a>事务的特性（ACID）</h2><p><strong>原子性(Atomicity)</strong><br>指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</p><p><strong>一致性(Consistency)</strong><br>事务前后数据的完整性必须保持一致。<font color = #b3d4fc>(数据库的完整性:如果数据库在某个时间点下，所有的数据都符合所有的约束，则称数据库为符合完整性的状态)</font></p><p><strong>持久性(Durability)</strong><br>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是<br>永久性的，接下来即使数据库发生故障也不应该对其有任何影响。</p><hr><p><font color=red><strong>隔离性(Isolation)</strong></font><br>事务的隔离性是指多个用户并发访问数据库时，一个用户的事务不能被其它用户的事务所干扰，多个并发事务之间数据要相互隔离。</p><p><strong>隔离安全问题</strong></p><p><strong><font size=5px>脏读：</font></strong>一个事务读取到另一个事务未提交的数据</p><p><strong><font size=5px>不可重复读：</font></strong>一个事务多次读取同一条记录,读取的结果不相同过程数据有更改。<font color = #b3d4fc>(一个事务读取到另一个事务已经提交的数据)</font></p><p><font size=5px>虚读（幻读）：</font>一个事务多次查询整表的数据，由于其他事务新增或删除记录造成多次查询出的记录条数不同<font color = #b3d4fc>(一个事务读取到另一个事务已经提交的数据)</font></p><hr><h3 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h3><p>防止不同隔离性的问题</p><table><thead><tr><th>隔离类型</th><th>说明</th></tr></thead><tbody><tr><td>READ UNCOMMITTED</td><td>不做隔离，有脏读、不可重复读、虚读问题</td></tr><tr><td>READ COMMITTED</td><td>防脏读，不能防不可重复读、虚读问题</td></tr><tr><td>REPEATABLE READ (默认)</td><td>防脏读、不可重复读，不能防虚读问题</td></tr><tr><td>SERIALIZABLE</td><td>没问题，单线程，性能最低</td></tr></tbody></table><blockquote><p>从 <strong>安全</strong> 性考虑：<br>SERIALIZABLE&gt;REPEATABLE READ&gt;READ COMMITTED&gt;READ UNCOMMITTED</p></blockquote><blockquote><p>从 <strong>性能</strong> 上考虑：<br>READUNCOMMITTED&gt;READ COMMITTED&gt;REPEATABLE READ&gt;SERIALIZABLE</p></blockquote><p><strong>修改当前数据库隔离级别：</strong></p><pre class="line-numbers language-mysql"><code class="language-mysql">SET [SESSION / GLOBAL] TRANSACTION ISOLATION LEVEL 隔离类型;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>查询当前数据库的隔离级别：</strong></p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT @@TX_ISOLATION;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h3><h3 id="存储过程中变量的使用"><a href="#存储过程中变量的使用" class="headerlink" title="存储过程中变量的使用"></a>存储过程中变量的使用</h3><h3 id="存储过程中定义条件和处理程序"><a href="#存储过程中定义条件和处理程序" class="headerlink" title="存储过程中定义条件和处理程序"></a>存储过程中定义条件和处理程序</h3><h3 id="存储过程中光标的使用"><a href="#存储过程中光标的使用" class="headerlink" title="存储过程中光标的使用"></a>存储过程中光标的使用</h3><h3 id="存储过程中流程控制的使用"><a href="#存储过程中流程控制的使用" class="headerlink" title="存储过程中流程控制的使用"></a>存储过程中流程控制的使用</h3><h3 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h3><h3 id="查看存储过程"><a href="#查看存储过程" class="headerlink" title="查看存储过程"></a>查看存储过程</h3><h3 id="修改存储过程"><a href="#修改存储过程" class="headerlink" title="修改存储过程"></a>修改存储过程</h3><h3 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h3><p>更新中···</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;便捷查找方式：按&lt;code&gt;Ctrl+F&lt;/code&gt;可查找&lt;br&gt;搜索方法查找方法：数据名+操作方式&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例子： 字段删除、表修改&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;数据库操作&quot;&gt;&lt;a href=&quot;#数据库操
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://Sanscan12.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="笔记" scheme="https://Sanscan12.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="MySQL" scheme="https://Sanscan12.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>英语语法</title>
    <link href="https://sanscan12.github.io/posts/d796.html"/>
    <id>https://sanscan12.github.io/posts/d796.html</id>
    <published>2020-04-11T16:00:00.000Z</published>
    <updated>2020-06-07T10:17:02.157Z</updated>
    
    <content type="html"><![CDATA[<h1 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h1><p>名词是能表示或指称”人、事、物、地点或概念”的词语。</p><h2 id="名词的种类"><a href="#名词的种类" class="headerlink" title="名词的种类"></a>名词的种类</h2><p>1.<strong>专有名词</strong>：指特定的名称,”人、事、物、地点或概念”的名词，<strong>首字母需为大写</strong><br>2.<strong>普通名词</strong>：指一般名称，<strong>首字母不需大写</strong><br>3.<strong>具体名词</strong>：五官能感受到的物质<br>4.<strong>抽象名词</strong>：五官无法感受到的概念<br>5.<strong>可数名词</strong>：有单数与复数区别的名词<br>6.<strong>不可数名词</strong>：无法计数类的名词</p><h2 id="可数名词"><a href="#可数名词" class="headerlink" title="可数名词"></a>可数名词</h2><p>可数名词有<strong>普通名词</strong>和<strong>集合名词</strong>两种</p><p><strong>1.普通名词</strong></p><p> <strong>单数的普通名词</strong>之前，通常会加上冠词a/an或是the；<strong>复数的普通名词</strong>之前不加冠词a/an，并在词尾加上s或es表示复数</p><table><thead><tr><th>单数普通名词</th><th>复数普通名词</th></tr></thead><tbody><tr><td>a chair （一张椅子）</td><td>charis（椅子）</td></tr><tr><td>an apple （一个苹果）</td><td>apples（苹果）</td></tr><tr><td>the book （那本书）</td><td>books（书）</td></tr></tbody></table><p><strong>2.集合名词</strong></p><p>集合名词指的是同一种类的人或物之集合体名称，形式是单数，但代表是复数；将几何体视为一个单位时，则为普通名词，单数前面加冠词a/an或是the，复数在词尾加上s或es。</p><table><thead><tr><th align="center">集合名词指组成分子的总称</th><th align="center">集合名词视为一个单位</th></tr></thead><tbody><tr><td align="center">my family （我的家人）</td><td align="center">two families （两个家庭）</td></tr><tr><td align="center">some fruit （一些水果）</td><td align="center">different fruits （不同的水果）</td></tr><tr><td align="center">a lot of fish （很多鱼）</td><td align="center">various fishes （各种各样的鱼）</td></tr></tbody></table><h2 id="不可数名词"><a href="#不可数名词" class="headerlink" title="不可数名词"></a>不可数名词</h2><p>“专有名词”“位置名词”以及“抽象名词”都是属于不可数名词。不可数名词一般前面不加冠词a/an，也没有复数形式。<br><strong>表示“人名、国名、地名、物件名称或月日、节日等”的专有名词</strong>；<strong>表示“没有一定形态”的物质名词</strong>；<strong>指无形的概念，如“性质、状态、概念或观念”等的抽象名词</strong></p><h2 id="单数变复数名词的方法"><a href="#单数变复数名词的方法" class="headerlink" title="单数变复数名词的方法"></a>单数变复数名词的方法</h2><h3 id="1-规则变化"><a href="#1-规则变化" class="headerlink" title="1.规则变化"></a>1.规则变化</h3><table><thead><tr><th align="left">变化规则</th><th align="left">单数→复数</th><th align="center">例外</th></tr></thead><tbody><tr><td align="left">一般名词词尾加上s</td><td align="left">girl→girls、desk→desks</td><td align="center"></td></tr><tr><td align="left">名词词尾为o词尾加上es</td><td align="left">potato→potatoes、tomato→tomatoes、hero→heroes</td><td align="center"></td></tr><tr><td align="left">名词词尾为s, X, Z, sh, ch词尾加上es</td><td align="left">bus→buses、box→boxes、fish→fishes、church→churches</td><td align="center">photos、radios、pianos</td></tr><tr><td align="left">名词词尾为f或fe先将f或fe改成v，再加es</td><td align="left">leaf→leaves、knife→knives</td><td align="center">roofs、chiefs</td></tr><tr><td align="left">名词词尾为辅音+y先将y改成i，再加es</td><td align="left">baby→babies、story→stories</td><td align="center"></td></tr><tr><td align="left">名词词尾为元音+y直接加s</td><td align="left">boy→boys、day→days、key→keys</td><td align="center"></td></tr></tbody></table><h3 id="2-不规则变化"><a href="#2-不规则变化" class="headerlink" title="2.不规则变化"></a>2.不规则变化</h3><table><thead><tr><th>变化方式</th><th>单数→复数</th><th>例外</th></tr></thead><tbody><tr><td>名词中的元音变化</td><td>man→men、woman→wonen、tooth→teeth、foot→feet</td><td>German→Germans(德国人)</td></tr><tr><td>名词词尾+en/ren</td><td>child→childer</td><td></td></tr><tr><td>单复数形式相同</td><td>sheep→sheep、Chinese→Chinese</td><td></td></tr></tbody></table><h2 id="可数名词中的特殊名词"><a href="#可数名词中的特殊名词" class="headerlink" title="可数名词中的特殊名词"></a>可数名词中的特殊名词</h2><p><strong>1.有些名词，单复数所代表的意义不同</strong></p><table><thead><tr><th>单数</th><th>复数</th></tr></thead><tbody><tr><td>good （善行） <br />cloth （布） <br />glass（玻璃）<br />manner（方法）<br />wood（木头）<br />work（工作）</td><td>goods （货物） <br />clothes （衣服） <br />glasses（眼镜）<br />manners（礼貌）<br />woods（树木）<br />works（作品）</td></tr></tbody></table><p><strong>2.通常以复数形态出现的名词</strong><br>        这些名词通常是“成双成对”的形式存在，要表示数量时，会在前面加上a pair of （一双，一副）。一旦使用单数，则该物品不成套</p><table><thead><tr><th>成双的名词</th><th>表示数量的用法</th></tr></thead><tbody><tr><td>shoes（鞋子）<br />socks（袜子）<br />gioves（手套）<br />pants（长裤）<br />shorts（短裤）<br />jeans（牛仔裤）<br />scissors（剪刀）<br />chopsticks（筷子）</td><td>a shoe（一只鞋子）<br />a glove （一只手套）<br />a pair of shoes（一双鞋）<br />a pair of chopsticks（一双筷子）</td></tr></tbody></table><h2 id="名词在句子中的用法"><a href="#名词在句子中的用法" class="headerlink" title="名词在句子中的用法"></a>名词在句子中的用法</h2><p><strong>1.作为主语</strong></p><ol><li><p>作为句子的主语</p><blockquote><p>Mary is very smart. (Mary)<br>玛丽非常聪明</p></blockquote></li><li><p>作为主语的补语（也称“表语”）</p><blockquote><p>My favorite holiday is Christmas. (Christmas)<br>我最喜欢的节日是圣诞节</p></blockquote></li><li><p>作为主语的同位语</p><blockquote><p>My brother,Jeff,is a doctor. (jeff)<br>我的哥哥杰夫是名医生。</p></blockquote></li></ol><p><strong>2.作为宾语</strong></p><ol><li><p>作为动词的宾语</p><blockquote><p>I love Kathy. (love)（动词）<br>我爱凯西。</p></blockquote></li><li><p>作为介词的宾语</p><blockquote><p>We are talking about our weekend. (about)（介词）        talking about：讨论<br>我们正在讨论我们的周末。</p></blockquote></li><li><p>作为宾语的补语</p><blockquote><p>Everyone calls me Bill. (me)（宾语）<br>大家都叫我比尔。</p></blockquote></li><li><p>作为宾语的同位语</p><blockquote><p>I want to thank my husband,Jerry. (my husband)（宾语）<br>我要感谢我的先生杰里。</p></blockquote></li></ol><hr><h1 id="代词"><a href="#代词" class="headerlink" title="代词"></a>代词</h1><p>代词是代替名词的词。</p><h2 id="人称代词"><a href="#人称代词" class="headerlink" title="人称代词"></a>人称代词</h2><p>代替人名或称谓的人称代词，有单复数的区别，并有主格、形容词性物主代词及宾格三种形式：</p><table><thead><tr><th align="left"></th><th></th><th>主格</th><th>形容词性物主代词</th><th>宾格</th></tr></thead><tbody><tr><td align="left"><strong>第一人称</strong></td><td>单数</td><td>I 我</td><td>my 我的</td><td>me 我</td></tr><tr><td align="left"></td><td>复数</td><td>we 我们</td><td>our 我们的</td><td>us 我们</td></tr><tr><td align="left"><strong>第二人称</strong></td><td>单数</td><td>you 你</td><td>your 你的</td><td>you 你</td></tr><tr><td align="left"></td><td>复数</td><td>you 你们</td><td>your 你们的</td><td>you你们</td></tr><tr><td align="left"><strong>第三人称</strong></td><td>单数</td><td>he 他<br />she 她<br />it 它</td><td>his 他的<br />her 她的<br />its 它的</td><td>him 他<br />her 她<br />it 它</td></tr><tr><td align="left"></td><td>复数</td><td>they 他们/她们/它们</td><td>their 他们的/她们的/它们的</td><td>them 他们/她们/它们</td></tr></tbody></table><h3 id="1-人称代词的用法"><a href="#1-人称代词的用法" class="headerlink" title="1.人称代词的用法"></a>1.人称代词的用法</h3><p>1.主格：为句子的主语</p><blockquote><p>I am a student.<br>我是名学生。</p></blockquote><p>2.宾格：为句子的宾格</p><ul><li>作为动词的宾语</li></ul><blockquote><p>She loves me. (loves)（动词）、(me)<br>她爱我。</p></blockquote><ul><li>作为宾语补语</li></ul><blockquote><p>I thought that was you. (that)（宾格）、(you)<br>我以为那是你。</p></blockquote><ul><li>作为介词的宾语</li></ul><blockquote><p>I care about him. (about)（介词）、(him)<br>我很关心他。</p></blockquote><ul><li>形容词物主代词：为形容词，放在名词前面，修饰名词</li></ul><blockquote><p>That is my money. (my)、(money)（名词）<br>那是我的钱。</p></blockquote><h3 id="2-关于it的用法"><a href="#2-关于it的用法" class="headerlink" title="2.关于it的用法"></a>2.关于it的用法</h3><p>1.it指“它”，用来代替物品名称或动物名称。</p><blockquote><p>Where is my watch?<br>我的手表在哪里？</p><p>It is on the desk.<br>It → it为my watch的代词<br>它在书桌上。</p><p>It is my dog.<br>It → it为my dog的代词<br>它是我的狗。</p></blockquote><p>2.it可用来代替“时间、天气、”等抽象名词</p><blockquote><p>It is three o’clock.<br>It → it指时间<br>现在是三点。</p><p>It is cold today.<br>It → it指天气，为the weather的代词<br>天气很冷。</p></blockquote><p>3.it可作为句子的形式主语。</p><blockquote><p>It is wrong to lig.<br>说慌是错的。    </p></blockquote><p><strong>PS</strong>：这个句子真正的主语是后面的to lie（说慌这件事），it虽然在句首，却不是真正的主语，所以称为“形式主语”</p><h2 id="与人称代词有关的其他代词"><a href="#与人称代词有关的其他代词" class="headerlink" title="与人称代词有关的其他代词"></a>与人称代词有关的其他代词</h2><h3 id="1-名词性物主代词"><a href="#1-名词性物主代词" class="headerlink" title="1.名词性物主代词"></a><strong>1.名词性物主代词</strong></h3><p>名词性物主代词为代替“形容词性物主代词+名词”的代词，当前面出现多某个词是，为了避免重复，后面再提到同样的名词是就会使用“名词性物主代词”。</p><table><thead><tr><th>形容词性物主代词+名词</th><th>名词性物主代词</th></tr></thead><tbody><tr><td>my (我们) + 名词</td><td>mine</td></tr><tr><td>our (我们的) + 名词</td><td>ours</td></tr><tr><td>your (你的) + 名词</td><td>yours</td></tr><tr><td>his (他的) + 名词</td><td>his</td></tr><tr><td>her (她的) + 名词</td><td>hers</td></tr><tr><td>its (它的) + 名词</td><td>its</td></tr><tr><td>their (Ta们的)+ 名词</td><td>theirs</td></tr></tbody></table><blockquote><p>Is this your umbrella? (umbrella)<br>这是你的雨伞吗？</p><p>Yes,it is mine.<br>mine 指的是 my umbrella<br>对，它是我的。    </p><p>Their cat is white;ours is black.<br>cat、ours 指的是our cat<br>他们的猫是白色的，我们的是黑色的。</p></blockquote><p><strong>PS</strong>：前面的问句已经提到umbrella（雨伞）这个名词，后面的答句就不需要再重复umbrella，改用mine来代替my umbrella</p><h3 id="2-反身代词"><a href="#2-反身代词" class="headerlink" title="2.反身代词"></a><strong>2.反身代词</strong></h3><p>当主语与宾语指的是同一人或同一件事时，宾语要使用反身代词。</p><table><thead><tr><th></th><th>主语</th><th>宾语</th><th>反身代词</th></tr></thead><tbody><tr><td><strong>单数</strong></td><td>I <br />you  <br />he  <br />she  <br />it</td><td>me  <br />you  <br />him  <br />her <br />it</td><td>myself (我自己)  <br />yourself (你自己) <br />himself (他自己) <br />herself (她自己) <br />itself(它自己)</td></tr><tr><td><strong>复数</strong></td><td>we <br />you<br />they</td><td>us<br />you<br />them</td><td>ourselves (我们自己)<br />yourselves (你们自己)<br />themselves(他们自己)</td></tr></tbody></table><blockquote><p>错误:I know me.<br>正确:I know myself.<br>我了解我自己。</p></blockquote><p><strong>PS</strong>：主语是“我”，宾语也是“我”，主语宾语为同一人，因此宾语要用反身代词myself，而不是me</p><blockquote><p>错误:You must protect you.<br>正确:You must protect yourselves.<br>我们必须保护你们自己。</p></blockquote><p><strong>PS</strong>：主语是“你们”，宾语也是“你们”，主语宾语为同一群人，因此宾语要用反身代词 youreslves ，而不是you</p><h2 id="指示代词"><a href="#指示代词" class="headerlink" title="指示代词"></a>指示代词</h2><p>用来代替“的定的人或事物”的代词。指示代词也可以做指示形容词，后面接名词。</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>单数</td><td>this</td><td>这个(人、事、物)</td></tr><tr><td></td><td>that</td><td>那个(人、事、物)</td></tr><tr><td>复数</td><td>these</td><td>这些(人、事、物)</td></tr><tr><td></td><td>those</td><td>哪些(人、事、物)</td></tr></tbody></table><p><strong>指示代词的用法</strong><br>指示电磁在句子中做主语，也可做宾语。<br>1.做主语</p><blockquote><p>This is my seat. (This)<br>这是我的座位。</p><p>Those are better,but more expensive. (Those)<br>哪些比较好，但比较贵。</p></blockquote><p>2.做宾语</p><blockquote><p>I don’t want to eat that. (that)<br>我不想吃那个东西。</p><p>Where should I put these? (these)<br>我改吧这些东西放哪儿？</p></blockquote><p>3.指示代词做指 示形容词时，后面接名词</p><blockquote><p>You can’t borrow this book. (this book)<br>你不能借这本书。</p><p>These bags are all defective. (These bags)<br>这些包都是有瑕疵的。</p></blockquote><h2 id="不定代词"><a href="#不定代词" class="headerlink" title="不定代词"></a>不定代词</h2><p>用来代替“不特定的人或事物”的词。不定代词也可以做不定形容词，后面接名词。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>one</td><td>一个(人、事、物)</td></tr><tr><td>each</td><td>每一个(人、事、物)</td></tr><tr><td>both</td><td>两个(人、事、物)</td></tr><tr><td>either</td><td>两者其中之一(人、事、物)</td></tr><tr><td>any</td><td>任何、若干(人、事、物)</td></tr><tr><td>some</td><td>一些(人、事、物)</td></tr><tr><td>many</td><td>许多(人、事、物)</td></tr><tr><td>more</td><td>更多(人、事、物)</td></tr><tr><td>most</td><td>大部分(人、事、物)</td></tr><tr><td>all</td><td>所有(人、事、物)</td></tr><tr><td>none</td><td>没有(人、事、物)</td></tr><tr><td>a few</td><td>几个(人、事、物)</td></tr><tr><td>a lot</td><td>很多(人、事、物)</td></tr></tbody></table><p><strong>不定代词的用法</strong><br>不定代词在句子中可以做主语，也可做宾语。<br>1.做主语</p><blockquote><p>I have many bags. Some are expensive, but most of them are cheap.<br>Some指“有些包”，但没有特别指出是哪些包。<br>most指“大部分包”，但没有特别指出是哪些包。<br>我有很多包。 有些很贵， 但大部分都很便宜。</p></blockquote><p>2.做宾语</p><blockquote><p>The cookie look yummy. Can I have one?<br>one指“一块饼干”。但没有指定要哪一个。<br>这些饼干看起来真美味。我可以吃吗？</p><p>She wants money, but I don’t have any.<br>any指“任何一点钱”。没有特别指定是什么形式的货币.<br>她想要钱，但我一点儿都没有。</p></blockquote><p>3.不定代词做不定形容词用时，后面接名词疑问代词</p><blockquote><p>She only has a few friends. (a few)<br>她只有几个朋友。</p><p>I got many gifts on my birthday. (many)<br>我生日时收到许多礼物。</p></blockquote><h2 id="疑问代词"><a href="#疑问代词" class="headerlink" title="疑问代词"></a>疑问代词</h2><p>疑问代词是用来询问“人、事物、时、地、方法、原因”的代词，单复数形式皆相同，常放在句首为疑问词。</p><table><thead><tr><th>代词</th><th>询问</th></tr></thead><tbody><tr><td>who 谁</td><td>问“人”</td></tr><tr><td>whom 谁</td><td>问“人”</td></tr><tr><td>whose 谁的</td><td>问“持有人”</td></tr><tr><td>what 什么</td><td>问“事、物”或“职业、身份”</td></tr><tr><td>which 哪一个</td><td>问“人 、事、物”</td></tr></tbody></table><p><strong>疑问代词的用法</strong></p><ol><li><p>做主语</p><blockquote><p>Who is in the bathroom? (Who)<br>谁在厕所里？</p></blockquote></li><li><p>作为主语补语</p><blockquote><p>Whose is that?<br>Whose为主语that的补语<br>那个是谁的？</p></blockquote></li><li><p>作为动词的宾语</p><blockquote><p>Whom do you Iove?<br>Whom为动词Love的宾语<br>你爱谁？</p><p>Which do you prefer?<br>Which为动词的love的宾语<br>你比较喜欢哪个？</p></blockquote></li><li><p>作为借此的宾语</p><blockquote><p>What are you talking about?<br>What为介词about的宾语<br>你们在讲什么？</p></blockquote></li></ol><hr><h1 id="所有格"><a href="#所有格" class="headerlink" title="所有格"></a>所有格</h1><p>所有格放在形容词前面，表示该名词是属于 <strong>谁的</strong>。正文因为放在名词前面，所以也可是为形容词，或称为 <strong>所有形容词</strong>。所有格也可以用介词of来表示 <strong>属于·····的</strong></p><h2 id="所有格的形成方式"><a href="#所有格的形成方式" class="headerlink" title="所有格的形成方式"></a>所有格的形成方式</h2><table><thead><tr><th>形式方式</th><th>说明</th></tr></thead><tbody><tr><td>形容词性物主代词</td><td>my（我的）、our（我们的）、his（他的）、its（它的）<br />your（你的/你们的）、their（他/它们的）、her（她的）</td></tr><tr><td>名词 + ’s</td><td>Peter’s（彼得的）、the boy’s（男孩的）、my mother’s（我妈妈的）</td></tr><tr><td>of + 名词</td><td>… of the table (餐桌的)、… of London(伦敦的)、… of the house (房子的)</td></tr><tr><td>集合名词，后面直接加 ’s</td><td>children’s（小孩们的）、people’s（人们的）</td></tr><tr><td>词尾为s的复数名词，加 ’不加s</td><td>the boys’（男孩儿们的）、the students’（学生们的）</td></tr><tr><td>两人以上共同拥有，最后一个名词后面加  ’s</td><td>Steven and Jack’s（史蒂文与杰克的）</td></tr><tr><td>两人以上各自拥有，每个名词后面各自加 ’s</td><td>Streve’s and Jack’s（史蒂文与杰克的）</td></tr></tbody></table><h2 id="所有格的用法"><a href="#所有格的用法" class="headerlink" title="所有格的用法"></a>所有格的用法</h2><p>所有格无法独立使用在句子中，后面一定要接名词（若是of+名词，则名词放前面）形成<strong>名词短语</strong>才能使用在句子中，并作为主语、主语补语或宾语。</p><ol><li><p><strong>作为主语</strong></p><blockquote><p>my + father = my father （我的父亲）<br>形容词性物主代词 + 名词 = 名词短语<br>My father is a police officer.<br>My father:句子的主语<br>我的父亲是一名警官。</p></blockquote></li><li><p><strong>作为主语补语</strong></p><blockquote><p>the boys’ ＋　teacher = the boys’ teacher （男孩儿们的老师）<br>所有格 +　名词　=　名词短语　<br>His wife is the boys’ teacher.<br>boys’ teacher:作为主语his wife的补语<br>他太太是男孩儿们的老师。</p></blockquote></li><li><p><strong>作为动词的宾语</strong></p><blockquote><p>the weather + of London = the weather of London （伦敦的天气）<br>名词 + 所有格 = 名词短语<br>I canboys’t stand the weather of London.<br>the weather of London:作为动词stand的宾语<br>我无法忍受伦敦的天气。</p></blockquote></li><li><p><strong>作为介词的宾语</strong></p><blockquote><p>Amy and Emily’s + brother = Amy and Emily’s brother （艾米和埃米莉的哥哥）<br>所有格 + 名词 = 名词短语</p><p>I am in love with Amy and Emily’s brother.<br>Amy and Emily’s brother：作为介词with的宾语<br>我爱上了艾米和埃米莉的哥哥。</p></blockquote></li></ol><hr><h1 id="冠词"><a href="#冠词" class="headerlink" title="冠词"></a>冠词</h1><p>冠词是一种限定词，<strong>不定冠词</strong>a或an通常放在 未指定 的单数名词前；而<strong>定冠词</strong>the则放在有指定的单数名词或不可数名词前。冠词虽然可分为<strong>定冠词</strong>和 <strong>不定冠词</strong>两种，但总共只有三个，即a、an、the。</p><h2 id="不定冠词-a-an"><a href="#不定冠词-a-an" class="headerlink" title="不定冠词 (a/an)"></a>不定冠词 (a/an)</h2><p>a与an都是指 一个，因此后面只能接<strong>单数可数名词</strong></p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>a 用在首字母为<strong>辅音</strong>的单数名词前</td><td>a boy （一个男孩）<br />a chair（一张椅子）<br />a book （一本书）<br />a window （一扇窗户）<br />a aup of tea （一杯茶）</td></tr><tr><td>an 用在首字母为<strong>元音</strong>的单数名词前</td><td>an egg （一颗蛋）<br />an hour（一个小时）<br />an island （一座岛）<br />an umbrella （一把伞）</td></tr></tbody></table><h2 id="定冠词-the"><a href="#定冠词-the" class="headerlink" title="定冠词 (the)"></a>定冠词 (the)</h2><p>the没有单位复数之分，后面可接 <strong>单数可数名词</strong> 、<strong>复数可数名词</strong>，也可以接<strong>不可数名词</strong></p><h2 id="定冠词的使用"><a href="#定冠词的使用" class="headerlink" title="定冠词的使用"></a>定冠词的使用</h2><ol><li><p><strong>表示特定的 人、事、物</strong></p><blockquote><p>Mr.Smith is the teacher of the class.<br>Mr.Smith是这个班级的老师，不是路边随便抓来的一个老师<br>史密斯先生是这个班级的老师。</p><p>Did you enjoy the movie?<br>指某部说话者与听话这都知道的特定的电影，而并非是任意一部电影<br>你喜欢看那部电影吗？</p><p>The milk smells sour.<br>指特定的某一瓶或某一杯牛奶，而非所有的牛奶<br>这牛奶闻起来酸了。</p></blockquote></li><li><p><strong>表示独一无二的自然事物</strong><br>自然界中独一无二的事物前面，要加固定冠词，表示<strong>唯一</strong></p><blockquote><p>Look at the moon in the sky！<br>你看天空的月亮！</p><p>The earth moves around the sun.<br>地球绕着太阳转。</p></blockquote></li><li><p><strong>表示方向或方位时</strong></p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>the right （右边）</td><td>the left（左边）</td></tr><tr><td>the north （北方）</td><td>the south（南方）</td></tr><tr><td>the east （东方）</td><td>the west （西方）</td></tr></tbody></table><blockquote><p>The forest is on the right of the river.<br>森林在和的右侧。</p><p>The birds are flying to the southh.<br>鸟儿们要飞到南方去。</p></blockquote></li><li><p><strong>专有名称之前</strong><br>有<strong>专属名称</strong>的自然景观，前面也会加上定冠词</p><blockquote><p>She swam scross the Yellow River.<br>她游泳横渡了黄河。</p><p>We went to the Maldives for vacation.<br>我们去马尔代夫度假。</p></blockquote></li><li><p><strong>序数词之前</strong></p><p>表示“第·····”的序数词之前，必须要加定冠词</p><blockquote><p>She was first noe to get up.<br>她是第一个起床的人。</p><p>Mother’s Day falls on the seacond Sunday of May.<br>母亲节是在五月的第二个星期天。</p></blockquote></li><li><p><strong>形容词最高级之前</strong></p><p>表是 “最·····”的形容词最高级之前，必须要加定冠词。</p><blockquote><p>I have the best mom in the world.<br>我拥有世界上最棒的妈妈。</p><p>Sally is the youngest child in my family.<br>萨莉是我家最小的孩子</p></blockquote></li></ol><h2 id="不需要加定冠词的名词"><a href="#不需要加定冠词的名词" class="headerlink" title="不需要加定冠词的名词"></a>不需要加定冠词的名词</h2><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>1.前面已经是形容词性物主代词、指示形容词及不定形容词的名词</td><td>my wife （我的太太）   <br />this book （这本书）<br />one day （有一天）</td></tr><tr><td>2.物质名词</td><td>water（水）<br />air（空气）<br />iron（铁）<br />gold（黄金）</td></tr><tr><td>3.抽象名词</td><td>honesty（诚实）<br />happiness（幸福）</td></tr><tr><td>4.科学</td><td>science（科学）<br />math（数学）</td></tr><tr><td>5.运动项目</td><td>basketball（篮球）<br />tennis（网球）</td></tr><tr><td>6.颜色</td><td>blue（蓝色）<br />white（白色）</td></tr><tr><td>7.语言</td><td>English（英语）<br />Chinese（中文）</td></tr></tbody></table><blockquote><p><strong>错误例子：</strong></p><p>Mike is the my friend.<br>迈克是我的朋友。</p><p>We can’t live without the air.<br>没有空气，我们无法存活。</p><p>Money can’t buy the happiness.<br>金钱买不到快乐。</p><p>Jarry is good at the math.<br>杰里很擅长数学。</p><p>Let’s paly the basketball.<br>我们来打篮球吧。</p><p>My favorite color is the red.<br>我最喜欢的颜色是红色。</p><p>Do you speak the English?<br>你会说英语吗？</p></blockquote><hr><h1 id="形容词"><a href="#形容词" class="headerlink" title="形容词"></a>形容词</h1><p>形容词用来修饰 <strong>名词</strong> 或 *<em>代词 *</em> ，该结果不会影响，可丰富句子。</p><h2 id="形容词的用法"><a href="#形容词的用法" class="headerlink" title="形容词的用法"></a>形容词的用法</h2><p><strong>1.放在名词前的修饰词</strong><br>$$<br>形容词 ＋名词 = 名词短语<br>$$</p><p>名词短语可视为一个名词使用，可做句子的主语，也可做补语或宾语。</p><ol><li><p>名词短语做 主语</p><blockquote><p>The handsome man is my husband.<br>The handsome man：名词短语<br>那个英俊的男子是我的丈夫。</p></blockquote></li><li><p>名词短语做 补语</p><blockquote><p>Mike is a smart boy.<br>a smart boy：名词短语<br> 迈克是个聪明的男孩。</p></blockquote></li><li><p>名词短语做 宾语</p><blockquote><p>She wore a beautiful dress.<br>a beautiful dress：名词短语<br>她穿了一条美丽的连衣裙。</p></blockquote></li></ol><p><strong>2.放在连系动词后作补语</strong></p><p>形容词放在连系动词后面，作为修饰前面主语的补语<br>连系动词如 is 、are 、look 、smell 等···</p><blockquote><p>My parents are happy.<br>happy：修饰主语 my parents<br>我的爸妈很开心。</p><p>The cake looks delicious.<br>delicious：修饰主语 the cake<br>蛋糕看起来很美味。</p></blockquote><h2 id="形容词的种类"><a href="#形容词的种类" class="headerlink" title="形容词的种类"></a>形容词的种类</h2><p><strong>1.代名形容词</strong></p><p>可当为形容词用的代词，即代名形容词</p><ol><li><p>指示形容词 —— 由指示代词转形容词用</p><blockquote><p>如 this 、that 、these 、those等</p><p>this woman 这个女子<br>that movie 那部电影<br>these books 这些书本<br>those chairs 那些椅子</p></blockquote></li><li><p>不定形容词 —— 由不定代词转形容词用</p><blockquote><p>如 some 、 any 、 both 、 all 等</p><p>some food 一些事物<br>any ideas 任何想法<br>each person每一个人<br>another table 另一张桌子</p></blockquote></li><li><p>所有形容词 —— 由形容词性物主代词转形形容词用</p><blockquote><p>如 my 、your 、his 、their 等</p><p>my teacher 我的老师<br>our homework 我们的家庭作业<br>his watch 他的手表<br>their children 他们的孩子</p></blockquote></li><li><p>疑问形容词 —— 由于疑问代词转形容词用</p><blockquote><p>如 what 、whose 、which 等</p><p>what Kind 哪种<br>which room 哪个房间<br>whose handbag 谁的手提包</p></blockquote></li><li><p>关系形容词 —— 由关系代词转形容词用</p><blockquote><p>如 what 、whose 、 which 等</p><p>what time 什么时间<br>whose idea 谁的点子<br>which student 哪个学生</p></blockquote></li></ol><p><strong>2.数量形容词</strong></p><p>用来表示名词的数或量有多少的形容词</p><ol><li><p>不定数量形容词：用来修饰没有一定数量的名词</p><blockquote><p>如： many 、much 、little 、few 、some 、all 等</p><p>many / few / a few / sevearl + 可数名词复数<br>much / little / a little + 不可数复数</p></blockquote><ul><li><p>可数名词复数</p><blockquote><p>many watches 很多手表<br>few people 很少人<br>a few dresses 几条连衣裙<br>several questions 数个问题</p><p>few 表示 “很少 ， 少到几乎没有”，有否定含义<br>a few 表示 “几个”</p></blockquote></li><li><p>不可数名词</p><blockquote><p>much time 很多时间<br>little food 很少食物<br>a little money 一点钱</p><p>little 表示 “很少，少到几乎没有”，有否定含义<br>a little 表示 “有一点，少许”</p><blockquote><p>some / all / enough +　（可数名词复数 、不可数名词）</p><p>some friends 一些朋友<br>some water 一点水<br>all students 所有学生<br>all money 所有的钱<br>enough seats 足够的座位<br>enough time 足够的时间</p></blockquote></blockquote></li></ul></li><li><p>定量形容词： 用来计数活表示顺序 、份量的名词</p><blockquote><p>数词 、序数词 、倍数词 等···<br>one year 年<br>ten children 是个孩子<br>the first day 第一天<br>the last time 最后一天<br>half an hour 半小时<br>double pay 两倍工资</p></blockquote></li></ol><p><strong>2.性状形容词</strong></p><p>用来修饰名词的 性质 、外观 、状态 、特性 等的形容词</p><ol><li><p>描述 外观 或 状态</p><blockquote><p>good idea 好主意<br>tall building 高楼<br>young woman 年轻女子<br>hot water 热水<br>old lady 老太太<br>rainy day 雨天</p></blockquote></li><li><p>描述 特性 或 特质</p><blockquote><p>happy ending 快乐的结局<br>outgoing personality 活泼的个性<br>sad news 悲伤的消息<br>intersting story 有趣的故事</p></blockquote></li><li><p>描述材质</p><blockquote><p>stone step 石阶<br>silver spoon 银汤匙<br>marble tile 大理石砖<br>gold coin 金币</p></blockquote></li><li><p>专有形容词</p><blockquote><p>an English dictionary 一本英语字典<br>a European country 一个欧洲国家<br>the Chinese people 中国人</p></blockquote></li></ol><h2 id="形容词的顺序"><a href="#形容词的顺序" class="headerlink" title="形容词的顺序"></a>形容词的顺序</h2><p>用多个形容词一起修饰同一个名词时，形容词的先后是有一定顺序要求</p><blockquote><p>代名形容词 &gt; 数量形容词 &gt; 性状形容词 + 名词 </p><blockquote><ol><li>包含 冠词 、指示形容词 、不定形容词 、所有形容词 的代名形容词要放在名词短语的最前面</li><li>包含 序数词 、数词  的数量形容词紧接在后</li><li>最后才是放描述 性质 、外观 、专有形容词 、材质 等的性状形容词</li></ol></blockquote></blockquote><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>1</td><td>冠词<br />a / an / the</td><td>指示形容词<br />this , that , those</td><td>不定形容词<br />some , many , a lot of</td><td>所有形容词<br />my , your , their</td></tr><tr><td>2</td><td>序列词 first , second , third</td><td></td><td></td><td></td></tr><tr><td>3</td><td>数词 one , two , three</td><td></td><td></td><td></td></tr><tr><td>4</td><td>性状形容词</td><td></td><td></td><td></td></tr><tr><td>5</td><td>名词</td><td></td><td></td><td></td></tr></tbody></table><p>名词短语做主语<br>the    &gt;    first    &gt;    two    &gt;    days     （前两天）<br>冠词  &gt; 序列词 &gt; 数词 &gt; 名词</p><p>these    &gt;    two    &gt;    old    &gt;    ladies    （这两个老太太）<br>指示形容词 &gt; 数词 &gt; 性状形容词 &gt; 名词</p><p>等待更新···</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;名词&quot;&gt;&lt;a href=&quot;#名词&quot; class=&quot;headerlink&quot; title=&quot;名词&quot;&gt;&lt;/a&gt;名词&lt;/h1&gt;&lt;p&gt;名词是能表示或指称”人、事、物、地点或概念”的词语。&lt;/p&gt;
&lt;h2 id=&quot;名词的种类&quot;&gt;&lt;a href=&quot;#名词的种类&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="学习记录" scheme="https://Sanscan12.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="笔记" scheme="https://Sanscan12.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>结构思维</title>
    <link href="https://sanscan12.github.io/posts/e9a6.html"/>
    <id>https://sanscan12.github.io/posts/e9a6.html</id>
    <published>2020-04-03T16:00:00.000Z</published>
    <updated>2020-05-25T14:25:43.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-认识结构化"><a href="#1-认识结构化" class="headerlink" title="1 认识结构化"></a>1 认识结构化</h1><h2 id="1-1-结构化的特征"><a href="#1-1-结构化的特征" class="headerlink" title="1.1 结构化的特征"></a>1.1 结构化的特征</h2><h3 id="大脑的四个思维习惯"><a href="#大脑的四个思维习惯" class="headerlink" title="大脑的四个思维习惯"></a>大脑的四个思维习惯</h3><p>归纳主题、归类、偏爱数字3以以及短时记忆不能承载太多信息、喜欢有规律的信息</p><h3 id="结构化思维的三个特征"><a href="#结构化思维的三个特征" class="headerlink" title="结构化思维的三个特征"></a>结构化思维的三个特征</h3><p><font color = #EBC57C><strong>主题先行</strong></font></p><p>一般情况会逐句了解你的意思。</p><p><font color = #EBC57C><strong>归类分组</strong></font></p><p>当你要表达大量信息的时候，因为大脑的短时记忆有限，所以最佳策略是把信息进行归类，最好是分为3类，会比较容易记忆。</p><p><font color = #EBC57C><strong>逻辑递进</strong></font></p><p>当你定了主题，并对所有信息进行归类分组。</p><h2 id="1-2-表达时主题先行"><a href="#1-2-表达时主题先行" class="headerlink" title="1.2 表达时主题先行"></a>1.2 表达时主题先行</h2><h3 id="区分主题和议题"><a href="#区分主题和议题" class="headerlink" title="区分主题和议题"></a><strong><font color = #EBC57C>区分主题和议题</font></strong></h3><p><strong>主题</strong>是对于要讨论的内容，我持什么观点。<br><strong>议题</strong>是指我将要讨论什么内容</p><p>主题是要适度、符合预期、有思想</p><h3 id="4种方式主题吸引"><a href="#4种方式主题吸引" class="headerlink" title="4种方式主题吸引"></a><strong><font color = #EBC57C>4种方式主题吸引</font></strong></h3><p><strong>主题模型开场白SCQA模型</strong></p><table><thead><tr><th>英文简称</th><th>说明</th></tr></thead><tbody><tr><td>S是Situation</td><td>背景</td></tr><tr><td>C是Complication</td><td>冲突=渴望+阻碍</td></tr><tr><td>Q是Question</td><td>问题</td></tr><tr><td>A是Answer</td><td>答案</td></tr></tbody></table><ol><li><p><strong>标准式（SCA）</strong>： 背景——冲突——答案</p><p><font color=#5B5B5B size=2>我们公司近年来发展速度越来越快，连锁门店逐年增加。——背景。</font></p><p><font color=#5B5B5B size=2>但公司的资金缺I1却越来越明显，已经成为限制我们快速发展的主要瓶颈。——冲突</font></p><p><font color=#5B5B5B size=2>为此，我设计了门店资金调整方案，以解决资金缺口过大的问题。——答案</font></p></li><li><p><strong>开门见山式（ASC）</strong>：答案——背景——冲突<br>紧急型：时间紧急的情况下，对方可以快速把握重点</p><p><font color=#5B5B5B size=2>老板，我还是不去当销售，留在技术岗位更加合适。——答案</font><br><font color=#5B5B5B size=2>因为，销售需要跟客户建立密切的联系。——背景</font><br><font color=#5B5B5B size=2>但是，我不喜欢与人打交道，并且这方面能力和经验非常欠缺。——冲突</font></p></li><li><p><strong>突出忧虑（CSA）</strong>：冲突——背景——答案<br>广告型：开头引起情绪，快速获取关注，以及引起结尾答案的兴趣。</p><p><font color=#5B5B5B size=2>这样下去你可能会瘫痪!——冲突</font><br><font color=#5B5B5B size=2>颈椎很脆弱，长时间用电脑会导致诸多问题等等。——背景</font><br><font color=#5B5B5B size=2>这里有一套电脑支架，把你的电脑抬高就好了。——答案</font></p></li><li><p><strong>突出信心式（QSCA）</strong>：问题——背景——冲突——答案<br>文章型：开头问问题，然后逐渐讲解。前提已经准备好答案的情况下。</p><p><font color=#5B5B5B size=2>如何在某一个领域成为专家? ——问题</font><br><font color=#5B5B5B size=2>你可能听说过，只要在某个领域训练1万个小时，就可以成为专家。——背景</font><br><font color=#5B5B5B size=2>但是实际上，有很多人工作了10年以上，也并没有成为专家。——冲突</font><br><font color=#5B5B5B size=2>其实，决定一个人能否成为某一领域的专家，最重要的是取决于他是否进行了刻意练习。——答案</font></p></li></ol><h3 id="1-3-信息归类分组"><a href="#1-3-信息归类分组" class="headerlink" title="1.3 信息归类分组"></a>1.3 信息归类分组</h3><h4 id="归类信息的三个步骤"><a href="#归类信息的三个步骤" class="headerlink" title="归类信息的三个步骤"></a>归类信息的三个步骤</h4><p><font color = #EBC57C><strong>信息归类</strong></font></p><p>列出需要的所有信息项，将类似信息进行连线分组。</p><p><font color = #EBC57C><strong>归纳共性</strong></font></p><p>查看每组的各条信息，把它们的共性提炼出来，用一个词来概括整个组的信息。</p><p><font color = #EBC57C><strong>结构提炼</strong></font></p><p>看一下上一步中得到的分组，是否每组的信息属于同一范畴，是否需要补充或调整组</p><hr><p><font color = #b3d4fc size=5><strong>例子：</strong></font></p><p>你成为了圈外的课程产品经理，了解到你平时的工作包括: </p><ol><li>搜集材料到素材库</li><li>招募新助教</li><li>迭代课程内容</li><li>主持开学和结课仪式</li><li>培训助教</li><li>安排学习活动日程</li><li>设计学习活动</li><li>设计课程大纲。</li></ol><p><strong>信息归类：</strong><br>第一类：1、3、8；第二类：4、6、7；第三类：2、5<br><strong>归纳共性：</strong><br>第一类命名为“研发和迭代课程”；第二类命名为“设计和执行学习活动”；第三类命名为“管理助教”<br><strong>结构提炼：</strong><br>第一方面，研发和迭代课程，包括: 1、3、8<br>第二方面，设计和执行学习活动，包括: 4、6、7<br>第三方面，管理助教，包括:2、5</p><hr><h4 id="结构提炼注意要点"><a href="#结构提炼注意要点" class="headerlink" title="结构提炼注意要点"></a><strong><font color = #EBC57C>结构提炼注意要点</font></strong></h4><p>满足MECE原则Mutually Exclusive Collectively Exhaustive。</p><ol><li>ME：<strong>相互独立</strong>。指的是在分类的时候，每个层次的组别之间的信息没有重叠。</li><li>CE：<strong>完全穷尽</strong>。指的是没有遗漏掉其它重要信息，整个结构是完整的。</li></ol><p><font color = red><strong>MECE 原则就是不重不漏。</strong></font></p><h3 id="1-4-逻辑递进"><a href="#1-4-逻辑递进" class="headerlink" title="1.4 逻辑递进"></a>1.4 逻辑递进</h3><p>整个结构里各层各组的信息都是逻辑紧密地联系在一起的。</p><h4 id="逻辑递进的两种形式"><a href="#逻辑递进的两种形式" class="headerlink" title="逻辑递进的两种形式"></a><strong><font color = #EBC57C>逻辑递进的两种形式</font></strong></h4><h5 id="纵向逻辑"><a href="#纵向逻辑" class="headerlink" title="纵向逻辑"></a><strong><font color = C49062>纵向逻辑</font></strong></h5><p>指的是从结构的主题开始，每一层的信息要对下一层整个组的信息进行高度概括，而下一层的内容是对上一层次的支撑，以此类推，直到结构的底部，这个原则称之为以上统下。<br><strong>纵向逻辑推理的两种方法：</strong></p><ol><li><strong>演绎推理</strong>：从一般规律推论到具体事实。前提：要具备有普遍性的事实</li><li><strong>归纳推理</strong>：从大量总结出的一般规律。</li></ol><h5 id="横向逻辑"><a href="#横向逻辑" class="headerlink" title="横向逻辑"></a><strong><font color = C49062>横向逻辑</font></strong></h5><p>陈述信息的顺序，要符合大多数人的思维习惯<em>（比如先早后晚、先主要后次要、范围先大后小等等）</em>。通常我们有三种顺序来陈述，分别是时间顺序、空间顺序、程度顺序。<br><strong>横向逻辑三种陈述顺序：</strong></p><ol><li><strong>时间顺序：</strong>按照前因后果的循序来陈述</li><li><strong>空间顺序：</strong>按照地理概念来划分</li><li><strong>程度顺序：</strong>按照重要性来排列</li></ol><hr><p><font color = #b3d4fc size=5><strong>例子：</strong></font></p><p>　　女孩子大概都受了小鸟依人的蛊惑，总认为自己将来是需要依靠某个人才能生活的，尤其想依靠的就是男人。你可以长得像只小鸟一样娇小可人，这没有什么不好，但是千万别长成一只“笼子里的金丝雀”。<br>　　不独立，就是不自由!你有完整的独立的人格。在经济上，决不依靠任何人:在感情上，绝不依赖某个人，在思想上，决不盲从任何人。<br>　　首先在经济上，你要找到解决自己生计的谋生方式，而不是指着橱窗里的衣服和首饰对男人说我要!我要!，女人应该像男人一样有事做才行。五个工作日能让你富有朝气。你必须找到能够保证你牢固地站在大地上的东西。在感情上，除了爱情以外，还有很多重要的事情值得你去做。不妨走出去，多认识一些优秀的人，这时你会发现你爱着的那个他也不过是衣服上的一颗白饭粒，不是你的救命粮。因此，不要对那个人说‘没有你我就活不下去….之类的傻话。把所有的心思和情感都寄托在他的身上，他不会被你那忠诚而挚热的感情所感动，相反，他会越不把你当一回事。在思想和精神上，一个对男人言听计从，事事都要寻求男人帮助，离开男人就无法决定任何事的女人，对男人来说，无异于养了一个需要照顾的女婴，是包袱，是累赘。做个有主张的女子吧!知道什么该做，什么不该做、不盲从、不人云亦云，有自己的想法，坚持自己的观…..当你在经济、感情和思想上完全独立的时候，你会发现你的世界原来非常广阔。</p><p><strong>纵向逻辑归纳推理可分成：</strong>经济、感情、思想<br><strong>横向逻辑程度循序：</strong><br>        经济上包括两点，分别是“不要求男人给你买东西”，“找到一份热爱的、带给你朝气的事业”<br>        感情上也是两点，分别是“多认识-一些优秀的朋友”，“不把所有的心思和情感都寄托在他身上”<br>        思想上的两点，“不要事事寻求男人帮助”和“坚持自己的想法和观点”。</p><hr><h1 id="2-结构化在表达中的应用"><a href="#2-结构化在表达中的应用" class="headerlink" title="2 结构化在表达中的应用"></a>2 结构化在表达中的应用</h1><h2 id="2-1临场发言中运用结构化"><a href="#2-1临场发言中运用结构化" class="headerlink" title="2.1临场发言中运用结构化"></a>2.1临场发言中运用结构化</h2><h3 id="结构化表达的两种方式"><a href="#结构化表达的两种方式" class="headerlink" title="结构化表达的两种方式"></a><strong><font color = #EBC57C>结构化表达的两种方式</font></strong></h3><ol><li><strong>自上而下：</strong>先考虑主题，然后找结构，最后填充信息</li><li><strong>自下而上：</strong>先收集零散的信息和观点，然后归纳出结构，最后概括出主题。</li></ol><h3 id="临场发言三个步骤：-自上而下"><a href="#临场发言三个步骤：-自上而下" class="headerlink" title="临场发言三个步骤：(自上而下)"></a><font color = #EBC57C><strong>临场发言三个步骤：(自上而下)</strong></font></h3><ol><li><p><strong>定主题</strong></p><p><font color=#5B5B5B size=2>先想清楚自己到底想表达什么观点，也就是主题是什么。不要指望给出一堆信息，让听的人来帮你提炼主题。要在一开始就说出自己的观点，作为一个切入点。这个步骤对应结构化思维当中的“主题先行”。</font></p></li><li><p><strong>搭架子</strong><br><font color=#5B5B5B size=2>论主题的时候需要分为几个小点。因为要现场短时间内做到归类分组和逻辑递进太难了，所以可以事先积累一些现成的架子，它们本身就符合归类分组和逻辑递进的要求，然后我们往里面填充信息，就可以做到结构化发言了。相当于记忆索引不至于，没话说</font></p></li><li><p><strong>填素材</strong></p><p><font color=#5B5B5B size=2>根据架子里每一个小点，填充一些事例和数据，从而推进论据向观点靠近，让发言的内容更加饱满。</font></p></li></ol><hr><p><font color = #b3d4fc size=5><strong>例子：</strong></font></p><p><font size=5><strong>被问到: 你是怎么驱动团队达成目标的?</strong></font></p><p>先分析一下，想清楚自己到底想说什么，你的主题观点是什么再表达出来，比如:“激励员工不能只靠奖惩而要激发内部驱动力”，大家就明白你大概是要表达什么内容了。根据内部驱动力理论的三个要素:<strong>自主感</strong>、<strong>胜任感</strong>、<strong>归属感</strong>，搭一个空间要素架。想想各个点，你主要会做一些什么。进而解释。</p><hr><p><font color = #b3d4fc size=5><strong>注意点：</strong></font></p><ol><li><strong>不要急着回答问题</strong><br><font color=#5B5B5B size=2>当别人抛出问题时，不要马上回答，稍微花5秒钟思考一下问题背后的本质。</font></li><li><strong>逼迫自己选择一个视角</strong><br><font color=#5B5B5B size=2>临场发言时，大脑往往会有很多观点浮现出来，甚至有时候这些观点可能是相反的，大脑会有不同的声音在吵架。通常这个时候，最容易浪费时间在纠结当中。所以，最重要的不是思考哪一个观点是对的，而是迅速选取一个视角，然后围绕它去搭建你的结构。</font></li><li><strong>不断回答听众头脑中的疑问</strong><br><font color=#5B5B5B size=2>发言需要吸引人，并且让人觉得有逻辑，一个重要因素就是“你不断给出的信息，正好回答了听众脑中不断蹦出的问题”。</font></li></ol><h2 id="2-2搭架子组织结构"><a href="#2-2搭架子组织结构" class="headerlink" title="2.2搭架子组织结构"></a>2.2搭架子组织结构</h2><h3 id="临场发言中常用的三种架子"><a href="#临场发言中常用的三种架子" class="headerlink" title="临场发言中常用的三种架子:"></a><font color = #EBC57C><strong>临场发言中常用的三种架子:</strong></font></h3><ol><li><strong>时间架：</strong></li></ol><ul><li><p>时间点：不同时间线递进<br>   <font color=#5B5B5B size=2>去年、今年、明年；20岁、22岁、24岁</font>    </p></li><li><p>周期：一组现象按同样的顺序重复出现<br>   <font color=#5B5B5B size=2>公司运作周期、产品的生命周期</font></p><ul><li>流程/步骤：过程事件<br><font color=#5B5B5B size=2>解释产品质量好流程介绍：研发、工程、采购、生产、市场和销售、服务等等。</font></li></ul></li></ul><ol start="2"><li><strong>空间架：</strong></li></ol><ul><li><strong>地点：</strong><br>   <font color=#5B5B5B size=2>不同地方</font><ul><li><strong>一个整体的组成部分：</strong><br><font color=#5B5B5B size=2>主机是由主板、显卡、cpu等配件组成</font></li><li><strong>抽象的要素概念：</strong><br><font color=#5B5B5B size=2>3c战略模型：公司、顾客、解决对象展开讨论</font></li><li><strong>二维矩阵：</strong><br><font color=#5B5B5B size=2>可以用到重要紧急矩阵，从重要且紧急、重要不紧急等方面展开</font></li></ul></li></ul><ol start="3"><li><strong>程度架：</strong><ul><li>重要性程度：把重要的放前面说，递进解释</li><li>紧急性程度：把紧急的放前面说，递进解释</li></ul></li></ol><h3 id="临场发言的训练方法"><a href="#临场发言的训练方法" class="headerlink" title="临场发言的训练方法:"></a><font color = #EBC57C><strong>临场发言的训练方法:</strong></font></h3><ol><li><strong>输入：</strong></li></ol><ul><li><strong>累架子拆文章：</strong><br><font color=#5B5B5B size=2>看到一篇文章，觉得表达得很清晰很好理解，那么就可以试着去拆解，分析作者是用了什么架子。把这个架子记录下来，以后在说到类似的话题，就可以直接引用了。</font></li><li><strong>存模型：</strong><br><font color=#5B5B5B size=2>平时在看书和文章的时候，看到一些有意思的理论、模型，可以思考出它的三到五个应用，加深记忆，然<br> 后把它记下来，作为自己的素材。</font></li><li><strong>建索材库：</strong><br>   <font color=#5B5B5B size=2>把积累到的架子放到自己素材库中，<br>   可以按照时间、空间和程度进行分类，同时打个标签注明一下，这个架子在什么场景下可以使用，方便你<br>   在临场发言的时候，可以快速进行调用。</font></li></ul><ol start="2"><li><p><strong>输出：</strong></p><p><strong>写文章</strong>、<strong>讲议题</strong></p></li></ol><p><font color = #EBC57C><strong>其他重要的思维能力:</strong></font><br><strong>思维</strong>的意义是得出结论或解决问题。</p><ol><li><strong>创造思维：</strong>把你的思路打开，这样可以进发出很多非常规的想法</li><li><strong>批判思维：</strong>去判断。这些想法是否靠谱，是否切中了问题本质</li><li><strong>收敛思维：</strong>将零散的想法进行结构化，结构化思维是收敛思维的一种</li></ol><h1 id="3表达"><a href="#3表达" class="headerlink" title="3表达"></a>3表达</h1><h2 id="3-1清晰表达"><a href="#3-1清晰表达" class="headerlink" title="3.1清晰表达"></a>3.1清晰表达</h2><h3 id="表达能力分三层："><a href="#表达能力分三层：" class="headerlink" title="表达能力分三层："></a><font color = #EBC57C><strong>表达能力分三层：</strong></font></h3><ol><li>条理清晰</li><li>有说服力</li><li>有影响力</li></ol><hr><p><font color = #b3d4fc size=5><strong>例子：</strong></font></p><p>向老板汇报这个月的销售情况（已完成目标），下面有两种表达方式：</p><ul><li><p><strong>No1：</strong><br><font color=#5B5B5B size=2>本次销售任务已完成：1.老顾客完成了5笔复购、2.拓展了10名新顾客，已有两名已经确定意向。</font></p></li><li><p><strong>No2：</strong><br><font color=#5B5B5B size=2>由于上个月折扣比较大，下个月比较惨。不过通过老顾客的回访、请顾客推荐等方式，在下半个有还是完成任务：1.完成5笔老顾客复购、2.拓展了10名新用户，已经有两名已经确定意向。</font></p></li></ul><p>no1、no2都是是通过结构化表达，no2有故事性，no1直接性，虽然两者都是标明较为清晰，但no2更有说服力。no2<strong>是为表达添加了故事性。</strong></p><hr><h3 id="讲故事的三个要点："><a href="#讲故事的三个要点：" class="headerlink" title="讲故事的三个要点："></a><font color = #EBC57C><strong>讲故事的三个要点：</strong></font></h3><ol><li><strong>冲突</strong></li></ol><ul><li><p>冲突是故事的灵魂</p></li><li><p>冲突 = 渴望 + 阻碍</p></li></ul><ol start="2"><li><strong>行动</strong></li></ol><ul><li>为了解决冲突采取的方法</li></ul><ol start="3"><li><strong>结局</strong></li></ol><ul><li>行动带来的结果</li></ul><hr><p><font color = #b3d4fc size=5><strong>例子：</strong></font></p><p>西游记、梁祝等优秀的故事，都有共同特征：冲突。冲突是故事的灵魂</p><p><strong>西游记</strong><br>如果唐僧师徒四人取经路上没有妖魔鬼怪，一路顺风。这些故事还会感人吗?因为这样就没有了<strong>冲突</strong>。<br>唐僧发生<strong>冲突</strong>，孙悟空都会采取<strong>行动</strong>救师傅、帮助师傅，完成西天取经的任务，从而达到<strong>结局</strong>。</p><p><strong>怕上火喝王老吉</strong><br>含义：想吃(渴望)，但很热气(阻碍)，配王老吉(行动)，预防上火(结局)</p><hr><h3 id="结构化思维和讲故事相互融合"><a href="#结构化思维和讲故事相互融合" class="headerlink" title="结构化思维和讲故事相互融合:"></a><strong><font color = #EBC57C>结构化思维和讲故事相互融合:</font></strong></h3><ol><li>用SCQA的形式来增加主题的故事性</li><li>具体述可以用“ 冲突(S+C+Q) + 行动(A) + 结局(A) ”来展开</li></ol><p><strong>学习来源：圈外同学</strong></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-认识结构化&quot;&gt;&lt;a href=&quot;#1-认识结构化&quot; class=&quot;headerlink&quot; title=&quot;1 认识结构化&quot;&gt;&lt;/a&gt;1 认识结构化&lt;/h1&gt;&lt;h2 id=&quot;1-1-结构化的特征&quot;&gt;&lt;a href=&quot;#1-1-结构化的特征&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="学习记录" scheme="https://Sanscan12.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="笔记" scheme="https://Sanscan12.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="圈外同学" scheme="https://Sanscan12.github.io/tags/%E5%9C%88%E5%A4%96%E5%90%8C%E5%AD%A6/"/>
    
  </entry>
  
</feed>
